[
  {
    "objectID": "posts/projects/passover-2022-mini-project.html",
    "href": "posts/projects/passover-2022-mini-project.html",
    "title": "Passover 2022 Mini Project",
    "section": "",
    "text": "An oportunity to play and get started before the big final project.\n\n\n Some guidelines\nIn this project each one of you will individually create a Thingspeak channel and will upload to it data from an ESP32.\nMinimal requirements: * Measure temperature (using SHT31) * Measure humidity (using SHT31 or BME280) * Calculate VPD * Make use of at least one more “unique” sensor\n\n\n Deadline\nAll Chanels must be live by the 28th of April.\nThe name of the channel MUST be spelled with the prefix “Passover_2022_” and then your first and last name with separated by an underscore.\nFor example: `Passover_2022_Erez_Feuer\nYou MUST provide information regarding your channel in the “description” section which can be found under “channel settings”. This information should include: * location (e.g.: balcony in Rechovot, kitchen in Gan-Yavne, 7th floor bedroom window, etc.), * what the sensors are measuring (including the “unique” sensor/s), and * any other information that you find relevant - the more the better.\nUpload interval should be at least every 3 minutes (not longer). Please don’t upload every second if there is no justification (for example the humidity in the bedroom will change slowly, so no need for rapid measurments).\n\n\n Public view\nWe will be monitoring your Thingspeak channels via the “Public view” section. It is very simple to make your channel public, just check “Share channel view with everyone” under the Sharing tab as you can this in the following image:\n\n\n\n How to power your projects\nOnce the code is uploaded to the ESP32 and every thing works fine, you don’t need your computer anymore, and can use a generic USB charger as a power supply. Don’t worry about the code, it will work as long as the ESP32 has power, because you already uploaded the code to memory.\n\n\nCalculate VPD\n\nThe Vapor Pressure Deficit (VPD, in kPa) is the difference between saturation vapor pressure \\(e_s\\) and actual vapor pressure \\(e_d\\):\n\\[\\text{VPD} = e_s - e_d.\\]\nFor temperatures ranging from 0 to 50 °C, the saturation vapor pressure can be calculated with\n\\[\ne_s = \\exp \\left[ \\frac{16.78\\, T -116.9}{T+237.3} \\right],\n\\]\nand the actual vapor pressure is given by\n\\[\ne_d = e_s \\frac{RH}{100},\n\\]\nwhere \\(RH\\) is the relative humidity (%), and the temperature \\(T\\) in the equations above is in degrees Celcius."
  },
  {
    "objectID": "posts/projects/arduino-nano.html",
    "href": "posts/projects/arduino-nano.html",
    "title": "Arduino Nano",
    "section": "",
    "text": "For those of you that took home an arduino nano to play with, we have a few pointers.\n\n5V vs 3.3V\nWhile ESP32 works on 3.3V, Arduino nano works on 5V. That means that the digitalWrite() function will send 5V to a pin and that the ADC can read voltaged in the 0-5V range (using the function analogRead()).\nIMPORTANT - don’t forget that ESP32 is 3.3V when going back to it from the Arduino. It is important to note that the arduino nano has a 3.3V pin that can be used. Most of the sesnsors we use are compatible with 3.3V so if you use that pin there is less chance of making mistakes later on.\n\n\nADC\nArduino has a 10bit ADC.\n\n\nSettings in the Arduino IDE\nNo need to hold a button on the board when uploading code (Yay!). You will need to change the settings in the Arduino IDE:\nTools -> Board -> \"Arduino Nano\"\nTools -> Processor: \"ATmega328P (Olad Bootloader)\"\nAs you can see in this image:"
  },
  {
    "objectID": "posts/projects/final-project.html",
    "href": "posts/projects/final-project.html",
    "title": "Final Project",
    "section": "",
    "text": "In the last month of the semester you will pair up with another student to do your Final Project. This project is an opportunity for you to apply all what we learned, to be inovative, and create your own agrotech project. You will have a few weeks to plan, setup and run your projects. At the end of the semester we will have a festive presentation day in which each pair of students will present their projects.\n\n\nPlease consult this Google Spreadsheet to be up-to-date with what’s going on with the various projects. Every team should update this spreadsheet regularly with the relevant information.\n\n\n\nThis year the final projects will all take place in a greenhouse on campus and will share the theme of data logging and control. Each team will focus on a different aspect in the greenhouse, e.g., temperature and RH monitoring, energy balance, irrigation control, plant monitoring, etc. All the data collected will be uploaded to the same Thingspeak account, so everyone will have access to everyone else’s data. The different teams are expected to be in contact and share with each other what they are doing, so that you can exchange ideas and build into each other’s strengths.\n\n\n\nDocumenting your project well is probably one of the most important lessons you will learn. Without documentation your projects will not live on and they will end their life right after the semester is over; you will forget what exactly you did and no one will be able to reproduce what you have done. We don’t want that for our projects…\nThe goal of the Agrotech-Lab course is to create a repository of all the cool projects made over the years. That way the projects will live forever and future students and other people around the world can learn from your work.\nWe require that each team creates a Github page including all the documentation. It should include:\n\nIntroduction: general explanation about the project and its goals\nHardware and assembly: Make the description as detailed as posible. Include many photos, links to order, datasheets etc.\nCode: Provide all code used in this project. Code should be organized with comments throughout explaining it.\nInstructions: How to make and use the project.\nExperinment: Show an example of the project “in action”.\n\nPlese note, the github page is your “final project paper/report”.\n\n\n\nOn the last day, when we meet to show our projects, each team will give a short talk of 5 minutes. During this talk you will touch the following points:\n\nWhat did you do?\nWhy do a project like yours?\nAre there agricultural or other benefits?\nHow did you do it? Hardware and code (no need to go over it, just explain in general).\nWhat did you learn? Show graphs and data analysis.\n\n\n\nPresentation is something you present to others, it does not mean a “Powerpoint presentation”. Your presentation will be solely based on your GitHub repository."
  },
  {
    "objectID": "posts/projects/borrowing-equipment.html",
    "href": "posts/projects/borrowing-equipment.html",
    "title": "Borrowing equipment",
    "section": "",
    "text": "We want to give you the freedom to try out all the equipment, but we need help in tracking what equipment you took. For that reson we started a colaborative spreadsheet in which you can list the equipment you took home / are using in your project. (Only HUJI accounts can edit that sheet).\n Link to sheet\n\nAbout the sheet & some guidelines:\n\nEach unique component has its own column, including its name, brief description and link to a picture of it.\nOne row per student (please add yourself).\nInsert the amount you took of each component in numbers only.\nIn the Graveyard section write in text (example: 2 x ESP32) all the equipment that you burnt, found malfunctioning, lost, etc… Whatever we can’t use anymore… IMPORTANT: there is no shame in having a big list, honesty is what we are looking for. We are just trying to keep track of all the equipment.\nPlease make sure to immediately update the sheet as you take/return the equipment.\nNo need to list super-fundamental equipment like resistors and cables.\n\n\n\nWe need your help:\nThe sheet is not complete and will be expanded during the semester. If there is missing information, please add/fix it. It can be:\n\nMissing component column\n\nNo description\n\nNo image link"
  },
  {
    "objectID": "posts/tutorials/python-matlab-basics.html",
    "href": "posts/tutorials/python-matlab-basics.html",
    "title": "insert ino code",
    "section": "",
    "text": "Python and Matlab are very similar, but there are many syntax differences between them. This tutorial should help you start making graphs and the most basic data analysis, but it is very far from being a comprehensive guide. Google and Stack Overflow are your best friends :)"
  },
  {
    "objectID": "posts/tutorials/python-matlab-basics.html#matlab",
    "href": "posts/tutorials/python-matlab-basics.html#matlab",
    "title": "insert ino code",
    "section": "Matlab",
    "text": "Matlab\nMatlab is a proprietary (paid) software, but all HUJI students can install it and use it for free as long as they are connected to the university’s internet, either directly or through a VPN. In any case, we will be using Matlab to plot graphs on Thingspeak, which is owned by the same parent company, MathWorks.\nHere are a few very useful tutorials provided by MathWorks:\n\nApps\nAnalyze Your Data\nPrepare and Analyze Data — Examples\nVisualize Data — Examples\nAct on Data — Examples\n\nAs a first example that we will run together, please follow the steps below:\n\nLog into Thingspeak, open your channel, and then go to either Private View or Public View.\nPress on MATLAB Visualization box, on the top right.\nFrom Templates, choose Create a 2-D line plot, then press Create.\nIn case the template doesn’t load, you can create a custom visualization and paste the code below\n\n% Template MATLAB code for visualizing data from a channel as a 2D line\n% plot using PLOT function.\n\n% Prior to running this MATLAB code template, assign the channel variables.\n% Set 'readChannelID' to the channel ID of the channel to read from. \n% Also, assign the read field ID to 'fieldID1'. \n\n% TODO - Replace the [] with channel ID to read data from:\nreadChannelID = [];\n% TODO - Replace the [] with the Field ID to read data from:\nfieldID1 = [];\n\n% Channel Read API Key \n% If your channel is private, then enter the read API\n% Key between the '' below: \nreadAPIKey = '';\n\n%% Read Data %%\n\n[data, time] = thingSpeakRead(readChannelID, 'Field', fieldID1, 'NumPoints', 30, 'ReadKey', readAPIKey);\n\n%% Visualize Data %%\n\nplot(time, data);\nRead here more about arguments that function thingSpeakRead can receive"
  },
  {
    "objectID": "posts/tutorials/python-matlab-basics.html#python",
    "href": "posts/tutorials/python-matlab-basics.html#python",
    "title": "insert ino code",
    "section": "Python",
    "text": "Python\nWe will be using Jupyter Notebook as our python interface. There are many ways of running python, we chose Jupyter because it allows for easy prototyping, and the Markdown cells are great for documentation.\nJupyter Notebook{: .button}"
  },
  {
    "objectID": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html",
    "href": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html",
    "title": "Psychrometric Chart and Evaporative Cooling",
    "section": "",
    "text": "Here we will learn a bit about the psychrmetric chart - what it is how to read it and how to use it in python. In addition we will learn a bit about evaporative cooling and calculations that can be done."
  },
  {
    "objectID": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html#psychrometric-chart",
    "href": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html#psychrometric-chart",
    "title": "Psychrometric Chart and Evaporative Cooling",
    "section": "Psychrometric Chart",
    "text": "Psychrometric Chart\n\n\n\nChart\n\n\nHi-res pdf of the graph above.\nThe chart allows us to study the relation between:\n\nAir temperature\nRelative humidity\nDew point\nWet bulb temperature\nMoisture content\nEnthalpy\nAir volume\n\nYou can read more about all of these here.\nInformation about how to read the chart can be found here."
  },
  {
    "objectID": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html#evaporative-cooling-wiki",
    "href": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html#evaporative-cooling-wiki",
    "title": "Psychrometric Chart and Evaporative Cooling",
    "section": "Evaporative cooling (wiki)",
    "text": "Evaporative cooling (wiki)\nEvaporative coolers lower the temperature of air using the principle of evaporative cooling. Evaporative cooling is the conversion of liquid water into vapor using the thermal energy in the air, resulting in a lower air temperature. The energy needed to evaporate the water is taken from the air in the form of sensible heat, which affects the temperature of the air, and converted into latent heat, the energy present in the water vapor component of the air, whilst the air remains at a constant enthalpy value. This conversion of sensible heat to latent heat is known as an isenthalpic process because it occurs at a constant enthalpy value. Evaporative cooling therefore causes a drop in the temperature of air proportional to the sensible heat drop and an increase in humidity proportional to the latent heat gain. Evaporative cooling can be visualized using a psychrometric chart by finding the initial air condition and moving along a line of constant enthalpy toward a state of higher humidity\nIn the green house we have an evaporative cooler as shown in this diagram:\n \nWater trickles on a celullose pad, then fans push dry air from outside through the pad in which water evaporates and the air gets colder and humidity rises."
  },
  {
    "objectID": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html#how-much-can-the-cooler-cool",
    "href": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html#how-much-can-the-cooler-cool",
    "title": "Psychrometric Chart and Evaporative Cooling",
    "section": "How much can the cooler cool?",
    "text": "How much can the cooler cool?\nThe evaporative cooler can cool as low as the “wet bulb trmperature”.\nWe can look at the chart, and we should for the first time… But let’s calculate it using the PschroLib python package.\nAll the library’s functions can be found here.\nimport psychrolib\n\n# Set the unit system, for example to SI (can be either SI or IP) - this needs to be done only once\npsychrolib.SetUnitSystem(psychrolib.SI)\n\naltitude = 0\natm_pressure = psychrolib.GetStandardAtmPressure(0)\n\n# Calculate the wet bulb temperature for a dry bulb temperature of 25 C , a relative humidity of 80% and atmospheric pressure (kPa)\nWBT = psychrolib.GetTWetBulbFromRelHum(25.0, 0.80,atm_pressure )\nprint(f'Wet Bulb Temperature: {WBT:.3f} degree C')\nprint(f'Degrees cooled: {25-WBT:.3f} degree C')\nOutput:\nWet Bulb Temperature: 22.380 degree C\nDegrees cooled: 2.620 degree C\nNow let’s see how many degrees will it cool if we have only 30% relative humidity outside:\nWBT = psychrolib.GetTWetBulbFromRelHum(25.0, 0.30,atm_pressure )\nprint(f'Wet Bulb Temperature: {WBT:.3f} degree C')\nprint(f'Degrees cooled: {25-WBT:.3f} degree C')\nOutput:\nWet Bulb Temperature: 14.422 degree C\nDegrees cooled: 10.578 degree C\nAs you can see it is much more efficient in dry areas like deserts. Therefore it is many times called a “desert cooler”. What will the relative humidity be for the air that leaves the pad?\n\nEfficiency\nTheoretically, an evaporative cooler cools down to the wet bulb temperature, but in reality it is not 100% efficient and the air comes out not as cold. Many factors can influence: water quality, air speed, pad thickness, pad condition (you will se that ours is not great…), etc. We can calculate the efficiency by this equation:\n\\[\n\\eta = \\dfrac{T_i-T_o}{T_i-T_w},\n\\]\nwhere\n\n\\(T_i = \\:\\) temperature coming into the pad.\n\n\\(T_o = \\:\\) temperature coming out of the pad.\n\\(T_w = \\:\\) wet bulb temperature.\n\nWe can calculate it using data from our sensors and learn about the greenhouse we are using.\nFor example:\nIf we measure 30C and 60% humidity outside and the temperature out of the pad is 26C\nT_i = 30\nT_o = 26\nT_w = psychrolib.GetTWetBulbFromRelHum(T_i, 0.60,atm_pressure )\nprint(f'Wet Bulb Temperature: {T_w:.3f} degree C')\n\neffi = (T_i-T_o)/(T_i-T_w)\nprint(f'Efficiency is: {100*effi:.3f} %')\nOutput:\nWet Bulb Temperature: 23.812 degree C\nEfficiency is: 64.646 %\n\n\nWhat else can we calculate?\nKnowing the fan’s capacity (we can measure that too using wind sensors) and the temerature and humidity of the air leaving the greenhouse we can calculate:\n\nAmount of water evaporated from the pad,\nAmount of water evaporated from the greenhouse (being a concreete greenhouse that means total evaporation from plants and pots),\nHeat removed from the greenouse by the flowing air,\n\nThese are just some ideas, you can think of other interesting things to calculate.\nThere are existing models for predicting the temperatures of greenhouses. There are many other factors taking place such as solar radiation, outside wind, amounts of plants in the greenhouse, etc. We won’t be studying those here, but maybe you can come up with some models/conclusions/correlations of your own :)"
  },
  {
    "objectID": "posts/tutorials/libraries.html",
    "href": "posts/tutorials/libraries.html",
    "title": "Libraries",
    "section": "",
    "text": "Libraries are a crucial part of working with Arduino boards. They provide pre-written code that can be easily integrated into your own projects, saving time and effort. This guide will walk you through the two main ways of installing libraries in the Arduino IDE: using the Library Manager and manually installing a library downloaded from GitHub.\n\n\nThe Library Manager is the easiest and most straightforward way of installing libraries in the Arduino IDE. Follow these steps:\n\nOpen the Arduino IDE and navigate to Sketch > Include Library > Manage Libraries...\nIn the Library Manager window, type the name of the library you want to install in the search bar. You can also browse through the available libraries by clicking on any of the categories on the left-hand side.\nOnce you have found the library you want to install, click on it and then click the Install button.\nWait for the installation process to complete. You can check the progress in the progress bar at the bottom of the window.\nOnce the installation is complete, close the Library Manager window.\nTo include the library in your sketch, navigate to Sketch > Include Library and select the library you just installed.\n\n\n\n\nSometimes, the library you need is not available in the Library Manager, or you may want to install a specific version of a library that is not the latest. In such cases, you can manually download the library from GitHub and install it in the Arduino IDE. Follow these steps:\n\nOpen the GitHub repository of the library you want to install and click on the green Code button.\nSelect Download ZIP and save the zip file to your computer.\nOpen the Arduino IDE and navigate to Sketch > Include Library > Add .ZIP Library...\nSelect the zip file you just downloaded and click the Open button.\nWait for the installation process to complete. You can check the progress in the progress bar at the bottom of the window.\nOnce the installation is complete, close the Library Manager window.\nTo include the library in your sketch, navigate to Sketch > Include Library and select the library you just installed.\n\n\n\n\nInstalling libraries in the Arduino IDE is a straightforward process that can save you a lot of time and effort in your projects. Whether you prefer using the Library Manager or manually downloading libraries from GitHub, there is a solution for everyone."
  },
  {
    "objectID": "posts/tutorials/arduino-intro-and-links.html",
    "href": "posts/tutorials/arduino-intro-and-links.html",
    "title": "Arduino intro",
    "section": "",
    "text": "Welcome to the world of microcontrollers! In this course, we will be exploring the fascinating world of microcontrollers and how they can be used to control electronic devices.\n\nWhat is a microcontroller?\nA microcontroller, also known as an MCU, is a tiny computer that is capable of performing a variety of tasks. It is a single metal-oxide-semiconductor (MOS) integrated circuit (IC) chip that contains one or more central processing units (CPUs), memory, and programmable input/output peripherals. The MCU can receive input from various sensors and devices, process that input, and provide an output to control other devices.\n\n\nArduino\nOne popular brand of microcontrollers is Arduino. Arduino is a company that produces user-friendly microcontroller boards, such as the Arduino Uno, Arduino Mega, and Arduino Nano. These boards are widely used and have extensive documentation and online resources available. The Arduino board contains a microcontroller chip, memory, and input/output pins that can be used to interface with other electronic components such as sensors, motors, LEDs, and displays.\nThe Arduino board can be programmed using a simplified version of the C++ programming language, which makes it accessible for beginners to learn and use. The board is also open-source, meaning that anyone can access and modify the hardware and software designs.\n\n\nApplications\nArduino is being used for a wide variety of applications, including home automation, robotics, environmental monitoring, and education. For instance, Arduino can be used to control lights, fans, and other appliances in a home automation system. It is popular among hobbyists and students for building robots and automated systems. Lastly, Arduino is widely used to monitor temperature, humidity, and other environmental factors for research or industrial applications.\n\n\nESP32 = Arduino\\(^2\\) + WiFi + Bluetooth\nHowever, in this course, we will not be using Arduino boards. Instead, we will be using the ESP32 microcontroller (to be exact, the FIreBeetle 2 ESP32 board), which is similar to Arduino in terms of its programming environment, but has additional features such as built-in WiFi and Bluetooth capabilities. This makes it ideal for internet of things (IoT) projects and wireless communication. The ESP32 is also affordable, with boards costing around $5 each.\nThroughout this course, you will learn how to program the ESP32 to control various electronic devices. You will learn how to interface the ESP32 with sensors, motors, displays, and other devices. By the end of this course, you will have the skills and knowledge to create your own custom microcontroller projects.\nSo get ready to dive into the exciting world of microcontrollers with the ESP32!"
  },
  {
    "objectID": "posts/tutorials/MCU_intro.html",
    "href": "posts/tutorials/MCU_intro.html",
    "title": "agrotech lab",
    "section": "",
    "text": "Welcome to the world of microcontrollers! In this course, we will be exploring the fascinating world of microcontrollers and how they can be used to control electronic devices.\nA microcontroller, also known as an MCU, is a tiny computer that is capable of performing a variety of tasks. It is a single metal-oxide-semiconductor (MOS) integrated circuit (IC) chip that contains one or more central processing units (CPUs), memory, and programmable input/output peripherals. The MCU can receive input from various sensors and devices, process that input, and provide an output to control other devices.\nOne popular brand of microcontrollers is Arduino. Arduino is a company that produces user-friendly microcontroller boards, such as the Arduino Uno, Arduino Mega, and Arduino Nano. These boards are widely used and have extensive documentation and online resources available. The Arduino board contains a microcontroller chip, memory, and input/output pins that can be used to interface with other electronic components such as sensors, motors, LEDs, and displays.\nThe Arduino board can be programmed using a simplified version of the C++ programming language, which makes it accessible for beginners to learn and use. The board is also open-source, meaning that anyone can access and modify the hardware and software designs.\nArduino is being used for a wide variety of applications, including home automation, robotics, wearables, environmental monitoring, and education. For instance, Arduino can be used to control lights, fans, and other appliances in a home automation system. It is popular among hobbyists and students for building robots and automated systems. Arduino can also be used to create wearable technology such as fitness trackers and smartwatches. Lastly, Arduino is widely used to monitor temperature, humidity, and other environmental factors for research or industrial applications.\nHowever, in this course, we will not be using Arduino boards. Instead, we will be using the ESP32 microcontroller (to be exact, the FIreBeetle 2 ESP32 board), which is similar to Arduino in terms of its programming environment, but has additional features such as built-in WiFi and Bluetooth capabilities. This makes it ideal for internet of things (IoT) projects and wireless communication. The ESP32 is also affordable, with boards costing around $5 each.\nThroughout this course, you will learn how to program the ESP32 to control various electronic devices. You will learn how to interface the ESP32 with sensors, motors, displays, and other devices. By the end of this course, you will have the skills and knowledge to create your own custom microcontroller projects.\nSo get ready to dive into the exciting world of microcontrollers with the ESP32!"
  },
  {
    "objectID": "posts/tutorials/intro.html",
    "href": "posts/tutorials/intro.html",
    "title": "Introduction",
    "section": "",
    "text": "Blink\nIt’s time to run a first example.\n\nGo to File > Examples > 01.Basics, click on Blink.\nPress the  “right arrow” button on the top left to upload the code onto the ESP32.\nWhen you see “Connecting” on the bottom of the screen, press the right button on the ESP32.\n\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)\n  delay(1000);                       // wait for a second\n  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW\n  delay(1000);                       // wait for a second\n}\n\n            \n            \n            \n\n\n\nPrinting increasing numbers\nUpload the following code to your ESP32, then click on the  on the top right corner. This is called “Serial Monitor”.\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n// This is a one-line comment\n\n/*\nThis\ncomment\nspans\nmany\nrows\n*/\n\nint num = 0;              // number \n\nvoid setup() {\n  // initialize serial communication with computer:\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  // print num and break line\n  Serial.println(num);\n  // print num, don't break line\n  // Serial.print(num);\n  delay(1000);        // 1000 ms delay\n  num = num + 1;      // increase num by 1\n}\n\n            \n            \n            \n\n\n\nPrinting random numbers, then plotting!\n\nUpload the following code to your ESP32.\nOpen the Serial Monitor (). Now close it, and\nGo to Tools > Serial Plotter.\n\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \nint num1 = 0, num2 = 0;\n\nvoid setup() {\n  // initialize serial communication with computer:\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  // random(min, max)\n  num1 = num1 + random(-0, 5);\n  num2 = num2 + random(-10, 10);\n  // print num1, then tab, then num2, then break line\n  Serial.print(num1);\n  Serial.print(\"\\t\");\n  Serial.println(num2);\n  delay(100);        // 1000 ms delay\n}\n\n            \n            \n            \n\n\n\nFloats, functions, conditionals\nWe will now learn how to deal with floats, how to define our own functions, and how to write conditionals (if/else).\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \nfloat t = 0, x1 = 0, x2 = 0, x3 = 0;\n\nvoid setup() {\n  // initialize serial communication with computer:\n  Serial.begin(9600);\n}\n\nfloat my_sine(float time) {\n  return sin(time);\n}\n\nfloat my_cosine(float time) {\n  float double_time;              // you can define internal variables,\n  double_time = 2.0 * time;       // write as many commands as you want\n  return 2.0 * cos(double_time);  // in the end, return float\n}\n\nvoid loop() {\n  x1 = my_sine(t);\n  x2 = my_cosine(t);\n  if (x1 > 0) {\n    x3 = -1.0;\n  } else {\n    x3 = 1.0;\n  }\n  Serial.print(\"sin:\"); Serial.print(x1); Serial.print(\"\\t\");\n  Serial.print(\"cos:\"); Serial.print(x2); Serial.print(\"\\t\");\n  Serial.print(\"square:\"); Serial.print(x3);\n  Serial.println();\n  delay(50);        // 1000 ms delay\n  t += 0.05;\n}\n\n            \n            \n            \n\n\n\nWiFi, read time\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n//-----------------------------------------------------------------------------------\n//  WIFI setup:\n\n#include <WiFi.h>\n\nconst char* ssid = \"HUJI-guest\"; // your wifi SSID name\nconst char* password = \"\" ;// wifi pasword\nString formattedTime;\nfloat r = 0, m = 0;\n\nWiFiClient client;\n\n//-------------------------------------------------------------------------------------\n// Set time\n#include <NTPClient.h>\n#include <WiFiUdp.h>\n\nconst long utcOffsetInSeconds = 3600 * 2; // For UTC +2.00 : 2 * 60 * 60\n\nchar daysOfTheWeek[7][12] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};\n\n// Define NTP Client to get time\nWiFiUDP ntpUDP;\nNTPClient timeClient(ntpUDP, \"pool.ntp.org\", utcOffsetInSeconds);\n\nint time_s ; // variable for the second\n\n\nvoid setup() {\n  Serial.begin(9600);\n  //---------------------------------------------------------------------------\n  //wifi conection:\n  WiFi.disconnect();\n  delay(10);\n  WiFi.begin(ssid, password);\n\n  Serial.println();\n  Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n\n  WiFi.begin(ssid, password);\n\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"NodeMcu connected to wifi...\");\n  Serial.println(ssid);\n  Serial.println();\n  //-----------------------------------------------------------------------\n  // stings for time:\n  timeClient.begin();\n\n}\n\nvoid loop() {\n  timeClient.update();\n  time_s = timeClient.getSeconds();\n  if (time_s == 0) {\n    formattedTime = timeClient.getFormattedTime();\n    Serial.print(\"A new minute has started!\\nFull time = \");\n    Serial.println(formattedTime);\n  }\n  \n  Serial.print(\"s = \");\n  Serial.print(time_s);\n  r = random(10, 20);\n  m += r;\n  Serial.print(\"\\trand = \");\n  Serial.print(r);\n  Serial.print(\"\\trunning sum = \");\n  Serial.println(m);\n  if (time_s%10==9) {\n    Serial.print(\"Average  = \");\n    Serial.println(m / 10);\n    m = 0;\n  }\n  \n  delay(1000);\n}"
  },
  {
    "objectID": "posts/tutorials/RGB.html",
    "href": "posts/tutorials/RGB.html",
    "title": "RGB LED",
    "section": "",
    "text": "The ESP32 board we are using has an built in RGB LED on pin D8. The following code is an example of how to use it. Please note that it requires the installation of the \"Freenove_WS2812_Lib_for_ESP32.h\" library. It can be found in the Arduino IDE library manager or downloaded from the github repository. If you are not sure how to install a library follow our guide.\n// Include the library for controlling WS2812 LEDs using ESP32\n#include \"Freenove_WS2812_Lib_for_ESP32.h\" // https://github.com/Freenove/Freenove_WS2812_Lib_for_ESP32\n\n// Define the number of LEDs and the pin they are connected to\n#define LEDS_COUNT 1\n#define LEDS_PIN D8\n#define CHANNEL 0\n\n// Create an instance of the WS2812 LED strip with the specified number of LEDs, pin number, and color type\nFreenove_ESP32_WS2812 strip = Freenove_ESP32_WS2812(LEDS_COUNT, LEDS_PIN, CHANNEL, TYPE_GRB);\n\n// Define an array of colors to cycle through\nu8 m_color[5][3] = {{255, 0, 0}, {0, 255, 0}, {0, 0, 255}, {255, 255, 255}, {0, 0, 0}};\n\n// Setup function - runs once when the microcontroller starts up\nvoid setup() {\n  // Initialize the LED strip\n  strip.begin();\n  // Set the brightness of the LEDs to 50%\n  strip.setBrightness(50);\n}\n\n// Loop function - runs repeatedly while the microcontroller is powered on\nvoid loop() {\n  // Cycle through the array of colors\n  for (int j = 0; j < 5; j++) {\n    // Set LED to the current color and display the result\n    for (int i = 0; i < LEDS_COUNT; i++) {\n      strip.setLedColorData(i, m_color[j][0], m_color[j][1], m_color[j][2]);\n      strip.show();\n      delay(500);\n    }\n  }\n  // Cycle through a range of colors using the Wheel function\n  for (int j = 0; j < 255; j++) {\n    strip.setLedColorData(0, strip.Wheel(j));\n    strip.show();\n    delay(10);\n  }\n}"
  },
  {
    "objectID": "posts/tutorials/electronics-class.html",
    "href": "posts/tutorials/electronics-class.html",
    "title": "insert ino code",
    "section": "",
    "text": "Presentation\nDownload .pptx \n\n\nPin information for ESP32\n\n\n\nDigital Write\nUse the following code to activate LED pin.\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \nint LED_pin = 13;\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_pin as an output.\n  pinMode(LED_pin, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalWrite(LED_pin, HIGH);   // turn the LED on (HIGH is the voltage level)\n  delay(1000);                       // wait for a second\n  digitalWrite(LED_pin, LOW);    // turn the LED off by making the voltage LOW\n  delay(1000);                       // wait for a second\n}\n\n            \n            \n            \n\n\nPWM with ESP32\nUse the following code to activate LED pin with PWM.\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n// the number of the LED pin\nconst int ledPin = 13;  // 13 corresponds to GPIO13\n\n// setting PWM properties\nconst int freq = 5000;\nconst int ledChannel = 0;\nconst int resolution = 8;\n \nvoid setup(){\n  // configure LED PWM functionalitites\n  ledcSetup(ledChannel, freq, resolution);\n  \n  // attach the channel to the GPIO to be controlled\n  ledcAttachPin(ledPin, ledChannel);\n}\n \nvoid loop(){\n  // increase the LED brightness\n  for(int dutyCycle = 0; dutyCycle <= 255; dutyCycle++){   \n    // changing the LED brightness with PWM\n    ledcWrite(ledChannel, dutyCycle);\n    delay(15);\n  }\n\n  // decrease the LED brightness\n  for(int dutyCycle = 255; dutyCycle >= 0; dutyCycle--){\n    // changing the LED brightness with PWM\n    ledcWrite(ledChannel, dutyCycle);   \n    delay(15);\n  }\n}\n\n            \n            \n            \n\n\nReading an Analog Pin\nUse the following code to read an analog pin.\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \nint analog_pin = 32; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\n\n\nvoid setup() {\n  Serial.begin(9600); //\n}\n\nvoid loop() {\n  val = analogRead(analog_pin);  // read the input pin\n  Serial.println(val);          // print value\n  delay(100);\n}\n\n            \n            \n            \n\n\nADC to voltage\nUse the following code to convert ADC reading to voltage.\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \nint analog_pin = 32; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\nfloat voltage;\n\nvoid setup() {\n  Serial.begin(9600); //\n}\n\nvoid loop() {\n  val = analogRead(analog_pin);  // read the input pin\n  voltage = (3.3/4095)*val;  // convert to voltage according to ADC\n  Serial.print(\"Voltage: \");\n  Serial.print(voltage);          // print value\n  Serial.println(\" V\");\n  delay(100);\n}\n\n            \n            \n            \n\n\nPotentiometer and PWM\nUse the following code to control PWM with potentiometer and dim the LED.\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n// the number of the LED pin\nconst int ledPin = 13;  // 13 corresponds to GPIO13\n\nint analog_pin = 32; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\n\n// setting PWM properties\nconst int freq = 5000;\nconst int ledChannel = 0;\nconst int resolution = 12;\n \nvoid setup(){\n  Serial.begin(9600);\n    \n  // configure LED PWM functionalitites\n  ledcSetup(ledChannel, freq, resolution);\n  \n  // attach the channel to the GPIO to be controlled\n  ledcAttachPin(ledPin, ledChannel);\n}\n \nvoid loop(){\n    val = analogRead(analog_pin);  // read the input pin\n    Serial.println(val);          // print value\n    ledcWrite(ledChannel, val);\n    delay(15);\n  }\n\n            \n            \n            \n\n\nThermistor\nDownload Data Sheet\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n// Thermistor \n// reading the temperature via the ESP32's ADC\n\nint analog_pin = 32; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\nfloat v2; // variable to store the voltage of v2\nint r1 = 10000; // R1 value (in the voltage divider)\nfloat v1 = 3.3; // V1 value\nint b_val = 4150; // B value of the resistor (from the data sheet)\nfloat r2; // variable to store the resistance of r2 (thermistor resistance)\nfloat t; // variable to store the temperature\nint adc_steps = 4095; // the number of increments our ADC has (ESP32 = 12bit)\nfloat r_25 = 10000; // the thermistor resistance at 25C (from the data sheet)\n\n// function to convert resistance to temperature according to the b value\n// equation in this link:\n// https://www.thinksrs.com/downloads/programs/therm%20calc/ntccalibrator/ntccalculator.html\nfloat resistance_to_temperature(int b, float r, float r_25) {\n  return b/(log(r/r_25)+(b/298.15))-273.15;\n}\n\nvoid setup() {\n  Serial.begin(9600); //\n}\n\nvoid loop() {\n  val = analogRead(analog_pin);  // read the input pin (reading v2)\n  v2 = (v1/adc_steps)*val;  // convert to voltage of v2 according to ADC\n  r2 = (v2*r1)/(v1-v2);\n  t = resistance_to_temperature(b_val, r2, r_25);\n  Serial.print(\"Temperature: \");\n  Serial.print(t);          // print temperature\n  Serial.println(\" C\");\n  delay(100);\n}"
  },
  {
    "objectID": "posts/tutorials/thingspeak.html",
    "href": "posts/tutorials/thingspeak.html",
    "title": "insert ino code",
    "section": "",
    "text": "ThingSpeak is an open-source Internet of Things (IoT) platform that allows users to collect, analyze, and act on data from sensors or devices. It is a useful tool for monitoring and controlling devices in real-time, and it is commonly used in research projects, industrial automation, and smart homes. In this tutorial, we will introduce the basic concepts of ThingSpeak and demonstrate how to use it for data collection and visualization. In this tutorial, we will learn how to create a channel and upload data to it using an ESP32.\n\n\n\n\nSign in or create an account on the ThingSpeak website.\nClick on “Channels” and then click “New Channel”.\nFill in the required fields, such as the name and description of the channel, as well as the fields for the data you want to collect. You can have up to 8 fields in a channel.\nClick “Save Channel”.\nOnce you have created your channel, you will be taken to the Channel page.\nOn this page, you will see your Channel ID listed under the channel name.\nTo get your Write API Key, click on the “API Keys” tab at the top of the screen.\nUnder the “Write API Key” section, you will see your unique Write API Key.\n\nMake sure to keep your Write API Key private as it is used to allow your device to upload data to your ThingSpeak channel.\n\n\n\nThis code is an example of how to send data from an ESP32 microcontroller to the ThingSpeak platform using WiFi. The ESP32 reads sensor data (in this example, arbitrary values are set as fields) and sends them to the ThingSpeak server periodically. The code includes the necessary network credentials and ThingSpeak channel and API key information. The code is well-commented to explain what each part of the program does.\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n#include <WiFi.h>\n\n// Include the ThingSpeak library\n#include \"ThingSpeak.h\"\n\n// Set the ThingSpeak channel and API key information\nunsigned long myChannelNumber = 1689148;\nconst char* myWriteAPIKey = \"A58V29JE8UIGWI16\";\n\n// Set the WiFi network credentials\nconst char* ssid = \"HUJI-guest\"; // your wifi SSID name\nconst char* password = \"\"; // wifi password\n\n// Set the ThingSpeak server address\nconst char* server = \"api.thingspeak.com\";\n\n// Create a WiFiClient object to connect to the WiFi network\nWiFiClient client;\n\n// Set the time to wait between uploading data to ThingSpeak (in milliseconds)\nint wait_between_uploads = 10000; // 10 seconds\n\nvoid setup() {\n  // Start the serial communication at 112500 baud\n  Serial.begin(112500);\n\n  // Disconnect any previous WiFi connection\n  WiFi.disconnect();\n  delay(10);\n\n  // Connect to the WiFi network\n  WiFi.begin(ssid, password);\n  Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"ESP32 connected to WiFi: \");\n  Serial.println(ssid);\n  Serial.println();\n\n  // Initialize the ThingSpeak library with the WiFi client\n  ThingSpeak.begin(client);\n}\n\nvoid loop() {\n  // Set the values to be sent to ThingSpeak\n  ThingSpeak.setField(1, 11);\n  ThingSpeak.setField(2, 22);\n  ThingSpeak.setField(3, 33);\n  ThingSpeak.setField(4, 44);\n\n  // Send the data to ThingSpeak\n  ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n\n  // Print a message to the serial monitor indicating that the data has been uploaded\n  Serial.println(\"Uploaded to ThingSpeak server.\");\n\n  // Disconnect the WiFi client\n  client.stop();\n\n  // Wait for the specified amount of time before uploading the next set of data\n  // thingspeak needs minimum 15 sec delay between updates on a free acount,\n  // a paid acount can update every 1 sec\n  Serial.println(\"Waiting to upload next reading...\");\n  Serial.println();\n  \n  delay(wait_between_uploads);\n}"
  },
  {
    "objectID": "posts/tutorials/soldering-and-wires.html",
    "href": "posts/tutorials/soldering-and-wires.html",
    "title": "Soldering and Wires",
    "section": "",
    "text": "soldering\n\n\nBreadbord is fun and easy but sooner or later everyone working with Arduino will need to know how to solder and work with wires. There are amazing tutorials that allready exist. Even though we will learn many of the topics in class, we strongly recomend to take a look at these tutorials.\n\nSoldering - by Sparkfun\nSoldering - by Adafruit (note that this is a multi page guide)\nWorking with wire - by Sparkfun"
  },
  {
    "objectID": "posts/tutorials/basic-electronics-concepts.html#very-basic-concepts",
    "href": "posts/tutorials/basic-electronics-concepts.html#very-basic-concepts",
    "title": "Basic Electronics Concepts",
    "section": "Very Basic Concepts",
    "text": "Very Basic Concepts\nYou should be familiar with the very basics of how electricity works. There are a million books and websites to learn from. We suggest the following webpages, written by Sparkfun, a big vendor of electronics.\n\nWhat is Electricity?\nElectric Power\nVoltage, Current, Resistance, and Ohm’s Law\nWhat is a Circuit?\nHow to Use a Multimeter\nVoltage Dividers\nHow to Use a Breadboard\n\nThere is no end to learning about these topics! The good news is that you can accomplish a lot of stuff with the very basic notions of electric circuits. If you want to learn even more, navigate your way on the “Suggested Reading” section in the tutorials above."
  },
  {
    "objectID": "posts/tutorials/basic-electronics-concepts.html#other-links",
    "href": "posts/tutorials/basic-electronics-concepts.html#other-links",
    "title": "Basic Electronics Concepts",
    "section": "Other Links",
    "text": "Other Links\n\nWhat is an LED?\n\nFrom electronics-tutorials.ws\nFrom Sparkfun\n\n\n\nThermistor Tutorial\n\nFrom Adafruit\nModel equations and calculator of constants for thermistors"
  },
  {
    "objectID": "posts/tutorials/intro-to-sensor-modules-and-thingspeak.html#sensors",
    "href": "posts/tutorials/intro-to-sensor-modules-and-thingspeak.html#sensors",
    "title": "insert ino code",
    "section": "Sensors",
    "text": "Sensors\n\nDS18B20 Temperature Sensor\nPretty accurate temperature sensor. Each sensor has its own unique address, enabling the connection of numerous sensors to only on pin on the Arduino/ESP32.\nIn this tutorial you can find a lot more information.\nCode for finding the sensor’s address:\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n/*\n * Rui Santos \n * Complete Project Details https://randomnerdtutorials.com\n */\n\n#include <OneWire.h>\n\n// Based on the OneWire library example\n\nOneWire ds(4);  //data wire connected to GPIO 4\n\nvoid setup(void) {\n  Serial.begin(115200);\n}\n\nvoid loop(void) {\n  byte i;\n  byte addr[8];\n  \n  if (!ds.search(addr)) {\n    Serial.println(\" No more addresses.\");\n    Serial.println();\n    ds.reset_search();\n    delay(250);\n    return;\n  }\n  Serial.print(\" ROM =\");\n  for (i = 0; i < 8; i++) {\n    Serial.write(' ');\n    Serial.print(addr[i], HEX);\n  }\n}\n\n            \n            \n            \n\n\nSHT31 Temperature & Humidity Sensor Using I2C communication\nIn this tutorial you can find a lot more information.\nCode for reading the sensor:\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n#include <Arduino.h>\n#include <Wire.h>\n#include \"Adafruit_SHT31.h\"\n\n//code from tutorial:\n// http://www.esp32learning.com/code/esp32-and-sht31-sensor-example.php\n\nAdafruit_SHT31 sht31 = Adafruit_SHT31();\n\nvoid setup() {\n  Serial.begin(9600);\n  if (! sht31.begin(0x44)) {\n    Serial.println(\"Couldn't find SHT31\");\n    while (1) delay(1);\n  }\n}\n\nvoid loop() {\nfloat t = sht31.readTemperature();\nfloat h = sht31.readHumidity();\n\nif (! isnan(t))  {\n    Serial.print(\"Temp *C = \"); Serial.println(t);\n  }\n  else  {\n    Serial.println(\"Failed to read temperature\");\n  }\n  \n  if (! isnan(h))  {\n  Serial.print(\"Hum. % = \"); Serial.println(h);\n  }\n  else  {\n  Serial.println(\"Failed to read humidity\");\n  }\n  \n  Serial.println();\n  delay(1000);\n}\n\n            \n            \n            \n\n\nVL53L0X Time-of-Flight Distance Sensor Using I2C communication\nIn this tutorial you can find a lot more information.\nCode for reading the sensor:\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n#include \"Adafruit_VL53L0X.h\"\n\n// also on http://www.esp32learning.com/code/vl53l0x-time-of-flight-sensor-and-esp32.php\nAdafruit_VL53L0X lox = Adafruit_VL53L0X();\n\nvoid setup() {\n  Serial.begin(115200);\n\n  // wait until serial port opens for native USB devices\n  while (! Serial) {\n    delay(1);\n  }\n  \n  Serial.println(\"Adafruit VL53L0X test\");\n  if (!lox.begin()) {\n    Serial.println(F(\"Failed to boot VL53L0X\"));\n    while(1);\n  }\n  // power \n  Serial.println(F(\"VL53L0X API Simple Ranging example\\n\\n\")); \n}\n\n\nvoid loop() {\n  VL53L0X_RangingMeasurementData_t measure;\n    \n  Serial.print(\"Reading a measurement... \");\n  lox.rangingTest(&measure, false); // pass in 'true' to get debug data printout!\n\n  if (measure.RangeStatus != 4) {  // phase failures have incorrect data\n    Serial.print(\"Distance (mm): \"); Serial.println(measure.RangeMilliMeter);\n  } else {\n    Serial.println(\" out of range \");\n  }\n    \n  delay(100);\n}"
  },
  {
    "objectID": "posts/tutorials/intro-to-sensor-modules-and-thingspeak.html#thingspeak",
    "href": "posts/tutorials/intro-to-sensor-modules-and-thingspeak.html#thingspeak",
    "title": "insert ino code",
    "section": "Thingspeak",
    "text": "Thingspeak\nThingspeak webpage.\n\nBasic Code for Uploading Data to Thingspeak\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n// #include <ESP8266WiFi.h>\n#include <WiFi.h>\n\n#include \"ThingSpeak.h\"\nunsigned long myChannelNumber = 1358139;\nconst char * myWriteAPIKey = \"4HZXSWG1JXQCVHM2\";\n\nconst char* ssid = \"HUJI-guest\"; // your wifi SSID name\nconst char* password = \"\" ;// wifi pasword\n \nconst char* server = \"api.thingspeak.com\";\n\nWiFiClient client;\n\n\n \nvoid setup() {\n  Serial.begin(9600);\n  WiFi.disconnect();\n  delay(10);\n  WiFi.begin(ssid, password);\n\n  Serial.println();\n  Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n\n    ThingSpeak.begin(client);\n \n  WiFi.begin(ssid, password);\n  \n \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"NodeMcu connected to wifi...\");\n  Serial.println(ssid);\n  Serial.println();\n}\n \nvoid loop() {\n\n \n  ThingSpeak.setField(1,11);\n  ThingSpeak.setField(2,22);\n  ThingSpeak.setField(3,33);\n  ThingSpeak.setField(4,44);\n  ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n\n  Serial.println(\"uploaded to Thingspeak server....\");\n\n  client.stop();\n \n  Serial.println(\"Waiting to upload next reading...\");\n  Serial.println();\n  // thingspeak needs minimum 15 sec delay between updates\n\n \n  \n  delay(20000);\n}\n\n            \n            \n            \n\n\nExample: Sending Data from Sensors Above to Thingspeak\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n//------------------------------------------------------------------\n//Thingspeak:\n// #include <ESP8266WiFi.h>\n#include <WiFi.h>\n\n#include \"ThingSpeak.h\"\nunsigned long myChannelNumber = 1689148;\nconst char * myWriteAPIKey = \"A58V29JE8UIGWI16\";\n\nconst char* ssid = \"HUJI-guest\"; // your wifi SSID name\nconst char* password = \"\" ;// wifi pasword\n \nconst char* server = \"api.thingspeak.com\";\n\nWiFiClient client;\n\n//------------------------------------------------------------------\n//DS18B20:\n#include <OneWire.h>\n#include <DallasTemperature.h>\n\n// Data wire is connected to GPIO4\n#define ONE_WIRE_BUS 4\n// Setup a oneWire instance to communicate with a OneWire device\nOneWire oneWire(ONE_WIRE_BUS);\n// Pass our oneWire reference to Dallas Temperature sensor \nDallasTemperature sensors(&oneWire);\n\n//Insert the right address for your sensors\nDeviceAddress sensor1 = { 0x28, 0xFF, 0x64, 0x02, 0xEF, 0x01, 0xA7, 0x31 };\nDeviceAddress sensor2 = { 0x28, 0x35, 0xD3, 0x11, 0x00, 0x00, 0x00, 0xBF };\n\n//------------------------------------------------------------------\n//SHT31:\n#include <Arduino.h>\n#include <Wire.h>\n#include \"Adafruit_SHT31.h\"\n\nAdafruit_SHT31 sht31 = Adafruit_SHT31();\n//------------------------------------------------------------------\n//VL53LOX:\n\n#include \"Adafruit_VL53L0X.h\"\nAdafruit_VL53L0X lox = Adafruit_VL53L0X();\n\n\nvoid setup() {\n  Serial.begin(9600);\n  //------------------------------------------------------------------\n  //Thingspeak and wifi:\n  WiFi.disconnect();\n  delay(10);\n  WiFi.begin(ssid, password);\n\n  Serial.println();\n  Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n\n    ThingSpeak.begin(client);\n \n  WiFi.begin(ssid, password);\n  \n \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"NodeMcu connected to wifi...\");\n  Serial.println(ssid);\n  Serial.println();\n  //------------------------------------------------------------------\n  //DS18B20:\n  sensors.begin();\n\n  //------------------------------------------------------------------\n  //SHT31:\n    if (! sht31.begin(0x44)) {\n    Serial.println(\"Couldn't find SHT31\");\n    while (1) delay(1);\n  }\n\n  //------------------------------------------------------------------\n  //VL53LOX:\n  // wait until serial port opens for native USB devices\n  while (! Serial) {\n    delay(1);\n  }\n  \n  Serial.println(\"Adafruit VL53L0X test\");\n  if (!lox.begin()) {\n    Serial.println(F(\"Failed to boot VL53L0X\"));\n    while(1);\n  }\n  // power \n  Serial.println(F(\"VL53L0X API Simple Ranging example\\n\\n\")); \n  \n}\n \nvoid loop() {\n  //------------------------------------------------------------------\n  //DS18B20:\n  Serial.print(\"Requesting temperatures...\");\n  sensors.requestTemperatures(); // Send the command to get temperatures\n  Serial.println(\"DONE\");\n  \n  Serial.print(\"Sensor 1(*C): \");\n  Serial.print(sensors.getTempC(sensor1)); \n  Serial.print(\" Sensor 1(*F): \");\n  Serial.println(sensors.getTempF(sensor1)); \n \n  Serial.print(\"Sensor 2(*C): \");\n  Serial.print(sensors.getTempC(sensor2)); \n  Serial.print(\" Sensor 2(*F): \");\n  Serial.println(sensors.getTempF(sensor2)); \n\n  //------------------------------------------------------------------\n  //SHT31:\n  float t = sht31.readTemperature();\n  float h = sht31.readHumidity();\n\n  if (! isnan(t))  {\n    Serial.print(\"Temp *C = \"); Serial.println(t);\n  }\n  else  {\n    Serial.println(\"Failed to read temperature\");\n  }\n  \n  if (! isnan(h))  {\n  Serial.print(\"Hum. % = \"); Serial.println(h);\n  }\n  else  {\n  Serial.println(\"Failed to read humidity\");\n  }\n  \n  Serial.println();\n  delay(1000);\n\n  //------------------------------------------------------------------\n  //VL53LOX:\n   VL53L0X_RangingMeasurementData_t measure;\n    \n  Serial.print(\"Reading a measurement... \");\n  lox.rangingTest(&measure, false); // pass in 'true' to get debug data printout!\n\n  if (measure.RangeStatus != 4) {  // phase failures have incorrect data\n    Serial.print(\"Distance (mm): \"); Serial.println(measure.RangeMilliMeter);\n  } else {\n    Serial.println(\" out of range \");\n  }\n    \n  delay(100);\n\n  //------------------------------------------------------------------\n  //Thingspeak:\n  ThingSpeak.setField(1,t); // SHT temp\n  ThingSpeak.setField(2,h); // SHT humidity\n  ThingSpeak.setField(3,sensors.getTempC(sensor1)); // DS18B20 in\n  ThingSpeak.setField(4,sensors.getTempC(sensor2)); // DS18B20 out\n  ThingSpeak.setField(5,measure.RangeMilliMeter); // distance\n  ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n\n  Serial.println(\"uploaded to Thingspeak server....\");\n\n  client.stop();\n \n  Serial.println(\"Waiting to upload next reading...\");\n  Serial.println();\n  \n  // thingspeak free needs minimum 15 sec delay between updates \n  // payed can do 1sec\n\n \n  \n  delay(1000);\n}"
  },
  {
    "objectID": "posts/tutorials/install_firebeetle.html",
    "href": "posts/tutorials/install_firebeetle.html",
    "title": "Install FireBeetle",
    "section": "",
    "text": "In our class we will be using the FireBeetle 2 ESP32-E IoT Microcontroller as our main MCU. In this guid you will learn how to install needed software on your computer.\nFull documentation of this MCU can be found on the product wiki by DFRobot.\n\nFollow these simple steps to install FireBeetle 2 MCU on the Arduino IDE on your computer:\n\nAdd the json link in IDE\nDownload the core of the maincontroller\nSelect development board and serial port\n\n\n\nOpen Arduino IDE, click File->Preferences, as shown below:\n\n\n\nArduino IDE\n\n\nClick the icon marked with red below.\n\n\n\nArduino Setup\n\n\nCopy the address to the newly popped up box: http://download.dfrobot.top/FireBeetle/package_DFRobot_index.json\n\n\n\nArduino Setup 1\n\n\nClick OK.\n\n\n\nOpen Tools->Board->Boards Manager.\n\n\n\nUpdate Board\n\n\nThe board manager will be automatically updated.\n\n\n\nBoard Updated\n\n\nWait for a while, then type in the search bar DFRobot ESP32 in the list. Click “Install” (in the image its gayed out because it’s already installed…):\n\n\n\nInstall Board\n\n\nOnce you see “INSTALLED” in Blue you are Done! You can find the installed FireBeetle-ESP32 board in the list now.\n\n\n\nOnce the board is installed, select it: Open Tools->Board->DFRobot ESP32 Arduino->FireBeelte ESP32-E \nThen select the Port\nOpen Tools->Port->COMxx (for windows the port wil be COM with some number, for Mac/linux it will be /dev/cu. and then something).\nHow do you know what port to choose?\nCheck the ports without the MCU pluged into the computer. Then plug the MCU and check the ports again. If you see a new port, thats the port of the MCU.\n\n\n\nTroubleshooting if there is no port for the MCU:\n\nMissing driver. Could be you need to install a specific driver.\nWindows driver\nMacOS driver\nBad USB cable. Some cables are bad and some are only for charging and cannot sync data. Try using a different USB cable that worked for a freind."
  },
  {
    "objectID": "posts/tutorials/firebeetle_documentation.html",
    "href": "posts/tutorials/firebeetle_documentation.html",
    "title": "FireBeetle",
    "section": "",
    "text": "board overview\n\n\n\n\n\n\n\n\n\n\nNo.\nFunction\nDescription\n\n\n\n\n①\nUSB Interface\nProgram download and power supply, 4.75V-5.5V compatible\n\n\n②\nCharging Indicator\nRed LED for indicating charging status: 1. Off when fully charged or not charged; 2. On when charging; 3. Quick flash when powered by USB, and no battery connected.\n\n\n③\nUser Button\nControlled by pin IO27/D4\n\n\n④\nLi-ion Battery Port\nSupport 3.5V-4.2V\n\n\n⑤\nOnboard RGB Light\nWS2812 RGB LED, controlled by pin IO5/D8\n\n\n⑥\nOnboard LED\nLED controlled by pin IO2/D9\n\n\n⑦\nReset Button\nPress to reset program\n\n\n⑧\nLow-power Solder Jumper\nPad Designed for low power mode and default to be connected. Slightly cut off the thin wire with a knife to disconnect it. When disconnected, static power consumption can be reduced by 500 μA. The power consumption can be reduced to 13 μA after controlling the main controller to enter the sleep mode through the program. Note: when the pad is disconnected, you can only drive RGB LED light via the USB Power supply.\n\n\n⑨\nGDI\nDFRobot dedicated Display interface. Refer to the GDI part of this page.\n\n\n⑩\nESP32-E Chip\nESP32-WROOM-32E\n\n\n\n\n\n\n\n\n\n\nPinout\n\n\n\n\n\n\n\n\n\nCategory\nDescription\n\n\n\n\nControl\nFireBeetle enable/reset pins\n\n\nTouch\nPin with capacitive touch function\n\n\nAnalog\nAnalog pin\n\n\nPort PIN\nDefault physical pin number of the chip, which can be used to directly control the corresponding pin\n\n\nArduino IDE\nIn Arduino IDE, the pin numbers have been remapped by FireBeetle, and you can directly use this symbol to control the corresponding pin\n\n\nRTC PIN\nFireBeetle 2 ESP32-E supports low power function, and in Deep-sleep mode, only RTC pin keeps working and can be used as a wave-up source. When RTC pin is used as an output pin, it keeps outputting level value when the chip is in Deep-sleep mode, while as an input pin, it can wake up the chip from Deep-sleep.\n\n\nGND\nCommon ground for all power supplies and logics\n\n\nPower\nWhen powered by 5V-USB, VCC outputs about 4.7V and 3V3 outputs 3.3V; When powered by 4V li-ion battery, VCC outputs about 4V and 3V3 outputs 3.3V(Actual measurement)"
  },
  {
    "objectID": "posts/tutorials/merging.html",
    "href": "posts/tutorials/merging.html",
    "title": "Code Merging",
    "section": "",
    "text": "Merging two separate Arduino codes can be a daunting task for beginners, but it’s a common requirement when developing more complex Arduino projects. The process involves combining the code from two or more sketches into a single sketch that can be uploaded to an Arduino board. The goal is to create a new sketch that contains all the necessary functions, variables, and libraries required to perform the desired functionality.\nIn this example, we will demonstrate how to merge two simple Arduino sketches that blink two LEDs with random delay times. We will use the Random library to generate random delay times and declare a variable outside of the void functions to ensure it’s accessible to all functions in the merged sketch. The example will show you how to identify potential conflicts between the two sketches, update pin assignments and variables, merge the setup() and loop() functions, and test and debug the merged code."
  },
  {
    "objectID": "posts/tutorials/merging.html#code-1",
    "href": "posts/tutorials/merging.html#code-1",
    "title": "Code Merging",
    "section": "Code 1",
    "text": "Code 1\n#include <Random.h>\n\nRandom random;\n\nvoid setup() {\n  pinMode(2, OUTPUT);\n}\n\nvoid loop() {\n  digitalWrite(2, HIGH);\n  delay(random.nextInt(500));\n  digitalWrite(2, LOW);\n  delay(random.nextInt(500));\n}"
  },
  {
    "objectID": "posts/tutorials/merging.html#code-2",
    "href": "posts/tutorials/merging.html#code-2",
    "title": "Code Merging",
    "section": "Code 2",
    "text": "Code 2\n#include <Random.h>\n\nRandom random;\n\nvoid setup() {\n  pinMode(3, OUTPUT);\n}\n\nvoid loop() {\n  digitalWrite(3, HIGH);\n  delay(random.nextInt(1000));\n  digitalWrite(3, LOW);\n  delay(random.nextInt(1000));\n}"
  },
  {
    "objectID": "posts/tutorials/merging.html#merged-code",
    "href": "posts/tutorials/merging.html#merged-code",
    "title": "Code Merging",
    "section": "Merged Code",
    "text": "Merged Code\n#include <Random.h>\n\nint led1 = 2;\nint led2 = 3;\nRandom random;\n\nvoid setup() {\n  pinMode(led1, OUTPUT);\n  pinMode(led2, OUTPUT);\n}\n\nvoid loop() {\n  digitalWrite(led1, HIGH);\n  delay(random.nextInt(500));\n  digitalWrite(led1, LOW);\n  delay(random.nextInt(500));\n  \n  digitalWrite(led2, HIGH);\n  delay(random.nextInt(1000));\n  digitalWrite(led2, LOW);\n  delay(random.nextInt(1000));\n}\nIn this example, we start by merging the code from both sketches into a single sketch. We declare the Random library and a new variable random of type Random outside of the void functions to ensure that it’s available to all functions within the sketch.\nWe also declare two new variables led1 and led2 to store the pin numbers of the two LEDs. The setup() function is modified to set both LED pins as outputs. The loop() function is modified to use the digitalWrite() and delay() functions to blink each LED in turn with a random delay time.\nOnce you have created the merged code, you can upload it to your Arduino board and test it out. This process can become more complicated as the codes you are merging become more complex, but the basic principles remain the same: identify conflicting libraries, update pin assignments and variables, merge the setup() and loop() functions, and test and debug thoroughly."
  },
  {
    "objectID": "posts/tutorials/breadboard.html",
    "href": "posts/tutorials/breadboard.html",
    "title": "agrotech lab",
    "section": "",
    "text": "Breadboard\n\nA breadboard is a device used to prototype electronic circuits without the need for soldering. It consists of a plastic board with rows of holes, each of which is connected to others in the same row. In addition, there are two vertical columns on the sides of the board, which are known as the + and - rails. The + rail is typically used to connect positive voltage sources, while the - rail is used to connect negative voltage sources or the ground. When a component, such as a resistor, capacitor, or LED, is inserted into a hole on the breadboard, it makes contact with the metal strip that runs underneath the holes, which provides electrical connectivity between the components. This allows multiple components to be connected together to form a circuit. Breadboards are commonly used by hobbyists, students, and engineers to quickly prototype and test electronic circuits before they are soldered onto a printed circuit board.\nVery good tutorials on how to use a breadboard:\n\nwiring.org\nsparkfun\n\n\n\n\nbreadboard wiring diagram"
  },
  {
    "objectID": "posts/tutorials/SHT31.html",
    "href": "posts/tutorials/SHT31.html",
    "title": "ESP32 and SHT31 Sensor Tutorial",
    "section": "",
    "text": "In this tutorial, we will learn how to use the ESP32 microcontroller with the SHT31 temperature and humidity sensor. We will cover the basics of the sensor, including how it works and how to connect it to an ESP32. We will also learn how to use the Adafruit_SHT31 library to read temperature and humidity values from the sensor. By the end of this tutorial, you will be able to build your own ESP32 and SHT31-based projects."
  },
  {
    "objectID": "posts/tutorials/SHT31.html#sht31-sensor",
    "href": "posts/tutorials/SHT31.html#sht31-sensor",
    "title": "ESP32 and SHT31 Sensor Tutorial",
    "section": "SHT31 Sensor",
    "text": "SHT31 Sensor\nThe SHT31 is a high-precision temperature and humidity sensor that can be used in a wide range of applications. It measures temperature and humidity using a capacitive humidity sensor and a band-gap temperature sensor. It has a wide measurement range of -40°C to 125°C for temperature and 0-100% for relative humidity. The SHT31 is a digital sensor, which means it communicates with the microcontroller over a digital interface."
  },
  {
    "objectID": "posts/tutorials/SHT31.html#libraries",
    "href": "posts/tutorials/SHT31.html#libraries",
    "title": "ESP32 and SHT31 Sensor Tutorial",
    "section": "Libraries",
    "text": "Libraries\nTo use the SHT31 sensor with an ESP32 microcontroller, we will need to use the Adafruit_SHT31 library. This library is specifically designed to work with the SHT31 sensor and makes it easy to read temperature and humidity values from the sensor.\nTo install the library, follow these steps:\n\nOpen the Arduino IDE\nGo to Sketch > Include Library > Manage Libraries\nSearch for “Adafruit_SHT31” and click the Install button\nWait for the library to install"
  },
  {
    "objectID": "posts/tutorials/SHT31.html#wiring",
    "href": "posts/tutorials/SHT31.html#wiring",
    "title": "ESP32 and SHT31 Sensor Tutorial",
    "section": "Wiring",
    "text": "Wiring\nTo connect the SHT31 sensor to the ESP32 microcontroller, we will need to use four wires: VCC, GND, SDA, and SCL. Here is a table that shows how to connect the wires:\n\n\n\nSHT31 Pin\nESP32 Pin\n\n\n\n\nVCC\n3V3\n\n\nGND\nGND\n\n\nSDA\nGPIO21\n\n\nSCL\nGPIO22\n\n\n\nNote: The ESP32’s 3V3 pin provides 3.3 volts of power, which is the correct voltage for the SHT31 sensor. Do not use the 5V pin, as it will damage the sensor."
  },
  {
    "objectID": "posts/tutorials/SHT31.html#code",
    "href": "posts/tutorials/SHT31.html#code",
    "title": "ESP32 and SHT31 Sensor Tutorial",
    "section": "Code",
    "text": "Code\nHere is the code for reading temperature and humidity values from the SHT31 sensor:\n#include <Arduino.h>   // Include the Arduino library\n#include <Wire.h>      // Include the Wire library for I2C communication\n#include \"Adafruit_SHT31.h\" // Include the SHT31 library from Adafruit\n\nAdafruit_SHT31 sht31 = Adafruit_SHT31(); // Create an instance of the SHT31 object\n\nvoid setup() {\n  Serial.begin(112500);   // Initialize the serial communication with a baud rate of 112500\n  if (! sht31.begin(0x44)) {  // Check if SHT31 is connected and start it with address 0x44\n    Serial.println(\"Couldn't find SHT31\"); // Print an error message if SHT31 is not found\n    while (1) delay(1);  // Wait indefinitely\n  }\n}\n\nvoid loop() {\n  float t = sht31.readTemperature(); // Read temperature from SHT31 and store it in t variable\n  float h = sht31.readHumidity();    // Read humidity from SHT31 and store it in h variable\n\n  if (! isnan(t)) {             // Check if t is not NaN (not a number)\n    Serial.print(\"Temp *C = \"); // Print temperature label\n    Serial.println(t);          // Print temperature value\n  } \n  else {\n    Serial.println(\"Failed to read temperature\"); // Print an error message if temperature reading fails\n  }\n\n  if (! isnan(h)) {              // Check if h is not NaN (not a number)\n    Serial.print(\"Hum. % = \");  // Print humidity label\n    Serial.println(h);           // Print humidity value\n  } \n  else {\n    Serial.println(\"Failed to read humidity\");  // Print an error message if humidity reading fails\n  }\n\n  Serial.println();    // Print a blank line\n  delay(1000);         // Delay for 1 second\n}"
  },
  {
    "objectID": "posts/tutorials/arduino_IDE.html",
    "href": "posts/tutorials/arduino_IDE.html",
    "title": "Arduino IDE",
    "section": "",
    "text": "Arduino IDE (Integrated Development Environment) is a software application that is used to write and upload code to MCU boards. Arduino IDE code is written in C or C++ programming language. It is a free and open-source platform that makes it easy for beginners to get started with Arduino programming.\nArduino IDE comes with a text editor, a code library, and a serial monitor that allows you to communicate with your Arduino board. It is available for Windows, Mac, and Linux operating systems."
  },
  {
    "objectID": "posts/tutorials/arduino_IDE.html#step-1-download",
    "href": "posts/tutorials/arduino_IDE.html#step-1-download",
    "title": "Arduino IDE",
    "section": "Step 1: Download",
    "text": "Step 1: Download\nGo to the official Arduino website and download the latest version of the Legacy IDE (1.8.X) for your operating system. Don’t download version 2.0.X, it will work for you but all the tutorials we will be following are in the previouse version (1.8.X)."
  },
  {
    "objectID": "posts/tutorials/arduino_IDE.html#step-2-install-arduino-ide",
    "href": "posts/tutorials/arduino_IDE.html#step-2-install-arduino-ide",
    "title": "Arduino IDE",
    "section": "Step 2: Install Arduino IDE",
    "text": "Step 2: Install Arduino IDE\nOnce the download is complete, run the installer and follow the on-screen instructions to install Arduino IDE on your computer.\n\nCongratulations, you have successfully installed Arduino IDE on your computer and you are ready to start programming your MCU!"
  },
  {
    "objectID": "posts/tutorials/arduino_IDE.html#the-arduino-ide",
    "href": "posts/tutorials/arduino_IDE.html#the-arduino-ide",
    "title": "Arduino IDE",
    "section": "1. The Arduino IDE",
    "text": "1. The Arduino IDE\nThe Arduino Integrated Development Environment (IDE) is a software development platform for creating programs that run on Arduino boards. The IDE includes a code editor, a compiler, and a firmware uploader. You can use the IDE to write, edit, and upload your Arduino programs."
  },
  {
    "objectID": "posts/tutorials/arduino_IDE.html#the-setup-and-loop-functions",
    "href": "posts/tutorials/arduino_IDE.html#the-setup-and-loop-functions",
    "title": "Arduino IDE",
    "section": "2. The Setup and Loop Functions",
    "text": "2. The Setup and Loop Functions\nIn the Arduino IDE, every program must have two functions: setup() and loop(). The setup() function is called only once when the program starts, and it is used to initialize the program and set up any necessary variables. The loop() function, on the other hand, is called repeatedly after the setup() function, and it is used to run the main program logic."
  },
  {
    "objectID": "posts/tutorials/arduino_IDE.html#libraries",
    "href": "posts/tutorials/arduino_IDE.html#libraries",
    "title": "Arduino IDE",
    "section": "3. Libraries",
    "text": "3. Libraries\nLibraries are prewritten pieces of code that you can use in your Arduino programs. Libraries contain functions and variables that you can use to make your programming tasks easier. You can include libraries in your program by using the #include directive at the beginning of your program."
  },
  {
    "objectID": "posts/tutorials/arduino_IDE.html#variables",
    "href": "posts/tutorials/arduino_IDE.html#variables",
    "title": "Arduino IDE",
    "section": "4. Variables",
    "text": "4. Variables\nVariables are used to store values in your program. In Arduino programming, you need to declare your variables at the beginning of your program. To declare a variable, you need to specify its data type and name. For example, int myVariable = 10; declares an integer variable called myVariable and assigns it the value 10."
  },
  {
    "objectID": "posts/tutorials/arduino_IDE.html#functions",
    "href": "posts/tutorials/arduino_IDE.html#functions",
    "title": "Arduino IDE",
    "section": "5. Functions",
    "text": "5. Functions\nFunctions are blocks of code that perform a specific task. In Arduino programming, functions can be used to simplify your program and make it easier to read and understand. To create a function, you need to specify its return type, name, and any arguments it requires. For example, int my_function(int arg1, int arg2) creates a function called my_function that takes two integer arguments and returns an integer value."
  },
  {
    "objectID": "posts/tutorials/arduino_IDE.html#putting-it-all-together",
    "href": "posts/tutorials/arduino_IDE.html#putting-it-all-together",
    "title": "Arduino IDE",
    "section": "6. Putting It All Together",
    "text": "6. Putting It All Together\nNow that you understand the basic elements of Arduino programming, you can start writing your own programs. To get started, you can follow these steps:\n\nOpen the Arduino IDE and create a new sketch.\nWrite your program code in the setup() and loop() functions.\nDeclare any variables and functions you need at the beginning of your program.\nInclude any libraries you need by using the #include directive.\nUpload your program to your Arduino board by clicking the upload button in the IDE."
  },
  {
    "objectID": "posts/tutorials/arduino_IDE.html#conclusion",
    "href": "posts/tutorials/arduino_IDE.html#conclusion",
    "title": "Arduino IDE",
    "section": "Conclusion",
    "text": "Conclusion\nArduino IDE code is an essential part of Arduino programming. Understanding the basics of Arduino IDE code, including the setup() and loop() functions, libraries, variables, and functions, is essential for creating your own Arduino programs. With practice and patience, you can become proficient in Arduino programming and develop exciting projects using the Arduino platform."
  },
  {
    "objectID": "posts/tutorials/arduino_IDE.html#example",
    "href": "posts/tutorials/arduino_IDE.html#example",
    "title": "Arduino IDE",
    "section": "Example",
    "text": "Example\n// Include the necessary library for controlling the digital pin\n#include <Arduino.h>\n\n// Define the pin number for the LED\nconst int LED_PIN = 13;\n\nvoid setup() {\n  // Set the LED pin as an output\n  pinMode(LED_PIN, OUTPUT);\n}\n\nvoid loop() {\n  // Turn the LED on\n  digitalWrite(LED_PIN, HIGH);\n\n  // Wait for 1 second\n  delay(1000);\n\n  // Turn the LED off\n  digitalWrite(LED_PIN, LOW);\n\n  // Wait for another second\n  delay(1000);\n}\nLet’s break down each part of the program:\n#include <Arduino.h>\nThis line includes the Arduino library, which contains functions for controlling the digital pins on the Arduino board.\nconst int LED_PIN = 13;\nThis line defines a constant integer variable called LED_PIN and assigns it the value 13. This is the pin number that the LED is connected to.\nvoid setup() {\n  // Set the LED pin as an output\n  pinMode(LED_PIN, OUTPUT);\n}\nThis is the setup() function, which is called once when the program starts. In this function, we set the LED pin as an output by calling pinMode(LED_PIN, OUTPUT).\nvoid loop() { ... }\nThis is the loop() function, which is called repeatedly after the setup() function. In this function, we turn the LED on by calling digitalWrite(LED_PIN, HIGH) and then wait for 1 second by calling delay(1000). We then turn the LED off by calling digitalWrite(LED_PIN, LOW) and wait for another second.\n  // Turn the LED on\n  digitalWrite(LED_PIN, HIGH);\n\n  // Wait for 1 second\n  delay(1000);\n\n  // Turn the LED off\n  digitalWrite(LED_PIN, LOW);\n\n  // Wait for another second\n  delay(1000);\nThese two lines turn the LED on and off by setting the voltage of the LED pin to HIGH and LOW, respectively.\ndelay(1000);\nThis line causes the program to pause for 1 second (1000 milliseconds) before continuing. The delay() function is used to control the timing of the program.\nOverall, this program is very simple, but it demonstrates the basic structure of an Arduino program. The setup() function is used to initialize the program, while the loop() function is used to perform the main program logic. The program uses the digitalWrite() function to turn the LED on and off, and the delay() function to control the timing of the program. By understanding these basic concepts, you can start to build more complex programs on the Arduino platform."
  },
  {
    "objectID": "posts/tutorials/water-and-energy-balances.html",
    "href": "posts/tutorials/water-and-energy-balances.html",
    "title": "Water and Energy Balances",
    "section": "",
    "text": "Figure from Rodriguez et al. (2010)."
  },
  {
    "objectID": "posts/tutorials/water-and-energy-balances.html#water-balance",
    "href": "posts/tutorials/water-and-energy-balances.html#water-balance",
    "title": "Water and Energy Balances",
    "section": "Water balance",
    "text": "Water balance\nA useful source is Nadia Christina Sabeh’s PhD thesis, 2007.\n\n\\[\nE_V + E_C + E_S + E_T = 0\n\\]"
  },
  {
    "objectID": "posts/tutorials/water-and-energy-balances.html#energy-balance",
    "href": "posts/tutorials/water-and-energy-balances.html#energy-balance",
    "title": "Water and Energy Balances",
    "section": "Energy balance",
    "text": "Energy balance\n\n\\[\nQ_R + Q_G + Q_V + Q_S + Q_P + Q_L + Q_H = 0\n\\]"
  },
  {
    "objectID": "posts/tutorials/water-and-energy-balances.html#evaporative-cooling",
    "href": "posts/tutorials/water-and-energy-balances.html#evaporative-cooling",
    "title": "Water and Energy Balances",
    "section": "Evaporative Cooling",
    "text": "Evaporative Cooling"
  },
  {
    "objectID": "posts/tutorials/water-and-energy-balances.html#potential-evapotranspiration",
    "href": "posts/tutorials/water-and-energy-balances.html#potential-evapotranspiration",
    "title": "Water and Energy Balances",
    "section": "Potential Evapotranspiration",
    "text": "Potential Evapotranspiration\n\nPenman (1948)\nThis equation accounts for two main terms: * the first is the available energy flux density, * the second term is the drying power of the air.\n\\[\nPE = \\frac{\\Delta(R_n-G) + \\gamma\\cdot 2.6 (1+0.536 u_2)\\text{VPD}}{\\lambda(\\Delta+\\gamma)}\n\\]\nMore about this here.\n\n\nPyET\nLuckily, we don’t have to work very hard to estimate the potential evapotranspiration. We will use the Python library pyet: * documentation * github\nUsing PyET is quite straightforward:\npyet.pm_fao56(tmean,               # mean temperature\n              wind,                # wind speed\n              rn=rn,               # net radiation\n              tmax=tmax,           # max temperature\n              tmin=tmin,           # max temperature\n              rh=rh,               # relative humidity\n              elevation=elevation) # elevation above sea level"
  },
  {
    "objectID": "archive/code/basic_python_thingspeak.html",
    "href": "archive/code/basic_python_thingspeak.html",
    "title": "agrotech lab",
    "section": "",
    "text": "Python Tutorial — the very basics\nImport packages. If you don’t have a certain package, e.g. ‘newpackage’, just type\npip install newpackage\n\nimport urllib\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nThis is how you download data from Thingspeak\n\n# define what to download\nchannels = \"1690490\"\nfields = \"1,2,3,4,6,7\"\nminutes = \"30\"\nfilename = \"test.csv\"\n# https://www.mathworks.com/help/thingspeak/readdata.html\n# format YYYY-MM-DD%20HH:NN:SS\nstart = \"2022-05-01%2000:00:00\"\nend = \"2022-05-08%2000:00:00\"\n\n# download using Thingspeak's API\n# url = f\"https://api.thingspeak.com/channels/{channels}/fields/{fields}.csv?minutes={minutes}\"\nurl = f\"https://api.thingspeak.com/channels/{channels}/fields/{fields}.csv?start={start}&end={end}\"\ndata = urllib.request.urlopen(url)\nd = data.read()\n\n# save data to csv\nfile = open(filename, \"w\")\nfile.write(d.decode('UTF-8'))\nfile.close()\n\nYou can load the data using Pandas. Here we create a “dataframe”, which is a fancy name for a table.\n\n# load data\ndf = pd.read_csv(\"test.csv\")\n# rename columns\ndf = df.rename(columns={\"created_at\": \"timestamp\",\n                        \"field1\": \"T1\",\n                        \"field2\": \"RH\",\n                        \"field3\": \"T2\",\n                        \"field4\": \"motion_sensor\",\n                        \"field6\": \"VWC\",\n                        \"field7\": \"VPD\",})\n# set timestamp as index\ndf['timestamp'] = pd.to_datetime(df['timestamp'])\ndf = df.set_index('timestamp')\n\nMake a first graph\n\n%matplotlib widget\n\nfig, ax = plt.subplots(1, figsize=(8,6))\n\nax.plot(df['VPD'])\n# add labels and title\nax.set(xlabel = \"time\",\n       ylabel = \"VPD (kPa)\",\n       title = \"my first graph\")\n# makes slated dates\nplt.gcf().autofmt_xdate()  \n\n\n\n\nShow two columns in the same graph\n\n%matplotlib widget\n\nfig, ax = plt.subplots(1, figsize=(8,6))\n\nax.plot(df['T1'], color=\"tab:blue\", label=\"SHT Temperature\")\nax.plot(df['T2'], color=\"tab:orange\", label=\"DS18B20 Temperature\")\n# add labels and title\nax.set(xlabel = \"Time\",\n       ylabel = \"Temperature (deg C)\",\n       title = \"two sensors\",\n       ylim=[20,35],\n       )\n# makes slated dates\nplt.gcf().autofmt_xdate()\nax.legend(loc=\"upper right\")\n\n<matplotlib.legend.Legend at 0x7fb3c86a52e0>\n\n\n\n\n\nYou can calculate new things and save them as new columns of your dataframe.\n\ndef calculate_es(T):\n    es = np.exp((16.78 * T - 116.9) / (T + 237.3))\n    return es\n\ndef calculate_ed(es, rh):\n    return es * rh / 100.0\n\nes = calculate_es(df['T1'])\ned = calculate_ed(es, df['RH'])\ndf['VPD2'] = es - ed\n\nSee if what you calculated makes sense.\n\n%matplotlib widget\n\nfig, ax = plt.subplots(1, figsize=(8,6))\n\nax.plot(df['VPD'], color=\"tab:red\", label=\"VPD from ESP32\")\nax.plot(df['VPD2'][::100], \"o\", color=\"black\", label=\"VPD from python\")\n# add labels and title\nax.set(xlabel = \"Time\",\n       ylabel = \"VPD (kPa)\",\n       title = \"VPD calculated twice\",\n       ylim=[0,5],\n       )\n# makes slated dates\nplt.gcf().autofmt_xdate()\nax.legend(loc=\"upper right\")\n\n<matplotlib.legend.Legend at 0x7fb3984f8df0>\n\n\n\n\n\nYou might want two y axes.\n\n%matplotlib widget\n\nfig, ax = plt.subplots(1, figsize=(8,6))\n\nax.plot(df['VPD'], color=\"tab:red\", label=\"VPD\")\nplt.gcf().autofmt_xdate()\nax2 = ax.twinx()\nax2.plot(df['T1'], color=\"tab:cyan\", label=\"Temperature\")\nax.set(xlabel = \"Time\",\n       title = \"two y axes\",\n       ylim=[0,5],\n       )\nax.set_ylabel('VPD (kPa)', color='tab:red')\nax.spines['left'].set_color('red')\n\nax2.set_ylabel('Temperature (deg C)', color='tab:cyan')\n\nText(0, 0.5, 'Temperature (deg C)')"
  },
  {
    "objectID": "content/equipment/index.html",
    "href": "content/equipment/index.html",
    "title": "Equipment",
    "section": "",
    "text": "1 piece: ~$4.70 from aliexpress\n\n\n\n\n1 piece: ~$5.50 from aliexpress"
  },
  {
    "objectID": "content/equipment/index.html#sensors-peripherals",
    "href": "content/equipment/index.html#sensors-peripherals",
    "title": "Equipment",
    "section": "Sensors & Peripherals",
    "text": "Sensors & Peripherals\n\nOLED Display\n\n1 piece: ~$1.65 from aliexpress\n\n\nPhotoresistor\n\n50 pieces: ~$1.25 from aliexpress\n\n\nCapacitive Soil Moisture Sensor\n\n1 piece: ~$0.40 from aliexpress\n\n\nTime-of-Flight (ToF) Laser Ranging Sensor\n\n1 piece: ~$1.50 from aliexpress\n\n\nUltrasonic Sensor\n\n1 piece: ~$0.90 from aliexpress\n\n\nRTC (Real Time Clock)\n\n1 piece: ~$2.30 from aliexpress\n\n\nDigital Temperature Sensor\n\n10 pieces: ~$2.70 from aliexpress\n\n\nTemperature / Humidity Sensor\n\n1 piece: ~$2.50 from aliexpress"
  },
  {
    "objectID": "content/equipment/index.html#electronics",
    "href": "content/equipment/index.html#electronics",
    "title": "Equipment",
    "section": "Electronics",
    "text": "Electronics\n\nBreadboard\n\nsmall: ~$1 from aliexpress\nlarge: ~$1 from aliexpress\n\n\nJumper wires\n\n40 pieces: ~$1.60 from aliexpress\n\n\nWires with Alligator-Banana tips\n\n1m cable: ~$0.70 from aliexpress\n\n\nResistors\n\n600 pieces: ~$2.40 from aliexpress\n\n\nPotentiometer (variable resistor)\n\n10 pieces: ~$1.70 from aliexpress\n\n\nJST (pin header connector)\n\n230 pieces: ~$0.70 from aliexpress\n\n\nRelay\n\n3.3V 2 Channel Relay Module: ~$1.30 from aliexpress\n\n\nHelping hands\n\n~$16 from aliexpress\n\n\nOperational amplifier\n\n10 pieces: ~$2.20 from aliexpress\n\n\nToggle switch\n\n40 pieces: ~$1.80 from aliexpress\n\n\nPrototype PCB (Printed Circuit Board)\n\n10 pieces: ~$1.20 from aliexpress\n\n\nHeat Gun\n\n1 piece: ~$9.00 from aliexpress\n\n\nHeat Shrink Set\n\n328 pieces: ~$3.00 from aliexpress"
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": " Projects",
    "section": "",
    "text": "material-symbols:rocket-launch"
  },
  {
    "objectID": "projects.html#iconify-icons8-finish-flag-final-project",
    "href": "projects.html#iconify-icons8-finish-flag-final-project",
    "title": " Projects",
    "section": " Final Project",
    "text": "Final Project\nRead carefully the instructions. Click here.\n\n\n2022 Final projects\n\n   Ronna Melamed Bat – May Nir\n   Avital Akerman – Elad Greenfeld\n   Nadav Hen – Guy Donagi – David Zingerman\n   Zeev Rozman – Imri Zadak – Alex Evenko-Greenapple\n   Yuval Chemke – Reem Har Levi\n   Peleg Atir – Aviad Mendelovich – Ruth Yitzhaki\n   Amir Sheffer – Yitzchak Kanovsky – Aviv Saadia"
  },
  {
    "objectID": "projects.html#iconify-icon-park-solid-pyramid-one-passover-2022-mini-project",
    "href": "projects.html#iconify-icon-park-solid-pyramid-one-passover-2022-mini-project",
    "title": " Projects",
    "section": " Passover 2022 mini project",
    "text": "Passover 2022 mini project\nclick here"
  },
  {
    "objectID": "projects.html#iconify-mingcute-transfer-3-line-borrowing-equipment",
    "href": "projects.html#iconify-mingcute-transfer-3-line-borrowing-equipment",
    "title": " Projects",
    "section": " Borrowing equipment",
    "text": "Borrowing equipment\nclick here"
  },
  {
    "objectID": "projects.html#iconify-file-icons-arduino-arduino-nano",
    "href": "projects.html#iconify-file-icons-arduino-arduino-nano",
    "title": " Projects",
    "section": " Arduino Nano",
    "text": "Arduino Nano\nclick here"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "agrotech lab",
    "section": "",
    "text": "Faculty of Agriculture, Food and Environment\nHebrew University of Jerusalem — Rehovot Campus"
  },
  {
    "objectID": "index.html#iconify-fa-solid-user-ninja-mission",
    "href": "index.html#iconify-fa-solid-user-ninja-mission",
    "title": "agrotech lab",
    "section": " Mission",
    "text": "Mission\nWe are here to have some fun!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": " About",
    "section": "",
    "text": "Welcome to the Agrotech-lab course, where you will have the opportunity to learn about the integration of microcontrollers in agriculture technology. In this course, you will explore the use of microcontrollers such as the ESP32 and how they can be utilized to automate processes, collect data, and improve overall efficiency in agricultural practices.\nThroughout the course, you will gain practical knowledge on how to design, develop, and implement microcontroller-based solutions for different applications in agriculture. You will learn how to use sensors to collect data such as temperature, humidity, and soil moisture, and how to integrate this data with the ESP32 to automate irrigation systems, monitor plant growth, and more.\nThis course is designed for students who are interested in the application of technology in agriculture and want to gain hands-on experience in designing and implementing microcontroller-based solutions. By the end of this course, you will have a solid understanding of how to apply microcontrollers in agricultural practices, which will equip you with valuable skills for future research or professional opportunities."
  },
  {
    "objectID": "about.html#iconify-mdi-head-lightbulb-learning-experience",
    "href": "about.html#iconify-mdi-head-lightbulb-learning-experience",
    "title": " About",
    "section": " Learning experience",
    "text": "Learning experience\nWe want students to creatively engage with their projects, finding by themselves solutions to the challenges they encounter. The role of the teaching staff will be to consult and advise, not spoon-feed solutions.\nThe main values we would like to promote: curiosity, independence, creativity, and a can-do attitude."
  },
  {
    "objectID": "about.html#iconify-mdi-scroll-text-outline-course-policy-and-grading",
    "href": "about.html#iconify-mdi-scroll-text-outline-course-policy-and-grading",
    "title": " About",
    "section": " Course policy and grading",
    "text": "Course policy and grading\n\n10%: Presence. 100% presence is required.\n10%: Equipment: borrowing and returning. All equipment must be accounted for and taken care with respect. Together we will keep record of all borrowed equipment. Everything will be neatly return to storage by 10 July.\n10%: Passover project.\n70%: Final project.\n\n30%: Experimental setup.\n30%: Report.\n10%: Presentation."
  },
  {
    "objectID": "about.html#iconify-eva-email-outline-contact",
    "href": "about.html#iconify-eva-email-outline-contact",
    "title": " About",
    "section": " Contact",
    "text": "Contact\nErez Feuer: erez.feuer@mail.huji.ac.il\nYair Mau: yair.mau@mail.huji.ac.il"
  },
  {
    "objectID": "tutorials.html",
    "href": "tutorials.html",
    "title": " Tutorials",
    "section": "",
    "text": "What is a microcontroller?"
  },
  {
    "objectID": "tutorials.html#unit-1-first-steps",
    "href": "tutorials.html#unit-1-first-steps",
    "title": " Tutorials",
    "section": "Unit 1: first steps",
    "text": "Unit 1: first steps\n\nArduino IDE\nInstall FireBeetle (ESP32)\nFireBeetle pinout\nBreadboard"
  },
  {
    "objectID": "tutorials.html#unit-2",
    "href": "tutorials.html#unit-2",
    "title": " Tutorials",
    "section": "Unit 2",
    "text": "Unit 2\n\nIntro to Arduino code\nLibraries\nThingspeak\nMerging\nSHT31"
  },
  {
    "objectID": "tutorials.html#unit-3",
    "href": "tutorials.html#unit-3",
    "title": " Tutorials",
    "section": "Unit 3",
    "text": "Unit 3\n\nBasic Electronics Concepts\nElectronics Class\nSensor Modules and Thingspeak\nBasic Data Analysis with Python and Matlab\nWater and Energy Balances\nPsychrometric Chart and Evaporative cooling\nSoldering and Wires"
  },
  {
    "objectID": "resources.html",
    "href": "resources.html",
    "title": " Resources",
    "section": "",
    "text": "Click for a list of the main components used in this course."
  },
  {
    "objectID": "resources.html#useful-links",
    "href": "resources.html#useful-links",
    "title": " Resources",
    "section": "Useful links",
    "text": "Useful links\nThe world of MCUs has great support online. You actually don’t need this course to learn it… We are only here to guide you and help with the first steps. SO below are some usful links to websites/Youtube channels that provide excellent information:\nArduino syntax and coding:\n\nArduino — Language Reference\n\nTutorials by sensor manufacturers:\n\nSparkfun\n\nAdafruit\n\nProject ideas:\n\nArduino Project Hub\n\nInstructables — Arduino\n\nArduino beginners course:\n\nPaul McWhorter - New Arduino Tutorials\n\nExamples of good Youtube channels:\n\nAndreas Spiess\n\nG6EJD - David\n\nGreatScott!\n\neduc8s.tv"
  },
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": " Schedule",
    "section": "",
    "text": "Wednesdays, from 17:00 to 20:00\n In the lab next to the “Ground Water” seminar room, 1st floor\n Map\n\n\n\n\n\ndate\ntopic\n\n\n\n\n2023-03-15\nCourse overview, what is agrotech, microcontrollers, examples, AI. Arduino IDE.\n\n\n2023-03-22\nBasic projects, circuits on breadboard, sensors, Thingspeak. Passover project rundown.\n\n\n2023-03-29\nTroubleshooting\n\n\n2023-04-05\nNO CLASS — Passover break\n\n\n2023-04-12\nNO CLASS — Passover break\n\n\n2023-04-19\nBasic electronics: multimeter, Ohm’s law, and circuitry.\n\n\n2023-04-26\nNO CLASS — Independence Day\n\n\n2023-05-03\nsensors and data logging\n\n\n2023-05-10\ncontrol, feedback\n\n\n2023-05-17\nguest speakers\n\n\n2023-05-24\nsoldering and assembly\n\n\n2023-05-31\nproject development\n\n\n2023-06-07\nproject development\n\n\n2023-06-14\nproject development\n\n\n2023-06-21\nproject development\n\n\n2023-06-28\npresentation of projects"
  }
]