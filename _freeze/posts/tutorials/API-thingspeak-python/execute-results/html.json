{
  "hash": "0543313f30cd1680951cc15b2a52a48b",
  "result": {
    "markdown": "---\ntitle: API to download Thingspeak data with Python\ndate: '2022-05-10'\ncategories:\n  - arduino\necho: false\nexecute:\n  freeze: auto\n---\n\nAn API (Application Programming Interface) is a set of rules and protocols that allow different software applications to communicate with each other. \n\nIn the code below, we will use Thingspeak's API to read data, save it to file, and finally load it to python.\n\n### Import relevant packages\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nimport urllib\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\nimport matplotlib.dates as mdates\n```\n:::\n\n\n### Download data from Thingspeak and save them to file\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# define what to download\nchannels = \"2076217\"\nfields = \"1,2,3\"\n\n# see here all the \"Query String Parameters\"\n# https://www.mathworks.com/help/thingspeak/readdata.html\n\nresults = 100\n# Download the last N results\n# url = f\"https://api.thingspeak.com/channels/{channels}/fields/{fields}.csv?results={results}\"\n\nminutes = \"30\"\n# Number of minutes before NOW to include in response.\n# url = f\"https://api.thingspeak.com/channels/{channels}/fields/{fields}.csv?minutes={minutes}\"\n\nstart = \"2023-04-16%2000:00:00\"  # format YYYY-MM-DD%20HH:NN:SS\nend = \"2023-04-19%2000:00:00\"    # format YYYY-MM-DD%20HH:NN:SS\nurl = f\"https://api.thingspeak.com/channels/{channels}/fields/{fields}.csv?start={start}&end={end}\"\n\n# Open the URL and get the response\ndata = urllib.request.urlopen(url)\n# Read the response data\nd = data.read()\n# save data to csv\nfilename1 = \"downloaded_data.csv\"\nfile = open(filename1, \"w\")\nfile.write(d.decode('UTF-8'))\nfile.close()\n```\n:::\n\n\n### Load data as a pandas dataframe\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\n# load data\ndf = pd.read_csv(filename1)\n# rename columns\ndf = df.rename(columns={\"created_at\": \"timestamp\",\n                        \"field1\": \"Temp\",\n                        \"field2\": \"RH\",\n                        \"field3\": \"VPD\",\n                        # \"field4\": \"whatever\",\n                        })\n# set timestamp as index\ndf['timestamp'] = pd.to_datetime(df['timestamp'])\ndf = df.set_index('timestamp')\ndf\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>entry_id</th>\n      <th>Temp</th>\n      <th>RH</th>\n      <th>VPD</th>\n    </tr>\n    <tr>\n      <th>timestamp</th>\n      <th></th>\n      <th></th>\n      <th></th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2023-04-16 00:01:20+00:00</th>\n      <td>3892</td>\n      <td>21.59</td>\n      <td>72.31</td>\n      <td>0.71442</td>\n    </tr>\n    <tr>\n      <th>2023-04-16 00:06:22+00:00</th>\n      <td>3893</td>\n      <td>21.60</td>\n      <td>72.14</td>\n      <td>0.71925</td>\n    </tr>\n    <tr>\n      <th>2023-04-16 00:11:24+00:00</th>\n      <td>3894</td>\n      <td>21.59</td>\n      <td>72.38</td>\n      <td>0.71262</td>\n    </tr>\n    <tr>\n      <th>2023-04-16 00:16:25+00:00</th>\n      <td>3895</td>\n      <td>21.59</td>\n      <td>71.86</td>\n      <td>0.72603</td>\n    </tr>\n    <tr>\n      <th>2023-04-16 00:21:27+00:00</th>\n      <td>3896</td>\n      <td>21.54</td>\n      <td>71.49</td>\n      <td>0.73333</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>2023-04-18 18:58:48+00:00</th>\n      <td>4691</td>\n      <td>23.93</td>\n      <td>55.29</td>\n      <td>1.32931</td>\n    </tr>\n    <tr>\n      <th>2023-04-18 19:03:50+00:00</th>\n      <td>4692</td>\n      <td>23.98</td>\n      <td>55.25</td>\n      <td>1.33450</td>\n    </tr>\n    <tr>\n      <th>2023-04-18 19:08:52+00:00</th>\n      <td>4693</td>\n      <td>23.92</td>\n      <td>55.07</td>\n      <td>1.33505</td>\n    </tr>\n    <tr>\n      <th>2023-04-18 19:13:53+00:00</th>\n      <td>4694</td>\n      <td>23.92</td>\n      <td>59.84</td>\n      <td>1.19332</td>\n    </tr>\n    <tr>\n      <th>2023-04-18 19:18:17+00:00</th>\n      <td>4695</td>\n      <td>23.92</td>\n      <td>57.23</td>\n      <td>1.27087</td>\n    </tr>\n  </tbody>\n</table>\n<p>804 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n### Plot data\n\nNow you can manipulate your data however you want! Here we will simply plot one of the fields.\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\nfig, ax = plt.subplots(1)\nax.plot(df['Temp'])\nax.set(ylabel=\"temperature (°C)\")\nplt.gcf().autofmt_xdate()  # makes slanted dates\n```\n\n::: {.cell-output .cell-output-display}\n![](API-thingspeak-python_files/figure-html/cell-5-output-1.png){width=597 height=396}\n:::\n:::\n\n\n",
    "supporting": [
      "API-thingspeak-python_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}