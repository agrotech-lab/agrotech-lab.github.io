{
  "hash": "211f7aa8e66f1e9b7846ebfe0c6b5a30",
  "result": {
    "markdown": "---\ntitle: Introduction\ndate: '2022-09-22'\ncategories:\n  - arduino\necho: false\nexecute:\n  freeze: auto\n---\n\n<!-- ---\ntitle: \"\"\necho: false\njupyter: python3\nsection-divs: false\n--- -->\n\n\n\n### Blink\n\nIt's time to run a first example.\n\n1. Go to `File > Examples > 01.Basics`, click on `Blink`.\n1. Press the <span class=\"iconify\" data-icon=\"emojione-monotone:right-arrow\"></span> \"right arrow\" button on the top left to upload the code onto the ESP32.\n1. When you see \"Connecting\" on the bottom of the screen, press the right button on the ESP32.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#blink\" aria-expanded=\"false\" aria-controls=\"blink\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/blink.ino\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"blink\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)\n  delay(1000);                       // wait for a second\n  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW\n  delay(1000);                       // wait for a second\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n----\n\n### Printing increasing numbers\n\nUpload the following code to your ESP32, then click on the <span class=\"iconify\" data-icon=\"foundation:magnifying-glass\"></span> on the top right corner. This is called \"Serial Monitor\".\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#print-increasing-numbers\" aria-expanded=\"false\" aria-controls=\"print-increasing-numbers\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/print-increasing-numbers.ino\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"print-increasing-numbers\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n// This is a one-line comment\n\n/*\nThis\ncomment\nspans\nmany\nrows\n*/\n\nint num = 0;              // number \n\nvoid setup() {\n  // initialize serial communication with computer:\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  // print num and break line\n  Serial.println(num);\n  // print num, don't break line\n  // Serial.print(num);\n  delay(1000);        // 1000 ms delay\n  num = num + 1;      // increase num by 1\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n----\n\n### Printing random numbers, then plotting!\n\n1. Upload the following code to your ESP32.\n1. Open the Serial Monitor (<span class=\"iconify\" data-icon=\"foundation:magnifying-glass\"></span>). Now close it, and\n3. Go to `Tools > Serial Plotter`.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#print-random-numbers\" aria-expanded=\"false\" aria-controls=\"print-random-numbers\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/print-random-numbers.ino\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"print-random-numbers\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\nint num1 = 0, num2 = 0;\n\nvoid setup() {\n  // initialize serial communication with computer:\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  // random(min, max)\n  num1 = num1 + random(-0, 5);\n  num2 = num2 + random(-10, 10);\n  // print num1, then tab, then num2, then break line\n  Serial.print(num1);\n  Serial.print(\"\\t\");\n  Serial.println(num2);\n  delay(100);        // 1000 ms delay\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n----\n\n### Floats, functions, conditionals\n\nWe will now learn how to deal with floats, how to define our own functions, and how to write conditionals (if/else).\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#sin-cos-square\" aria-expanded=\"false\" aria-controls=\"sin-cos-square\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/sin-cos-square.ino\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"sin-cos-square\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\nfloat t = 0, x1 = 0, x2 = 0, x3 = 0;\n\nvoid setup() {\n  // initialize serial communication with computer:\n  Serial.begin(9600);\n}\n\nfloat my_sine(float time) {\n  return sin(time);\n}\n\nfloat my_cosine(float time) {\n  float double_time;              // you can define internal variables,\n  double_time = 2.0 * time;       // write as many commands as you want\n  return 2.0 * cos(double_time);  // in the end, return float\n}\n\nvoid loop() {\n  x1 = my_sine(t);\n  x2 = my_cosine(t);\n  if (x1 > 0) {\n    x3 = -1.0;\n  } else {\n    x3 = 1.0;\n  }\n  Serial.print(\"sin:\"); Serial.print(x1); Serial.print(\"\\t\");\n  Serial.print(\"cos:\"); Serial.print(x2); Serial.print(\"\\t\");\n  Serial.print(\"square:\"); Serial.print(x3);\n  Serial.println();\n  delay(50);        // 1000 ms delay\n  t += 0.05;\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n----\n\n### WiFi, read time\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#wifi-time\" aria-expanded=\"false\" aria-controls=\"wifi-time\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/wifi-time.ino\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"wifi-time\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n//-----------------------------------------------------------------------------------\n//  WIFI setup:\n\n#include <WiFi.h>\n\nconst char* ssid = \"HUJI-guest\"; // your wifi SSID name\nconst char* password = \"\" ;// wifi pasword\nString formattedTime;\nfloat r = 0, m = 0;\n\nWiFiClient client;\n\n//-------------------------------------------------------------------------------------\n// Set time\n#include <NTPClient.h>\n#include <WiFiUdp.h>\n\nconst long utcOffsetInSeconds = 3600 * 2; // For UTC +2.00 : 2 * 60 * 60\n\nchar daysOfTheWeek[7][12] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};\n\n// Define NTP Client to get time\nWiFiUDP ntpUDP;\nNTPClient timeClient(ntpUDP, \"pool.ntp.org\", utcOffsetInSeconds);\n\nint time_s ; // variable for the second\n\n\nvoid setup() {\n  Serial.begin(9600);\n  //---------------------------------------------------------------------------\n  //wifi conection:\n  WiFi.disconnect();\n  delay(10);\n  WiFi.begin(ssid, password);\n\n  Serial.println();\n  Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n\n  WiFi.begin(ssid, password);\n\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"NodeMcu connected to wifi...\");\n  Serial.println(ssid);\n  Serial.println();\n  //-----------------------------------------------------------------------\n  // stings for time:\n  timeClient.begin();\n\n}\n\nvoid loop() {\n  timeClient.update();\n  time_s = timeClient.getSeconds();\n  if (time_s == 0) {\n    formattedTime = timeClient.getFormattedTime();\n    Serial.print(\"A new minute has started!\\nFull time = \");\n    Serial.println(formattedTime);\n  }\n  \n  Serial.print(\"s = \");\n  Serial.print(time_s);\n  r = random(10, 20);\n  m += r;\n  Serial.print(\"\\trand = \");\n  Serial.print(r);\n  Serial.print(\"\\trunning sum = \");\n  Serial.println(m);\n  if (time_s%10==9) {\n    Serial.print(\"Average  = \");\n    Serial.println(m / 10);\n    m = 0;\n  }\n  \n  delay(1000);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n----\n\n",
    "supporting": [
      "intro_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}