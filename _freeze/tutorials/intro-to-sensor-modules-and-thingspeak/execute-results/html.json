{
  "hash": "144f029a823f25c340d6b24a0dd5ae9d",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Intro to Sensor Modules and Thingspeak\necho: false\nexecute:\n  freeze: auto\n---\n\n<!-- ---\ntitle: \"\"\necho: false\njupyter: python3\nsection-divs: false\n--- -->\n\n\n\n![](/archive/figures/thingspeak-screenshot-graphs.png)\n\n## DS18B20 Temperature Sensor\n\nPretty accurate temperature sensor.\nEach sensor has its own unique address, enabling the connection of numerous sensors to only on pin on the Arduino/ESP32.\n\nIn [this tutorial](https://randomnerdtutorials.com/esp32-multiple-ds18b20-temperature-sensors/) you can find a lot more information.\n\nCode for finding the sensor's address:\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#Agrotech_2022_find_DS18B20ino\" aria-expanded=\"false\" aria-controls=\"Agrotech_2022_find_DS18B20ino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/Agrotech_2022_find_DS18B20.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"Agrotech_2022_find_DS18B20ino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n/*\n * Rui Santos \n * Complete Project Details https://randomnerdtutorials.com\n */\n\n#include <OneWire.h>\n\n// Based on the OneWire library example\n\nOneWire ds(4);  //data wire connected to GPIO 4\n\nvoid setup(void) {\n  Serial.begin(115200);\n}\n\nvoid loop(void) {\n  byte i;\n  byte addr[8];\n  \n  if (!ds.search(addr)) {\n    Serial.println(\" No more addresses.\");\n    Serial.println();\n    ds.reset_search();\n    delay(250);\n    return;\n  }\n  Serial.print(\" ROM =\");\n  for (i = 0; i < 8; i++) {\n    Serial.write(' ');\n    Serial.print(addr[i], HEX);\n  }\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n<br>\n\n## SHT31 Temperature & Humidity Sensor Using I2C communication\n\nIn [this tutorial](http://www.esp32learning.com/code/esp32-and-sht31-sensor-example.php) you can find a lot more information.\n\n\nCode for reading the sensor:\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#Agrotech_2022_SHT31ino\" aria-expanded=\"false\" aria-controls=\"Agrotech_2022_SHT31ino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/Agrotech_2022_SHT31.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"Agrotech_2022_SHT31ino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n#include <Arduino.h>\n#include <Wire.h>\n#include \"Adafruit_SHT31.h\"\n\n//code from tutorial:\n// http://www.esp32learning.com/code/esp32-and-sht31-sensor-example.php\n\nAdafruit_SHT31 sht31 = Adafruit_SHT31();\n\nvoid setup() {\n  Serial.begin(9600);\n  if (! sht31.begin(0x44)) {\n    Serial.println(\"Couldn't find SHT31\");\n    while (1) delay(1);\n  }\n}\n\nvoid loop() {\nfloat t = sht31.readTemperature();\nfloat h = sht31.readHumidity();\n\nif (! isnan(t))  {\n    Serial.print(\"Temp *C = \"); Serial.println(t);\n  }\n  else  {\n    Serial.println(\"Failed to read temperature\");\n  }\n  \n  if (! isnan(h))  {\n  Serial.print(\"Hum. % = \"); Serial.println(h);\n  }\n  else  {\n  Serial.println(\"Failed to read humidity\");\n  }\n  \n  Serial.println();\n  delay(1000);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n<br>\n\n## VL53L0X Time-of-Flight Distance Sensor Using I2C communication\n\nIn [this tutorial](http://www.esp32learning.com/code/vl53l0x-time-of-flight-sensor-and-esp32.php) you can find a lot more information.\n\nCode for reading the sensor:\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#Agrotech_2022_VL53L0Xino\" aria-expanded=\"false\" aria-controls=\"Agrotech_2022_VL53L0Xino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/Agrotech_2022_VL53L0X.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"Agrotech_2022_VL53L0Xino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n#include \"Adafruit_VL53L0X.h\"\n\n// also on http://www.esp32learning.com/code/vl53l0x-time-of-flight-sensor-and-esp32.php\nAdafruit_VL53L0X lox = Adafruit_VL53L0X();\n\nvoid setup() {\n  Serial.begin(115200);\n\n  // wait until serial port opens for native USB devices\n  while (! Serial) {\n    delay(1);\n  }\n  \n  Serial.println(\"Adafruit VL53L0X test\");\n  if (!lox.begin()) {\n    Serial.println(F(\"Failed to boot VL53L0X\"));\n    while(1);\n  }\n  // power \n  Serial.println(F(\"VL53L0X API Simple Ranging example\\n\\n\")); \n}\n\n\nvoid loop() {\n  VL53L0X_RangingMeasurementData_t measure;\n    \n  Serial.print(\"Reading a measurement... \");\n  lox.rangingTest(&measure, false); // pass in 'true' to get debug data printout!\n\n  if (measure.RangeStatus != 4) {  // phase failures have incorrect data\n    Serial.print(\"Distance (mm): \"); Serial.println(measure.RangeMilliMeter);\n  } else {\n    Serial.println(\" out of range \");\n  }\n    \n  delay(100);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Thingspeak\n\n[Thingspeak webpage](https://thingspeak.com/).\n\n## Basic Code for Uploading Data to Thingspeak\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#Agrotech_2022_Thingspeakino\" aria-expanded=\"false\" aria-controls=\"Agrotech_2022_Thingspeakino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/Agrotech_2022_Thingspeak.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"Agrotech_2022_Thingspeakino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n// #include <ESP8266WiFi.h>\n#include <WiFi.h>\n\n#include \"ThingSpeak.h\"\nunsigned long myChannelNumber = 1358139;\nconst char * myWriteAPIKey = \"4HZXSWG1JXQCVHM2\";\n\nconst char* ssid = \"HUJI-guest\"; // your wifi SSID name\nconst char* password = \"\" ;// wifi pasword\n \nconst char* server = \"api.thingspeak.com\";\n\nWiFiClient client;\n\n\n \nvoid setup() {\n  Serial.begin(9600);\n  WiFi.disconnect();\n  delay(10);\n  WiFi.begin(ssid, password);\n\n  Serial.println();\n  Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n\n    ThingSpeak.begin(client);\n \n  WiFi.begin(ssid, password);\n  \n \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"NodeMcu connected to wifi...\");\n  Serial.println(ssid);\n  Serial.println();\n}\n \nvoid loop() {\n\n \n  ThingSpeak.setField(1,11);\n  ThingSpeak.setField(2,22);\n  ThingSpeak.setField(3,33);\n  ThingSpeak.setField(4,44);\n  ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n\n  Serial.println(\"uploaded to Thingspeak server....\");\n\n  client.stop();\n \n  Serial.println(\"Waiting to upload next reading...\");\n  Serial.println();\n  // thingspeak needs minimum 15 sec delay between updates\n\n \n  \n  delay(20000);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Example: Sending Data from Sensors Above to Thingspeak\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#Agrotech_2022_sensors_to_Thingspeakino\" aria-expanded=\"false\" aria-controls=\"Agrotech_2022_sensors_to_Thingspeakino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/Agrotech_2022_sensors_to_Thingspeak.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"Agrotech_2022_sensors_to_Thingspeakino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n//------------------------------------------------------------------\n//Thingspeak:\n// #include <ESP8266WiFi.h>\n#include <WiFi.h>\n\n#include \"ThingSpeak.h\"\nunsigned long myChannelNumber = 1689148;\nconst char * myWriteAPIKey = \"A58V29JE8UIGWI16\";\n\nconst char* ssid = \"HUJI-guest\"; // your wifi SSID name\nconst char* password = \"\" ;// wifi pasword\n \nconst char* server = \"api.thingspeak.com\";\n\nWiFiClient client;\n\n//------------------------------------------------------------------\n//DS18B20:\n#include <OneWire.h>\n#include <DallasTemperature.h>\n\n// Data wire is connected to GPIO4\n#define ONE_WIRE_BUS 4\n// Setup a oneWire instance to communicate with a OneWire device\nOneWire oneWire(ONE_WIRE_BUS);\n// Pass our oneWire reference to Dallas Temperature sensor \nDallasTemperature sensors(&oneWire);\n\n//Insert the right address for your sensors\nDeviceAddress sensor1 = { 0x28, 0xFF, 0x64, 0x02, 0xEF, 0x01, 0xA7, 0x31 };\nDeviceAddress sensor2 = { 0x28, 0x35, 0xD3, 0x11, 0x00, 0x00, 0x00, 0xBF };\n\n//------------------------------------------------------------------\n//SHT31:\n#include <Arduino.h>\n#include <Wire.h>\n#include \"Adafruit_SHT31.h\"\n\nAdafruit_SHT31 sht31 = Adafruit_SHT31();\n//------------------------------------------------------------------\n//VL53LOX:\n\n#include \"Adafruit_VL53L0X.h\"\nAdafruit_VL53L0X lox = Adafruit_VL53L0X();\n\n\nvoid setup() {\n  Serial.begin(9600);\n  //------------------------------------------------------------------\n  //Thingspeak and wifi:\n  WiFi.disconnect();\n  delay(10);\n  WiFi.begin(ssid, password);\n\n  Serial.println();\n  Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n\n    ThingSpeak.begin(client);\n \n  WiFi.begin(ssid, password);\n  \n \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"NodeMcu connected to wifi...\");\n  Serial.println(ssid);\n  Serial.println();\n  //------------------------------------------------------------------\n  //DS18B20:\n  sensors.begin();\n\n  //------------------------------------------------------------------\n  //SHT31:\n    if (! sht31.begin(0x44)) {\n    Serial.println(\"Couldn't find SHT31\");\n    while (1) delay(1);\n  }\n\n  //------------------------------------------------------------------\n  //VL53LOX:\n  // wait until serial port opens for native USB devices\n  while (! Serial) {\n    delay(1);\n  }\n  \n  Serial.println(\"Adafruit VL53L0X test\");\n  if (!lox.begin()) {\n    Serial.println(F(\"Failed to boot VL53L0X\"));\n    while(1);\n  }\n  // power \n  Serial.println(F(\"VL53L0X API Simple Ranging example\\n\\n\")); \n  \n}\n \nvoid loop() {\n  //------------------------------------------------------------------\n  //DS18B20:\n  Serial.print(\"Requesting temperatures...\");\n  sensors.requestTemperatures(); // Send the command to get temperatures\n  Serial.println(\"DONE\");\n  \n  Serial.print(\"Sensor 1(*C): \");\n  Serial.print(sensors.getTempC(sensor1)); \n  Serial.print(\" Sensor 1(*F): \");\n  Serial.println(sensors.getTempF(sensor1)); \n \n  Serial.print(\"Sensor 2(*C): \");\n  Serial.print(sensors.getTempC(sensor2)); \n  Serial.print(\" Sensor 2(*F): \");\n  Serial.println(sensors.getTempF(sensor2)); \n\n  //------------------------------------------------------------------\n  //SHT31:\n  float t = sht31.readTemperature();\n  float h = sht31.readHumidity();\n\n  if (! isnan(t))  {\n    Serial.print(\"Temp *C = \"); Serial.println(t);\n  }\n  else  {\n    Serial.println(\"Failed to read temperature\");\n  }\n  \n  if (! isnan(h))  {\n  Serial.print(\"Hum. % = \"); Serial.println(h);\n  }\n  else  {\n  Serial.println(\"Failed to read humidity\");\n  }\n  \n  Serial.println();\n  delay(1000);\n\n  //------------------------------------------------------------------\n  //VL53LOX:\n   VL53L0X_RangingMeasurementData_t measure;\n    \n  Serial.print(\"Reading a measurement... \");\n  lox.rangingTest(&measure, false); // pass in 'true' to get debug data printout!\n\n  if (measure.RangeStatus != 4) {  // phase failures have incorrect data\n    Serial.print(\"Distance (mm): \"); Serial.println(measure.RangeMilliMeter);\n  } else {\n    Serial.println(\" out of range \");\n  }\n    \n  delay(100);\n\n  //------------------------------------------------------------------\n  //Thingspeak:\n  ThingSpeak.setField(1,t); // SHT temp\n  ThingSpeak.setField(2,h); // SHT humidity\n  ThingSpeak.setField(3,sensors.getTempC(sensor1)); // DS18B20 in\n  ThingSpeak.setField(4,sensors.getTempC(sensor2)); // DS18B20 out\n  ThingSpeak.setField(5,measure.RangeMilliMeter); // distance\n  ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n\n  Serial.println(\"uploaded to Thingspeak server....\");\n\n  client.stop();\n \n  Serial.println(\"Waiting to upload next reading...\");\n  Serial.println();\n  \n  // thingspeak free needs minimum 15 sec delay between updates \n  // payed can do 1sec\n\n \n  \n  delay(1000);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n----\n\n<script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n\n<script type=\"text/javascript\">\nfunction toggle_icon_show_content(Show_Hide_Id,Icon_Id) {\n    $(\"#\"+Icon_Id).toggleClass('fa-plus-square fa-minus-square')\n    $(\"#\"+Show_Hide_Id).slideToggle('slow');\n}\n</script>\n\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n\n",
    "supporting": [
      "intro-to-sensor-modules-and-thingspeak_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}