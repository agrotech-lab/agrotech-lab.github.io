{
  "hash": "012cd07883cabd6b54be040d40bc1787",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Intro to Sensor Modules and Thingspeak\necho: false\nexecute:\n  freeze: auto\n---\n\n<!-- ---\ntitle: \"\"\necho: false\njupyter: python3\nsection-divs: false\n--- -->\n\n\n\n![](/archive/figures/thingspeak-screenshot-graphs.png)\n\n<br>\n\n\n## Serial read and blink\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#serial_read_and_blinkino\" aria-expanded=\"false\" aria-controls=\"serial_read_and_blinkino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/serial_read_and_blink.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"serial_read_and_blinkino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n// Define the built-in LED pin\n#define LED_PIN LED_BUILTIN  // Most ESP32 boards use GPIO 2 for the built-in LED\n\nvoid setup() {\n  // Initialize serial communication at 115200 baud\n  Serial.begin(115200);\n  \n  // Wait for the serial monitor to connect\n  while (!Serial) {\n    ; // Wait for serial port to connect. Needed for native USB port only\n  }\n  \n  // Set the LED pin as an output\n  pinMode(LED_PIN, OUTPUT);\n  \n  // Print instructions\n  Serial.println(\"Enter the number of times you want the LED to blink:\");\n}\n\nvoid loop() {\n  // Check if data is available to read\n  if (Serial.available() > 0) {\n    // Read the integer from the serial monitor\n    int blinkCount = Serial.parseInt();\n    \n    // Check if the parsed integer is greater than 0\n    if (blinkCount > 0) {\n      // Print the received number\n      Serial.print(\"Blinking LED \");\n      Serial.print(blinkCount);\n      Serial.println(\" times\");\n      \n      // Blink the LED the specified number of times\n      for (int i = 0; i < blinkCount; i++) {\n        digitalWrite(LED_PIN, HIGH);  // Turn on the LED\n        delay(500);                   // Wait for 500 milliseconds\n        digitalWrite(LED_PIN, LOW);   // Turn off the LED\n        delay(500);                   // Wait for 500 milliseconds\n      }\n      \n      // Print done message\n      Serial.println(\"Done blinking\");\n    }\n  }\n}\n\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Thingspeak\n\n[Thingspeak webpage](https://thingspeak.com/).\n\n## Basic Code for Uploading Data to Thingspeak\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#Agrotech_2022_Thingspeakino\" aria-expanded=\"false\" aria-controls=\"Agrotech_2022_Thingspeakino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/Agrotech_2022_Thingspeak.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"Agrotech_2022_Thingspeakino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n// #include <ESP8266WiFi.h>\n#include <WiFi.h>\n\n#include \"ThingSpeak.h\"\nunsigned long myChannelNumber = write_here_the_relevant_number;\nconst char * myWriteAPIKey = \"write_here_the_correct_API_key\";\n\nconst char* ssid = \"wifi_name\"; // your wifi SSID name\nconst char* password = \"wifi_password\" ;// wifi pasword\n \nconst char* server = \"api.thingspeak.com\";\n\nWiFiClient client;\n\n\n \nvoid setup() {\n  Serial.begin(115200);\n  WiFi.disconnect();\n  delay(10);\n  WiFi.begin(ssid, password);\n\n  Serial.println();\n  Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n\n    ThingSpeak.begin(client);\n \n  WiFi.begin(ssid, password);\n  \n \n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"NodeMcu connected to wifi...\");\n  Serial.println(ssid);\n  Serial.println();\n}\n \nvoid loop() {\n\n \n  ThingSpeak.setField(1,11);\n  ThingSpeak.setField(2,22);\n  ThingSpeak.setField(3,33);\n  ThingSpeak.setField(4,44);\n  ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n\n  Serial.println(\"uploaded to Thingspeak server....\");\n\n  client.stop();\n \n  Serial.println(\"Waiting to upload next reading...\");\n  Serial.println();\n  // thingspeak needs minimum 15 sec delay between updates\n\n \n  \n  delay(20000);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Uploading Thermistor Data to Thingspeak\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#thermistor_to_thingspeakino\" aria-expanded=\"false\" aria-controls=\"thermistor_to_thingspeakino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/thermistor_to_thingspeak.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"thermistor_to_thingspeakino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n#include <WiFi.h>\n\n// Include the ThingSpeak library\n#include \"ThingSpeak.h\"\n\n// Set the ThingSpeak channel and API key information\nunsigned long myChannelNumber = channel_number_here;\nconst char* myWriteAPIKey = \"API_key_here\";\n\n// Set the WiFi network credentials\nconst char* ssid = \"wifi_name\"; // your wifi SSID name\nconst char* password = \"wifi_password\"; // wifi password\n\n// Set the ThingSpeak server address\nconst char* server = \"api.thingspeak.com\";\n\n// Create a WiFiClient object to connect to the WiFi network\nWiFiClient client;\n\n// Set the time to wait between uploading data to ThingSpeak (in milliseconds)\nint wait_between_uploads = 10000; // 10 seconds\n\n// Thermistor setup------------------------------------------------------------------\nconst int analog_pin = A4; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\nfloat v2; // variable to store the voltage of v2\nint r1 = 10000; // R1 value (in the voltage divider)\nfloat v1 = 3.3; // V1 value\nint b_val = 4150; // B value of the resistor (from the data sheet)\nfloat r2; // variable to store the resistance of r2 (thermistor resistance)\nfloat t; // variable to store the temperature\nint adc_steps = 4095; // the number of increments our ADC has (ESP32 = 12bit)\nfloat r_25 = 10000; // the thermistor resistance at 25C (from the data sheet)\n\n// function to convert resistance to temperature according to the b value\n// equation in this link:\n// https://www.thinksrs.com/downloads/programs/therm%20calc/ntccalibrator/ntccalculator.html\nfloat resistance_to_temperature(int b, float r, float r_25) {\n  return b/(log(r/r_25)+(b/298.15))-273.15;\n}\n\n\nvoid setup() {\n  // Start the serial communication at 112500 baud\n  Serial.begin(112500);\n\n  // Disconnect any previous WiFi connection\n  WiFi.disconnect();\n  delay(10);\n\n  // Connect to the WiFi network\n  WiFi.begin(ssid, password);\n  Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"ESP32 connected to WiFi: \");\n  Serial.println(ssid);\n  Serial.println();\n\n  // Initialize the ThingSpeak library with the WiFi client\n  ThingSpeak.begin(client);\n}\n\nvoid loop() {\n\n  val = analogRead(analog_pin);  // read the input pin (reading v2)\n  v2 = (v1/adc_steps)*val;  // convert to voltage of v2 according to ADC\n  r2 = (v2*r1)/(v1-v2);\n  t = resistance_to_temperature(b_val, r2, r_25);\n  Serial.print(\"Temperature: \");\n  Serial.print(t);          // print temperature\n  Serial.println(\" C\");\n\n  // Set the values to be sent to ThingSpeak\n  ThingSpeak.setField(1, t);\n\n  // Send the data to ThingSpeak\n  ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);\n\n  // Print a message to the serial monitor indicating that the data has been uploaded\n  Serial.println(\"Uploaded to ThingSpeak server.\");\n\n  // Disconnect the WiFi client\n  client.stop();\n\n  // Wait for the specified amount of time before uploading the next set of data\n  // thingspeak needs minimum 15 sec delay between updates on a free acount,\n  // a paid acount can update every 1 sec\n  Serial.println(\"Waiting to upload next reading...\");\n  Serial.println();\n  \n  delay(wait_between_uploads);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n----\n\n<script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n\n<script type=\"text/javascript\">\nfunction toggle_icon_show_content(Show_Hide_Id,Icon_Id) {\n    $(\"#\"+Icon_Id).toggleClass('fa-plus-square fa-minus-square')\n    $(\"#\"+Show_Hide_Id).slideToggle('slow');\n}\n</script>\n\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n\n",
    "supporting": [
      "intro-to-sensor-modules-and-thingspeak_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}