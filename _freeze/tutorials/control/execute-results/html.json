{
  "hash": "984351e2dbf51eb844a7a3f38d572245",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Control\necho: false\nexecute:\n  freeze: auto\n---\n\n<!-- ---\ntitle: \"\"\necho: false\njupyter: python3\nsection-divs: false\n--- -->\n\n\n\n### Not-so-good LED dimmer\n\nAs we saw last time, we can use a potentiometer to control the brightness of an LED or another output device. Add this potentiometer in series in the circuit you have just built, turn the knob and see what happens.\n\n<details>\n<summary>see diagram</summary>\n![](/archive/figures/diagrams/led-resistor-potentiometer-esp32_schem.png)\n</details>\n\n<details>\n<summary>see wiring scheme</summary>\n![](/archive/figures/diagrams/led-resistor-potentiometer-esp32_bb.png)\n</details>\n\n\n## PWM with ESP32\n\nPulse-width modulation (PWM) is a method of controlling the average power delivered by an electrical signal. The average value of voltage (and current) fed to the load is controlled by switching the supply between 0 and 100% at a rate faster than it takes the load to change significantly. **PWM is a technique for getting analog results with digital means.** Digital control is used to create a square wave, a signal switched between on and off. This on-off pattern can simulate voltages in between the full Vcc of the board and off by changing the portion of time the signal spends on versus the time that the signal spends off. PWM is used in many applications such as controlling motor speed, heat output of heaters and variable speed fan controllers.\n\n![](https://cdn.sparkfun.com/assets/f/9/c/8/a/512e869bce395fbc64000002.JPG)\n\nUse the following code to activate LED pin with PWM.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#PWM-basicino\" aria-expanded=\"false\" aria-controls=\"PWM-basicino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/PWM-basic.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"PWM-basicino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n/*\n  Rui Santos & Sara Santos - Random Nerd Tutorials\n  Complete project details at https://RandomNerdTutorials.com/esp32-pwm-arduino-ide/\n  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files.  \n  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n*/\n\n// the number of the LED pin\nconst int ledPin = D9;  // 16 corresponds to GPIO 16\n\nvoid setup() {\n  // set the LED as an output\n  pinMode(ledPin, OUTPUT);\n}\n\nvoid loop(){\n  // increase the LED brightness\n  for(int dutyCycle = 0; dutyCycle <= 255; dutyCycle++){   \n    // changing the LED brightness with PWM\n    analogWrite(ledPin, dutyCycle);\n    delay(15);\n  }\n\n  // decrease the LED brightness\n  for(int dutyCycle = 255; dutyCycle >= 0; dutyCycle--){\n    // changing the LED brightness with PWM\n    analogWrite(ledPin, dutyCycle);\n    delay(15);\n  }\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n<br>\nIf for some reason you are working with an older version of ESP32 board manager (2.0.17 or lower), then use the code below. If you have no idea what I'm talking about, just ignore this.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#PWM-basic-oldino\" aria-expanded=\"false\" aria-controls=\"PWM-basic-oldino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/PWM-basic-old.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"PWM-basic-oldino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n// the number of the LED pin\nconst int ledPin = D9;\n\n// setting PWM properties\nconst int freq = 5000;\nconst int ledChannel = 0;\nconst int resolution = 8;\n \nvoid setup(){\n  // configure LED PWM functionalitites\n  ledcSetup(ledChannel, freq, resolution);\n  \n  // attach the channel to the GPIO to be controlled\n  ledcAttachPin(ledPin, ledChannel);\n}\n \nvoid loop(){\n  // increase the LED brightness\n  for(int dutyCycle = 0; dutyCycle <= 255; dutyCycle++){   \n    // changing the LED brightness with PWM\n    ledcWrite(ledChannel, dutyCycle);\n    delay(15);\n  }\n\n  // decrease the LED brightness\n  for(int dutyCycle = 255; dutyCycle >= 0; dutyCycle--){\n    // changing the LED brightness with PWM\n    ledcWrite(ledChannel, dutyCycle);   \n    delay(15);\n  }\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Relay\n\n\n![](/archive/figures/relay-module.jpg)\n\nA relay is an electromagnetic switch that opens and closes circuits electromechanically or electronically. A relatively small electric current that can turn on or off a much larger electric current operates a relay.\n\nThe right side in the image above has a set of four pins and a set of three pins. The top set consists of:\n\n* `VCC` should be connected to the ESP32 VCC (5 volts)\n* `GND` connects to the ESP32 GND.\n* `IN1` and `IN2` are input pins, used to control the bottom and top relays, respectively, and should be connected to a GPIO pin in the ESP32. \n\nThe terminals on the left are connected to the `load`, the equipment that consumes power.\nThe signal you send to the IN pins determines whether the relay is active or not. The relay is triggered when the input goes below about 2V. This means that you’ll have the following scenarios:\n\n- **Normally Closed (NC) configuration**:\n  - HIGH signal – current is flowing\n  - LOW signal – current is not flowing\n\n- **Normally Open (NO) configuration**:\n  - HIGH signal – current is not flowing\n  - LOW signal – current is flowing\n\nWhether you use the NC or NO configuration, you should always connect one of them to the `COM` (common) terminal.\n\nYou should use a normally closed configuration when the current should be flowing most of the time, and you only want to stop it occasionally.\n\nUse a normally open configuration when you want the current to flow occasionally (for example, to turn on a lamp occasionally).\n\n![](/archive/figures/Relay-2-ch-channel-module-input-pins-pinout.jpeg)\n\nThe other set of three pins (on the left in the figure above) are GND, VCC, and JD-VCC. The JD-VCC pin powers the electromagnet of the relay. Notice that the module has a jumper cap connecting the VCC and JD-VCC pins; the one shown here is yellow, but yours may be a different color.\n\nWith the jumper cap on, the VCC and JD-VCC pins are connected. That means the relay electromagnet is directly powered from the ESP32 power pin, so the relay module and the ESP32 circuits are not physically isolated from each other.\n\nWithout the jumper cap, you need to provide an independent power source to power up the relay’s electromagnet through the JD-VCC pin. That configuration physically isolates the relays from the ESP32 with the module’s built-in optocoupler, which prevents damage to the ESP32 in case of electrical spikes.\n\n![](/archive/figures/relay-esp32-wiring.png)\n\nThe figure above shows in a very simple way that the relay behaves like a switch with respect to the top circuit.\n\n<div class=\"alert alert-danger\">\nYou should **NOT** build the above circuit, since it is a high voltage circuit (220 V). In class we will use 5, 12 or 24 volts.</div>\n\nLet's make an LED blink, but now using a relay. The code below is the same you used to make the LED blink, when it got its energy from pin `A4`. This time, we will use `A4` to signal the relay to open or close the circuit.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#digital-writeino\" aria-expanded=\"false\" aria-controls=\"digital-writeino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/digital-write.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"digital-writeino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\nint LED_pin = A4;\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_pin as an output.\n  pinMode(LED_pin, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalWrite(LED_pin, HIGH);   // turn the LED on (HIGH is the voltage level)\n  delay(3000);                       // wait for a second\n  digitalWrite(LED_pin, LOW);    // turn the LED off by making the voltage LOW\n  delay(1000);                       // wait for a second\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n<details>\n<summary>see diagram</summary>\n![](/archive/figures/diagrams/relay-led-esp32_schem.png)\n</details>\n\n<details>\n<summary>see wiring scheme</summary>\n![](/archive/figures/diagrams/relay-led-esp32_bb.png)\n</details>\n\n## SHT31 Sensor\n\nThe SHT31 is a high-precision temperature and humidity sensor that can be used in a wide range of applications. It measures temperature and humidity using a capacitive humidity sensor and a band-gap temperature sensor. It has a wide measurement range of -40°C to 125°C for temperature and 0-100% for relative humidity. The SHT31 is a digital sensor, which means it communicates with the microcontroller over a digital interface. See more details on the [Adafruit's github page for the SHT31](https://github.com/adafruit/Adafruit_SHT31\n) and full specs on the [SHT31 datasheet](https://www.mouser.com/datasheet/2/682/Sensirion_Humidity_Sensors_SHT3x_Datasheet_digital-971521.pdf).\n\n\n### Libraries\n\nTo use the SHT31 sensor with an ESP32 microcontroller, we will need to use the Adafruit_SHT31 library. This library is specifically designed to work with the SHT31 sensor and makes it easy to read temperature and humidity values from the sensor.\n\nTo install the library, follow these steps:\n\n1. Open the Arduino IDE\n2. Go to **Sketch > Include Library > Manage Libraries**\n3. Search for \"Adafruit_SHT31\" and click the **Install** button\n4. Wait for the library to install\n\n### Wiring\n\nTo connect the SHT31 sensor to the ESP32 microcontroller, we will need to use four wires: VCC, GND, SDA, and SCL. Here is a table that shows how to connect the wires:\n\n| SHT31 Pin | ESP32 Pin |\n|-----------|-----------|\n| VCC       | 3V3       |\n| GND       | GND       |\n| SDA       | GPIO21    |\n| SCL       | GPIO22    |\n\n**Note:** The ESP32's 3V3 pin provides 3.3 volts of power, which is the correct voltage for the SHT31 sensor. Do not use the 5V pin, as it will damage the sensor.\n\n### Code\n\nHere is the code for reading temperature and humidity values from the SHT31 sensor.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#sht31ino\" aria-expanded=\"false\" aria-controls=\"sht31ino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/sht31.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"sht31ino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n/*\n * This program is a modification of\n * http://www.esp32learning.com/code/esp32-and-sht31-sensor-example.php\n */\n#include <Arduino.h>   // Include the Arduino library\n#include <Wire.h>      // Include the Wire library for I2C communication\n#include \"Adafruit_SHT31.h\" // Include the SHT31 library from Adafruit\n\nAdafruit_SHT31 sht31 = Adafruit_SHT31(); // Create an instance of the SHT31 object\n\nvoid setup() {\n  Serial.begin(115200);        // Initialize the serial communication with a baud rate of 112500\n  if (! sht31.begin(0x44)) {   // Check if SHT31 is connected and start it with address 0x44\n    // Print an error message if SHT31 is not found\n    Serial.println(\"Couldn't find SHT31\");\n    while (1) delay(1);  // Wait indefinitely\n  }\n}\n\nvoid loop() {\n  // Read temperature from SHT31 and assign it to \"temperature\"\n  float temperature = sht31.readTemperature(); \n  // Read relative humidity from SHT31 and assign it to \"humidity\"\n  float humidity = sht31.readHumidity();\n\n  if (! isnan(temperature)) {     // Check if t is not NaN (not a number)\n    Serial.print(\"temp_deg_C:\");  // Print temperature label\n    Serial.print(temperature);    // Print temperature value\n    Serial.print(\"\\t\");           // Write a tab space\n  } \n  else {\n    // Print an error message if temperature reading fails\n    Serial.println(\"Failed to read temperature\");\n  }\n\n  if (! isnan(humidity)) {        // Check if h is not NaN (not a number)\n    Serial.print(\"rel_hum_%:\");   // Print humidity label\n    Serial.print(humidity);       // Print humidity value\n  } \n  else {\n    // Print an error message if humidity reading fails\n    Serial.println(\"Failed to read humidity\");\n  }\n\n  Serial.println();    // Break line\n  delay(1000);         // Wait 1 second\n}\n\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Challenges\n\n### High temperature  activates fan\n\nYou will receive a low-voltage fan. Build a control system that turns the fan on if temperature goes above a given threshold, e.g. 30 °C.\n\n### Traffic lights\n\nUsing red, orange and green LEDs, build a traffic light system that responds to temperature:\n\n* red turns on if $T>30$ °C\n* orange turns on if $27<T<30$ °C\n* green turns on if $T<27$ °C\n\n### Bonus\n\nBuild an PMW-based control system where the duty cycle tempends on temperature.\n\n",
    "supporting": [
      "control_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}