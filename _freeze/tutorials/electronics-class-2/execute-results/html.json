{
  "hash": "9403e39cc2473bc6b93f0bea1d98d01a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Electronics Class 2\necho: false\nexecute:\n  freeze: auto\n---\n\n<!-- ---\ntitle: \"\"\necho: false\njupyter: python3\nsection-divs: false\n--- -->\n\n\n\n---\n\n## Digital read\n\n- **Goal**: Read button press and take an action (flash external LED).\n\nUse the following code.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#button-digitalreadino\" aria-expanded=\"false\" aria-controls=\"button-digitalreadino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/button-digitalread.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"button-digitalreadino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\nconst int buttonPin = A4;        // Pin where the button is connected\nconst int ledPin = D9;   // Pin where the LED is connected\n\n// Variable to store the button state\nint buttonState = 0;\n\nvoid setup() {\n  // Initialize the LED pin as an output\n  pinMode(ledPin, OUTPUT);\n\n  // Initialize the button pin as an input\n  pinMode(buttonPin, INPUT_PULLUP);  // Use the internal pull-up resistor\n  \n  // Start serial communication for debugging (optional)\n  Serial.begin(115200);\n}\n\nvoid loop() {\n  // Read the state of the button\n  buttonState = digitalRead(buttonPin);\n  \n  // Check if the button is pressed\n  if (buttonState == LOW) {  // Assuming the button connects to ground when pressed\n    Serial.println(\"Button pressed! Blinking LED...\");\n    \n    // Blink the LED rapidly for 2 seconds (20 times per second)\n    unsigned long startMillis = millis();\n    while (millis() - startMillis < 2000) { // Run for 2000ms (2 seconds)\n      digitalWrite(ledPin, HIGH);   // Turn the LED on\n      delay(50);                    // Wait for 50ms\n      digitalWrite(ledPin, LOW);    // Turn the LED off\n      delay(50);                    // Wait for 50ms\n    }\n    \n    // Optional: You can add a small delay here to debounce the button\n    delay(200);  // Debounce the button for 200ms\n  }\n\n  // Add a small delay to avoid excessive readings\n  delay(50);\n}\n\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n<details>\n<summary>see diagram</summary>\n![](/archive/figures/diagrams/button-flashLED_bb.png)\n</details>\n\n<details>\n<summary>see wiring scheme</summary>\n![](/archive/figures/diagrams/button-flashLED_schem.png)\n</details>\n\n\n## Reading an Analog Pin, convert to digital with built-in ADC\n\nWe will read the signal (middle) pin of the potentiometer, and use the 12-bit built-in Analog to Digital Converter.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#analog-readino\" aria-expanded=\"false\" aria-controls=\"analog-readino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/analog-read.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"analog-readino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\nconst int analog_pin = A4; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\n\n\nvoid setup() {\n  Serial.begin(115200); //\n}\n\nvoid loop() {\n  val = analogRead(analog_pin);  // read the input pin\n  Serial.println(val);          // print value\n  delay(100);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n<details>\n<summary>see diagram</summary>\n![](/archive/figures/diagrams/potentiometer-esp32_bb.png)\n</details>\n\n<details>\n<summary>see wiring scheme</summary>\n![](/archive/figures/diagrams/potentiometer-esp32_schem.png)\n</details>\n\nWhy is the maximum number 4095? What does this have to do with 12-bits?\n\n## Reading an Analog Pin, convert to voltage\n\nUse the same wiring as above. We will convert bits to volts now: $4095 \\text{ bits} = 3.3\\text{ volts}$.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#ADC-to-voltageino\" aria-expanded=\"false\" aria-controls=\"ADC-to-voltageino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/ADC-to-voltage.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"ADC-to-voltageino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\nconst int analog_pin = A4; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\nfloat voltage;\n\nvoid setup() {\n  Serial.begin(115200); //\n}\n\nvoid loop() {\n  val = analogRead(analog_pin);  // read the input pin\n  voltage = (3.3/4095)*val;  // convert to voltage according to ADC\n  Serial.print(\"Voltage: \");\n  Serial.print(voltage);          // print value\n  Serial.println(\" V\");\n  delay(100);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## PWM with ESP32\n\nPulse-width modulation (PWM) is a method of controlling the average power delivered by an electrical signal. The average value of voltage (and current) fed to the load is controlled by switching the supply between 0 and 100% at a rate faster than it takes the load to change significantly. **PWM is a technique for getting analog results with digital means.** Digital control is used to create a square wave, a signal switched between on and off. This on-off pattern can simulate voltages in between the full Vcc of the board and off by changing the portion of time the signal spends on versus the time that the signal spends off. PWM is used in many applications such as controlling motor speed, heat output of heaters and variable speed fan controllers.\n\n![](https://cdn.sparkfun.com/assets/f/9/c/8/a/512e869bce395fbc64000002.JPG)\n\nUse the following code to activate LED pin with PWM, using the potentiometer as input.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#potentiometer-PWMino\" aria-expanded=\"false\" aria-controls=\"potentiometer-PWMino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/potentiometer-PWM.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"potentiometer-PWMino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\nconst int ledPin = D9; // the number of the LED pin\nint analog_pin = A4; // Pin into which we connect the middle leg of the potentiometer\nint val ;  // variable to store the value read\n\n// setting PWM properties\nconst int freq = 5000;        // 5000 Hz\nconst int ledChannel = 0;\nconst int resolution = 12;    // 12-bit resolution = between 0 and 4095\n \nvoid setup(){\n  Serial.begin(115200);\n    \n  // configure LED PWM functionalitites\n  ledcSetup(ledChannel, freq, resolution);\n  \n  // attach the channel to the GPIO to be controlled\n  ledcAttachPin(ledPin, ledChannel);\n}\n \nvoid loop(){\n    val = analogRead(analog_pin);  // read the input pin\n    Serial.println(val);          // print value\n    ledcWrite(ledChannel, val);\n    delay(15);  // update duty cycle parameters every 15 ms\n  }\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n<details>\n<summary>see diagram</summary>\n![](/archive/figures/diagrams/potentiometer-PWM-LED-esp32_bb.png)\n</details>\n\n<details>\n<summary>see wiring scheme</summary>\n![](/archive/figures/diagrams/potentiometer-PWM-LED-esp32_schem.png)\n</details>\n\n",
    "supporting": [
      "electronics-class-2_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}