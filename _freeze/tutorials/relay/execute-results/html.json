{
  "hash": "59007a487c34adf0d5f3a5aeaf7492aa",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: 'Switches, Relays, Transistors'\necho: false\nexecute:\n  freeze: auto\n---\n\n<!-- ---\ntitle: \"\"\necho: false\njupyter: python3\nsection-divs: false\n--- -->\n\n\n\n## Toggle Switch\n\nNo code is needed here, we use the ESP32 just as a power source.\n\n<details>\n<summary>see diagram</summary>\n![](/archive/figures/diagrams/toggle-switchbutton-esp32_bb.png)\n</details>\n\n<details>\n<summary>see wiring scheme</summary>\n![](/archive/figures/diagrams/toggle-switchbutton-esp32_schem.png)\n</details>\n\n## Relay\n\n\n![](/archive/figures/relay-module.jpg)\n\nA relay is an electromagnetic switch that opens and closes circuits electromechanically or electronically. A relatively small electric current that can turn on or off a much larger electric current operates a relay.\n\nThe right side in the image above has a set of four pins and a set of three pins. The top set consists of:\n\n* `VCC` should be connected to the ESP32 VCC (5 volts)\n* `GND` connects to the ESP32 GND.\n* `IN1` and `IN2` are input pins, used to control the bottom and top relays, respectively, and should be connected to a GPIO pin in the ESP32. \n\nThe terminals on the left are connected to the `load`, the equipment that consumes power.\nThe signal you send to the IN pins determines whether the relay is active or not. The relay is triggered when the input goes below about 2V. This means that you’ll have the following scenarios:\n\n- **Normally Closed (NC) configuration**:\n  - HIGH signal – current is flowing\n  - LOW signal – current is not flowing\n\n- **Normally Open (NO) configuration**:\n  - HIGH signal – current is not flowing\n  - LOW signal – current is flowing\n\nWhether you use the NC or NO configuration, you should always connect one of them to the `COM` (common) terminal.\n\nYou should use a normally closed configuration when the current should be flowing most of the time, and you only want to stop it occasionally.\n\nUse a normally open configuration when you want the current to flow occasionally (for example, to turn on a lamp occasionally).\n\n![](/archive/figures/Relay-2-ch-channel-module-input-pins-pinout.jpeg)\n\nThe other set of three pins (on the left in the figure above) are GND, VCC, and JD-VCC. The JD-VCC pin powers the electromagnet of the relay. Notice that the module has a jumper cap connecting the VCC and JD-VCC pins; the one shown here is yellow, but yours may be a different color.\n\nWith the jumper cap on, the VCC and JD-VCC pins are connected. That means the relay electromagnet is directly powered from the ESP32 power pin, so the relay module and the ESP32 circuits are not physically isolated from each other.\n\nWithout the jumper cap, you need to provide an independent power source to power up the relay’s electromagnet through the JD-VCC pin. That configuration physically isolates the relays from the ESP32 with the module’s built-in optocoupler, which prevents damage to the ESP32 in case of electrical spikes.\n\nLet's make an LED blink, but now using a relay. The code below is the same you used to make the LED blink, when it got its energy from pin `A4`. This time, we will use `A4` to signal the relay to open or close the circuit.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#digital-writeino\" aria-expanded=\"false\" aria-controls=\"digital-writeino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/digital-write.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"digital-writeino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\nint LED_pin = A4;\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_pin as an output.\n  pinMode(LED_pin, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalWrite(LED_pin, HIGH);   // turn the LED on (HIGH is the voltage level)\n  delay(3000);                       // wait for a second\n  digitalWrite(LED_pin, LOW);    // turn the LED off by making the voltage LOW\n  delay(1000);                       // wait for a second\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n<details>\n<summary>see diagram</summary>\n![](/archive/figures/diagrams/relay-led-esp32_bb.png)\n</details>\n\n<details>\n<summary>see wiring scheme</summary>\n![](/archive/figures/diagrams/relay-led-esp32_schem.png)\n</details>\n\n\n## Transistor, N-channel MOSFET\n\n----\n\n<script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n\n<script type=\"text/javascript\">\nfunction toggle_icon_show_content(Show_Hide_Id,Icon_Id) {\n    $(\"#\"+Icon_Id).toggleClass('fa-plus-square fa-minus-square')\n    $(\"#\"+Show_Hide_Id).slideToggle('slow');\n}\n</script>\n\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n\n",
    "supporting": [
      "relay_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}