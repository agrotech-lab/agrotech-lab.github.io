{
  "hash": "a28a103d16854d003b57851c230e2fad",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Reading digital and analog\necho: false\nexecute:\n  freeze: auto\n---\n\n<!-- ---\ntitle: \"\"\necho: false\njupyter: python3\nsection-divs: false\n--- -->\n\n\n\n## Turn on LED upon button press\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#led_buttonino\" aria-expanded=\"false\" aria-controls=\"led_buttonino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/led_button.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"led_buttonino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n// Define the pin numbers\nconst int buttonPin = D4;\nconst int ledPin = A4;\n\nvoid setup() {\n  // Set the pin modes\n  pinMode(buttonPin, INPUT_PULLUP);\n  pinMode(ledPin, OUTPUT);\n\n  // Initialize Serial communication\n  Serial.begin(115200);\n}\n\nvoid loop() {\n  // Read the state of the button\n  int buttonState = digitalRead(buttonPin);\n\n  // If the button is not pressed (pin is pulled high)\n  if (buttonState == HIGH) {\n    // Turn on the LED\n    digitalWrite(ledPin, LOW);\n\n    // Print the button state to the Serial Monitor\n    Serial.println(\"Button is not pressed.\");\n  } else {\n    // Turn off the LED\n    digitalWrite(ledPin, HIGH);\n\n    // Print the button state to the Serial Monitor\n    Serial.println(\"Button is pressed.\");\n  }\n\n  // Delay for a short period to debounce the button\n  delay(50);\n}\n\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Toggle LED upon button press\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#button_led_toggleino\" aria-expanded=\"false\" aria-controls=\"button_led_toggleino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/button_led_toggle.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"button_led_toggleino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n// Define the pin numbers\nconst int buttonPin = D4;\nconst int ledPin = A4;\n\n// Initialize the LED state to off\nbool ledState = false;\n\nvoid setup() {\n  // Set the pin modes\n  pinMode(buttonPin, INPUT_PULLUP);\n  pinMode(ledPin, OUTPUT);\n\n  // Initialize Serial communication\n  Serial.begin(115200);\n}\n\nvoid loop() {\n  // Read the state of the button\n  int buttonState = digitalRead(buttonPin);\n\n  // If the button is pressed\n  if (buttonState == LOW) {\n    // Toggle the LED state\n    ledState = !ledState;\n    digitalWrite(ledPin, ledState);\n\n    // Print the LED state to the Serial Monitor\n    if (ledState) {\n      Serial.println(\"LED is on.\");\n    } else {\n      Serial.println(\"LED is off.\");\n    }\n\n    // Wait a short period to debounce the button\n    delay(500);\n  }\n}\n\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Digital read\n\n- **Goal**: Read button press and take an action (flash external LED).\n\nUse the following code.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#button-digitalread-flashino\" aria-expanded=\"false\" aria-controls=\"button-digitalread-flashino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/button-digitalread-flash.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"button-digitalread-flashino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\nconst int buttonPin = A4;        // Pin where the button is connected\nconst int ledPin = D9;   // Pin where the LED is connected\n\n// Variable to store the button state\nint buttonState = 0;\n\nvoid setup() {\n  // Initialize the LED pin as an output\n  pinMode(ledPin, OUTPUT);\n\n  // Initialize the button pin as an input\n  pinMode(buttonPin, INPUT_PULLUP);  // Use the internal pull-up resistor\n  \n  // Start serial communication for debugging (optional)\n  Serial.begin(115200);\n}\n\nvoid loop() {\n  // Read the state of the button\n  buttonState = digitalRead(buttonPin);\n  \n  // Check if the button is pressed\n  if (buttonState == LOW) {  // Assuming the button connects to ground when pressed\n    Serial.println(\"Button pressed! Blinking LED...\");\n    \n    // Blink the LED rapidly for 2 seconds (20 times per second)\n    unsigned long startMillis = millis();\n    while (millis() - startMillis < 2000) { // Run for 2000ms (2 seconds)\n      digitalWrite(ledPin, HIGH);   // Turn the LED on\n      delay(50);                    // Wait for 50ms\n      digitalWrite(ledPin, LOW);    // Turn the LED off\n      delay(50);                    // Wait for 50ms\n    }\n    \n    // Optional: You can add a small delay here to debounce the button\n    delay(200);  // Debounce the button for 200ms\n  }\n\n  // Add a small delay to avoid excessive readings\n  delay(50);\n}\n\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n<details>\n<summary>see diagram</summary>\n![](/archive/figures/diagrams/button-flashLED_bb.png)\n</details>\n\n<details>\n<summary>see wiring scheme</summary>\n![](/archive/figures/diagrams/button-flashLED_schem.png)\n</details>\n\n## Touch sensor\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#touch_sensorino\" aria-expanded=\"false\" aria-controls=\"touch_sensorino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/touch_sensor.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"touch_sensorino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n#include <Arduino.h>\n\n// Define the touch sensor pin\n#define TOUCH_PIN D12  // You can change this to another touch pin if needed\n\nvoid setup() {\n  // Initialize serial communication at 115200 baud\n  Serial.begin(115200);\n  \n  // Wait for the serial monitor to connect\n  while (!Serial) {\n    ; // Wait for serial port to connect. Needed for native USB port only\n  }\n}\n\nvoid loop() {\n  // Read the value from the touch sensor\n  int touchValue = touchRead(TOUCH_PIN);\n\n  // Print the touch sensor value\n  Serial.print(\"Touch value: \");\n  Serial.println(touchValue);\n  \n  // Check if the touch sensor is activated (value will be lower when touched)\n  if (touchValue < 30) {  // You might need to adjust this threshold value\n    Serial.println(\"Touch detected!\");\n  }\n\n  // Add a small delay to avoid spamming the serial monitor\n  delay(100);\n}\n\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Control LED with touch sensor\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#touch_control_LEDino\" aria-expanded=\"false\" aria-controls=\"touch_control_LEDino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/touch_control_LED.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"touch_control_LEDino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n#include <Arduino.h>\n\n// Define the touch sensor pin\n#define TOUCH_PIN T0  // You can change this to another touch pin if needed\n\n// Define the built-in LED pin\n#define LED_PIN LED_BUILTIN  // Most ESP32 boards use GPIO 2 for the built-in LED\n\nvoid setup() {\n  // Initialize serial communication at 115200 baud\n  Serial.begin(115200);\n  \n  // Wait for the serial monitor to connect\n  while (!Serial) {\n    ; // Wait for serial port to connect. Needed for native USB port only\n  }\n\n  // Set the LED pin as an output\n  pinMode(LED_PIN, OUTPUT);\n}\n\nvoid loop() {\n  // Read the value from the touch sensor\n  int touchValue = touchRead(TOUCH_PIN);\n\n  // Print the touch sensor value\n  Serial.print(\"Touch value: \");\n  Serial.println(touchValue);\n  \n  // Check if the touch sensor is activated (value will be lower when touched)\n  if (touchValue < 30) {  // You might need to adjust this threshold value\n    Serial.println(\"Touch detected!\");\n    digitalWrite(LED_PIN, HIGH);  // Turn on the LED\n  } else {\n    digitalWrite(LED_PIN, LOW);  // Turn off the LED\n  }\n\n  // Add a small delay to avoid spamming the serial monitor\n  delay(100);\n}\n\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Reading an Analog Pin, convert to digital with built-in ADC\n\nWe will read the signal (middle) pin of the potentiometer, and use the 12-bit built-in Analog to Digital Converter.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#analog-readino\" aria-expanded=\"false\" aria-controls=\"analog-readino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/analog-read.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"analog-readino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\nconst int analog_pin = A4; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\n\n\nvoid setup() {\n  Serial.begin(115200); //\n}\n\nvoid loop() {\n  val = analogRead(analog_pin);  // read the input pin\n  Serial.println(val);          // print value\n  delay(100);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n<details>\n<summary>see diagram</summary>\n![](/archive/figures/diagrams/potentiometer-esp32_bb.png)\n</details>\n\n<details>\n<summary>see wiring scheme</summary>\n![](/archive/figures/diagrams/potentiometer-esp32_schem.png)\n</details>\n\nWhy is the maximum number 4095? What does this have to do with 12-bits?\n\n## Reading an Analog Pin, convert to voltage\n\nUse the same wiring as above. We will convert bits to volts now: $4095 \\text{ bits} = 3.3\\text{ volts}$.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#ADC-to-voltageino\" aria-expanded=\"false\" aria-controls=\"ADC-to-voltageino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/ADC-to-voltage.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"ADC-to-voltageino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\nconst int analog_pin = A4; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\nfloat voltage;\n\nvoid setup() {\n  Serial.begin(115200); //\n}\n\nvoid loop() {\n  val = analogRead(analog_pin);  // read the input pin\n  voltage = (3.3/4095)*val;  // convert to voltage according to ADC\n  Serial.print(\"Voltage: \");\n  Serial.print(voltage);          // print value\n  Serial.println(\" V\");\n  delay(100);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Reading Potentiometer with Analog Pin, convert to angle\n\nPut a piece of cardboard in your potentiometer's slit. Your goal is to build a **calibration curve**, that is, a function that converts reading from something you don't care about (increments from 0 to 4095) to something that you do care about (angle).\n\nThe simplest thing you can do is to measure the increments ($i$) that you get for two given angles (say, $\\theta$ equals zero and 90 degrees). Let's say you measured $(i_1,\\theta_1)$ and $(i_2,\\theta_2)$. If the potentiometer is linear, we will get a linear relationship between angle and increment:\n\n$$\n\\theta = a i + b\n$$\n\nSubstitute these two points in the equation above:\n\n$$\n\\theta_1 = a i_1 + b\n$$ {#eq-linear1}\n\n$$\n\\theta_2 = a i_2 + b\n$$ {#eq-linear2}\n\nNow let's subtract @eq-linear2 from @eq-linear1:\n\n$$\n\\theta_1 - \\theta_2 = a (i_1 - i_2)\n$$ {#eq-linear2}\n\nNow solve for the slope $a$:\n\n$$\na = (\\theta_1 - \\theta_2) / (i_1 - i_2)\n$$ {#eq-linear_slope}\n\nTo find the intercept $b$, just substitute $a$ into @eq-linear1 and solve for $b$:\n\n$$\nb = \\theta_1 - a i_1\n$$ {#eq-linear_intercept}\n\n\nput the lines below in the code we ran before, they are not in the correct place, it is here just so you have an idea how to update the previous code.\n```cpp\nfloat angle, increment, a, b;\n\na = 12345;  // put here what you calculated\nb = 12345;  // put here what you calculated\n\nincrement = analogRead(analog_pin);\nangle = a * increment + b;\n```\n\n\n## Voltage divider\n\nMany sensors have calibration curves that relate their resistance changes to the measured variable. For example, the resistance of photoresistors and thermistors changes with light and temperature, respectively. To handle this, we need to understand **Voltage Dividers**.\n\n![](/archive/figures/voltage_divider.png)\n\n[Check out this great tutorial](https://learn.sparkfun.com/tutorials/voltage-dividers/all)\n\n\nHow to derive the equation for the voltage divider?\n\nFirst, write Ohm's law for the two components in series:\n\n$$\nV_{in} = (R_1 + R_2) I\n$$ {#eq-ohm1}\n\nNow write Ohm's law just for the second component\n\n$$\nV_{out} = R_2 I\n$$ {#eq-ohm2}\n\nNow solve @eq-ohm2 for $I$\n\n$$\nI = \\frac{V_{out}}{R_2}\n$$ {#eq-ohm3}\n\n... and substitute it into @eq-ohm1:\n\n$$\nV_{in} = (R_1 + R_2) \\frac{V_{out}}{R_2}\n$$ {#eq-ohm4}\n\nSolving for $V_{out}$ yields the famous equation for the voltage divider:\n\n$$\nV_{out} = \\frac{R_2}{R_1 + R_2} V_{in}\n$$ {#eq-voltage_divider}\n\nWe usually need to find the value of the resistance $R_2$:\n\n$$\nR_2 = \\frac{V_{in} - V_{out}}{V_{out}} R_2\n$$\n\n\n## Photoresistor\n\n![](/archive/figures/photoresistor.jpg)\n![](/archive/figures/photoresistor-curve.jpg)\n\nPlay with your photoresistor. Measure its resistance when it receives bright light and when it doesn't receive any light at all. This will give you an idea of what value of resistor to use together with your photoresistor when building your voltage divider. Build the following circuit:  \n`3V3` → `resistor` → * `photoresistor` → `GND`  \nConnect pin `A4` to the asterisk, this is your $V_\\text{out}$ in the voltage divider.\n\n[](/tutorials/digital-read-write.html#reading-an-analog-pin-convert-to-digital-with-built-in-adc)\n\nWe will read the increments from the photoresistor, using a code from before:\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#analog-readino\" aria-expanded=\"false\" aria-controls=\"analog-readino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/analog-read.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"analog-readino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\nconst int analog_pin = A4; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\n\n\nvoid setup() {\n  Serial.begin(115200); //\n}\n\nvoid loop() {\n  val = analogRead(analog_pin);  // read the input pin\n  Serial.println(val);          // print value\n  delay(100);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Thermistor\n\n![](/archive/figures/thermistor.jpg)\n![](/archive/figures/thermistor-curve.jpg)\n\n* [Model equations and calculator of constants for thermistors](https://www.thinksrs.com/downloads/programs/therm%20calc/ntccalibrator/ntccalculator.html)\n* [Thermistor tutorial](https://learn.adafruit.com/thermistor/using-a-thermistor?gclid=CjwKCAjw8sCRBhA6EiwA6_IF4aVJKhNGZ1uXLi9KoB-jvnO2kBAEfc7wec8Rc3JcZuQGs_f4GHzYKRoCxxoQAvD_BwE)\n\n![](/archive/figures/thermistor-table1.png)\n![](/archive/figures/thermistor-table2.png)\n\nWe will use the $\\beta$ model\n\n$$\nR = R_{25} \\exp\\left[ \\beta \\left(\\frac{1}{T} - \\frac{1}{298.15} \\right) \\right],\n$$\n\nwhere\n\n* $R$ is given in ohms,\n* $R_{25}$ is the resistance for 25 °C,\n* $T$ is temperature in Kelvin.\n\nOf course, we want the temperature (°C) as a function of the resistance:\n\n$$\nT = \\left[ \\frac{1}{\\beta} \\ln\\left(\\frac{R}{R_{25}}\\right) + \\frac{1}{298.15} \\right]^{-1} - 273.15\n$$\n\n\n<div class=\"alert alert-danger\">\nFor our thermistor,\n$$\n\\beta = 4150\n$$\n</div>\n\n\n[Download Data Sheet](/archive/teaching-material/thermistor-datasheet-NTCM-10K-B4150.pdf)\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#thermistorino\" aria-expanded=\"false\" aria-controls=\"thermistorino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/thermistor.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"thermistorino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n// Thermistor \n// reading the temperature via the ESP32's ADC\n\nconst int analog_pin = A4; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\nfloat v2; // variable to store the voltage of v2\nint r1 = 10000; // R1 value (in the voltage divider)\nfloat v1 = 3.3; // V1 value\nint b_val = 4150; // B value of the resistor (from the data sheet)\nfloat r2; // variable to store the resistance of r2 (thermistor resistance)\nfloat t; // variable to store the temperature\nint adc_steps = 4095; // the number of increments our ADC has (ESP32 = 12bit)\nfloat r_25 = 10000; // the thermistor resistance at 25C (from the data sheet)\n\n// function to convert resistance to temperature according to the b value\n// equation in this link:\n// https://www.thinksrs.com/downloads/programs/therm%20calc/ntccalibrator/ntccalculator.html\nfloat resistance_to_temperature(int b, float r, float r_25) {\n  return b/(log(r/r_25)+(b/298.15))-273.15;\n}\n\nvoid setup() {\n  Serial.begin(115200); //\n}\n\nvoid loop() {\n  val = analogRead(analog_pin);  // read the input pin (reading v2)\n  v2 = (v1/adc_steps)*val;  // convert to voltage of v2 according to ADC\n  r2 = (v2*r1)/(v1-v2);\n  t = resistance_to_temperature(b_val, r2, r_25);\n  Serial.print(\"Temperature: \");\n  Serial.print(t);          // print temperature\n  Serial.println(\" C\");\n  delay(100);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n![](/archive/figures/thermistor-agrotech-schematic.png)\n\n![](/archive/figures/thermistor-agrotech-breadboard.png)\n\n\n\n----\n\n<script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n\n<script type=\"text/javascript\">\nfunction toggle_icon_show_content(Show_Hide_Id,Icon_Id) {\n    $(\"#\"+Icon_Id).toggleClass('fa-plus-square fa-minus-square')\n    $(\"#\"+Show_Hide_Id).slideToggle('slow');\n}\n</script>\n\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js\"></script>\n\n",
    "supporting": [
      "digital-read-write_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}