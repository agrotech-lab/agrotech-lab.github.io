{
  "hash": "e224ca9fc8e63a69c648e37d7e7df93a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: ESP-NOW\necho: false\nexecute:\n  freeze: auto\n---\n\n<!-- ---\ntitle: \"\"\necho: false\njupyter: python3\nsection-divs: false\n--- -->\n\n\n\nHere is an excellent introduction to what ESP-NOW is about. [Read this](https://randomnerdtutorials.com/esp-now-esp32-arduino-ide/).\n\nThis tutorial is heavily based on the tutorial  \n[\"Receive Data from Multiple Boards (many-to-one)\"](https://randomnerdtutorials.com/esp-now-many-to-one-esp32/)\n\n![](/archive/figures/ESP-NOW-ESP32-Receive-Data-Multiple-Boards-Many-to-One-Arduino-IDE.jpg.webp)\n\n## Find what the receiver MAC address is\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#esp_now_mac_addressino\" aria-expanded=\"false\" aria-controls=\"esp_now_mac_addressino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/esp_now_mac_address.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"esp_now_mac_addressino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n// Complete Instructions to Get and Change ESP MAC Address: https://RandomNerdTutorials.com/get-change-esp32-esp8266-mac-address-arduino/\n\n#ifdef ESP32\n  #include <WiFi.h>\n#else\n  #include <ESP8266WiFi.h>\n#endif\n\nvoid setup(){\n  Serial.begin(115200);\n  Serial.println();\n  Serial.print(\"ESP Board MAC Address:  \");\n  Serial.println(WiFi.macAddress());\n}\n \nvoid loop(){\n\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Sender code\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#esp_now_senderino\" aria-expanded=\"false\" aria-controls=\"esp_now_senderino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/esp_now_sender.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"esp_now_senderino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n/*********\n  Rui Santos\n  Complete project details at https://RandomNerdTutorials.com/esp-now-many-to-one-esp32/\n  \n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files.\n  \n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n*********/\n\n#include <esp_now.h>\n#include <WiFi.h>\n\n// REPLACE WITH THE RECEIVER'S MAC Address\n// This is the slave MAC address\n// 40:22:D8:66:8E:2C\n// this is how you have to write it\nuint8_t broadcastAddress[] = {0x40, 0x22, 0xD8, 0x66, 0x8E, 0x2C};\n\n// Structure example to send data\n// Must match the receiver structure\ntypedef struct struct_message {\n    int id; // must be unique for each sender board\n    int x;\n    int y;\n} struct_message;\n\n// Create a struct_message called myData\nstruct_message myData;\n\n// Create peer interface\nesp_now_peer_info_t peerInfo;\n\n// callback when data is sent\nvoid OnDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {\n  Serial.print(\"\\r\\nLast Packet Send Status:\\t\");\n  Serial.println(status == ESP_NOW_SEND_SUCCESS ? \"Delivery Success\" : \"Delivery Fail\");\n}\n \nvoid setup() {\n  // Init Serial Monitor\n  Serial.begin(115200);\n\n  // Set device as a Wi-Fi Station\n  WiFi.mode(WIFI_STA);\n\n  // Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n\n  // Once ESPNow is successfully Init, we will register for Send CB to\n  // get the status of Trasnmitted packet\n  esp_now_register_send_cb(OnDataSent);\n  \n  // Register peer\n  memcpy(peerInfo.peer_addr, broadcastAddress, 6);\n  peerInfo.channel = 0;  \n  peerInfo.encrypt = false;\n  \n  // Add peer        \n  if (esp_now_add_peer(&peerInfo) != ESP_OK){\n    Serial.println(\"Failed to add peer\");\n    return;\n  }\n}\n \nvoid loop() {\n  // Set values to send\n  myData.id = 1;\n  myData.x = write here an integer number you like //random(0,50);\n  myData.y = write here an integer number you like //random(0,50);\n\n  // Send message via ESP-NOW\n  esp_err_t result = esp_now_send(broadcastAddress, (uint8_t *) &myData, sizeof(myData));\n   \n  if (result == ESP_OK) {\n    Serial.println(\"Sent with success\");\n  }\n  else {\n    Serial.println(\"Error sending the data\");\n  }\n  delay(10000);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Receiver code\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#esp_now_receiverino\" aria-expanded=\"false\" aria-controls=\"esp_now_receiverino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/esp_now_receiver.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"esp_now_receiverino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n#include <esp_now.h>\n#include <WiFi.h>\n\n// Structure example to receive data\n// Must match the sender structure\ntypedef struct struct_message {\n  int id;\n  int x;\n  int y;\n}struct_message;\n\n// Create a struct_message called myData\nstruct_message myData;\n\n// Create a structure to hold the readings from each board\nstruct_message board1;\nstruct_message board2;\nstruct_message board3;\n\n// Create an array with all the structures\nstruct_message boardsStruct[3] = {board1, board2, board3};\n\n// callback function that will be executed when data is received\nvoid OnDataRecv(const uint8_t * mac_addr, const uint8_t *incomingData, int len) {\n  char macStr[18];\n  Serial.print(\"Packet received from: \");\n  snprintf(macStr, sizeof(macStr), \"%02x:%02x:%02x:%02x:%02x:%02x\",\n           mac_addr[0], mac_addr[1], mac_addr[2], mac_addr[3], mac_addr[4], mac_addr[5]);\n  Serial.println(macStr);\n  memcpy(&myData, incomingData, sizeof(myData));\n  Serial.printf(\"Board ID %u: %u bytes\\n\", myData.id, len);\n  // Update the structures with the new incoming data\n  boardsStruct[myData.id-1].x = myData.x;\n  boardsStruct[myData.id-1].y = myData.y;\n  Serial.printf(\"x value: %d \\n\", boardsStruct[myData.id-1].x);\n  Serial.printf(\"y value: %d \\n\", boardsStruct[myData.id-1].y);\n  Serial.println();\n}\n \nvoid setup() {\n  //Initialize Serial Monitor\n  Serial.begin(115200);\n  \n  //Set device as a Wi-Fi Station\n  WiFi.mode(WIFI_STA);\n\n  //Init ESP-NOW\n  if (esp_now_init() != ESP_OK) {\n    Serial.println(\"Error initializing ESP-NOW\");\n    return;\n  }\n  \n  // Once ESPNow is successfully Init, we will register for recv CB to\n  // get recv packer info\n  esp_now_register_recv_cb(OnDataRecv);\n}\n \nvoid loop() {\n  // Acess the variables for each board\n  /*int board1X = boardsStruct[0].x;\n  int board1Y = boardsStruct[0].y;\n  int board2X = boardsStruct[1].x;\n  int board2Y = boardsStruct[1].y;\n  int board3X = boardsStruct[2].x;\n  int board3Y = boardsStruct[2].y;*/\n\n  delay(10000);  \n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n",
    "supporting": [
      "esp_now_files/figure-html"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}