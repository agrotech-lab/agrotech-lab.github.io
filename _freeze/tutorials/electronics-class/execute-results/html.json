{
  "hash": "1daa58730607822f56ad801d85d1cf4b",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: Electronics Class\necho: false\nexecute:\n  freeze: auto\n---\n\n![](https://cdn.sparkfun.com/assets/6/e/8/3/c/51f93d85757b7f2049270817.png)\n\n## Presentation\n\n[Download .pptx <span class=\"iconify\" data-icon=\"el:download-alt\"></span>](/archive/teaching-material/electronics-class.pptx)\n\n<object data=\"/archive/teaching-material/electronics-class.pdf\" width=\"800\" height=\"500\" type='application/pdf'></object>\n\n[Pin information for ESP32](https://randomnerdtutorials.com/esp32-pinout-reference-gpios/)\n\n----\n\n<!-- ---\ntitle: \"\"\necho: false\njupyter: python3\nsection-divs: false\n--- -->\n\n\n\n## Digital Write\n\nUse the following code to activate LED pin.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#digital-writeino\" aria-expanded=\"false\" aria-controls=\"digital-writeino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/digital-write.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"digital-writeino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\nint LED_pin = 13;\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_pin as an output.\n  pinMode(LED_pin, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalWrite(LED_pin, HIGH);   // turn the LED on (HIGH is the voltage level)\n  delay(1000);                       // wait for a second\n  digitalWrite(LED_pin, LOW);    // turn the LED off by making the voltage LOW\n  delay(1000);                       // wait for a second\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## PWM with ESP32\n\nPulse-width modulation (PWM) is a method of controlling the average power delivered by an electrical signal. The average value of voltage (and current) fed to the load is controlled by switching the supply between 0 and 100% at a rate faster than it takes the load to change significantly. **PWM is a technique for getting analog results with digital means.** Digital control is used to create a square wave, a signal switched between on and off. This on-off pattern can simulate voltages in between the full Vcc of the board and off by changing the portion of time the signal spends on versus the time that the signal spends off. PWM is used in many applications such as controlling motor speed, heat output of heaters and variable speed fan controllers.\n\n![](https://cdn.sparkfun.com/assets/f/9/c/8/a/512e869bce395fbc64000002.JPG)\n\nUse the following code to activate LED pin with PWM.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#PWM-basicino\" aria-expanded=\"false\" aria-controls=\"PWM-basicino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/PWM-basic.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"PWM-basicino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n// the number of the LED pin\nconst int ledPin = 13;  // 13 corresponds to GPIO13\n\n// setting PWM properties\nconst int freq = 5000;\nconst int ledChannel = 0;\nconst int resolution = 8;\n \nvoid setup(){\n  // configure LED PWM functionalitites\n  ledcSetup(ledChannel, freq, resolution);\n  \n  // attach the channel to the GPIO to be controlled\n  ledcAttachPin(ledPin, ledChannel);\n}\n \nvoid loop(){\n  // increase the LED brightness\n  for(int dutyCycle = 0; dutyCycle <= 255; dutyCycle++){   \n    // changing the LED brightness with PWM\n    ledcWrite(ledChannel, dutyCycle);\n    delay(15);\n  }\n\n  // decrease the LED brightness\n  for(int dutyCycle = 255; dutyCycle >= 0; dutyCycle--){\n    // changing the LED brightness with PWM\n    ledcWrite(ledChannel, dutyCycle);   \n    delay(15);\n  }\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Reading an Analog Pin\n\nUse the following code to read an analog pin.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#analog-readino\" aria-expanded=\"false\" aria-controls=\"analog-readino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/analog-read.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"analog-readino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\nint analog_pin = 32; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\n\n\nvoid setup() {\n  Serial.begin(9600); //\n}\n\nvoid loop() {\n  val = analogRead(analog_pin);  // read the input pin\n  Serial.println(val);          // print value\n  delay(100);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## ADC to voltage\n\nUse the following code to convert ADC reading to voltage.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#ADC-to-voltageino\" aria-expanded=\"false\" aria-controls=\"ADC-to-voltageino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/ADC-to-voltage.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"ADC-to-voltageino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\nint analog_pin = 32; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\nfloat voltage;\n\nvoid setup() {\n  Serial.begin(9600); //\n}\n\nvoid loop() {\n  val = analogRead(analog_pin);  // read the input pin\n  voltage = (3.3/4095)*val;  // convert to voltage according to ADC\n  Serial.print(\"Voltage: \");\n  Serial.print(voltage);          // print value\n  Serial.println(\" V\");\n  delay(100);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Potentiometer and PWM\n\nUse the following code to control PWM with potentiometer and dim the LED.\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#potentiometer-PWMino\" aria-expanded=\"false\" aria-controls=\"potentiometer-PWMino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/potentiometer-PWM.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"potentiometer-PWMino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n// the number of the LED pin\nconst int ledPin = 13;  // 13 corresponds to GPIO13\n\nint analog_pin = 32; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\n\n// setting PWM properties\nconst int freq = 5000;\nconst int ledChannel = 0;\nconst int resolution = 12;\n \nvoid setup(){\n  Serial.begin(9600);\n    \n  // configure LED PWM functionalitites\n  ledcSetup(ledChannel, freq, resolution);\n  \n  // attach the channel to the GPIO to be controlled\n  ledcAttachPin(ledPin, ledChannel);\n}\n \nvoid loop(){\n    val = analogRead(analog_pin);  // read the input pin\n    Serial.println(val);          // print value\n    ledcWrite(ledChannel, val);\n    delay(15);\n  }\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n## Thermistor\n\n[Download Data Sheet](/archive/teaching-material/thermistor-datasheet-NTCM-10K-B4150.pdf)\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#thermistor_b_valino\" aria-expanded=\"false\" aria-controls=\"thermistor_b_valino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/thermistor_b_val.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"thermistor_b_valino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n// Thermistor \n// reading the temperature via the ESP32's ADC\n\nint analog_pin = 32; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\nfloat v2; // variable to store the voltage of v2\nint r1 = 10000; // R1 value (in the voltage divider)\nfloat v1 = 3.3; // V1 value\nint b_val = 4150; // B value of the resistor (from the data sheet)\nfloat r2; // variable to store the resistance of r2 (thermistor resistance)\nfloat t; // variable to store the temperature\nint adc_steps = 4095; // the number of increments our ADC has (ESP32 = 12bit)\nfloat r_25 = 10000; // the thermistor resistance at 25C (from the data sheet)\n\n// function to convert resistance to temperature according to the b value\n// equation in this link:\n// https://www.thinksrs.com/downloads/programs/therm%20calc/ntccalibrator/ntccalculator.html\nfloat resistance_to_temperature(int b, float r, float r_25) {\n  return b/(log(r/r_25)+(b/298.15))-273.15;\n}\n\nvoid setup() {\n  Serial.begin(9600); //\n}\n\nvoid loop() {\n  val = analogRead(analog_pin);  // read the input pin (reading v2)\n  v2 = (v1/adc_steps)*val;  // convert to voltage of v2 according to ADC\n  r2 = (v2*r1)/(v1-v2);\n  t = resistance_to_temperature(b_val, r2, r_25);\n  Serial.print(\"Temperature: \");\n  Serial.print(t);          // print temperature\n  Serial.println(\" C\");\n  delay(100);\n}\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n![](/archive/figures/thermistor-agrotech-schematic.png)\n\n![](/archive/figures/thermistor-agrotech-breadboard.png)\n\n",
    "supporting": [
      "electronics-class_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}