{
  "hash": "14b34d9d04d4f0a622331d363f0fac1d",
  "result": {
    "markdown": "---\ntitle: MQTT example\necho: false\nexecute:\n  freeze: auto\n---\n\n<!-- ---\ntitle: \"\"\necho: false\njupyter: python3\nsection-divs: false\n--- -->\n\n\n\n![](https://mqtt.org/assets/downloads/mqtt-logo.png)\n\n## Intro\n\nEach FireBeetle board connects to Wi-Fi and subscribes to an MQTT topic. Whenever a new message is published to the topic, the board receives it and changes the color of its built-in RGB LED accordingly.\n\n### MQTT Topic\n\nThe board listens to the following topic:\n\n```\nagrotech/mqtt_tutorial/LED\n```\n\nYou can publish messages to this topic using an MQTT client, such as the <a href=\"https://mqttx.app/web-client\" target=\"_blank\">MQTTX Web Client</a>. Make sure to connect to the broker `broker.emqx.io` on port `1883`.\n\n### Supported Commands\n\nYou can send color commands in various formats:\n\n#### ðŸ”¤ Named Colors\nYou can use full names or single-letter shorthands (case-insensitive):\n\n| Command      | Resulting Color        |\n|--------------|------------------------|\n| `red` or `r` | ðŸ”´ Red                 |\n| `green` or `g` | ðŸŸ¢ Green              |\n| `blue` or `b` | ðŸ”µ Blue               |\n| `white` or `w` | âšª White              |\n| `yellow` or `y` | ðŸŸ¡ Yellow           |\n| `cyan` or `c` | ðŸŸ¦ Cyan               |\n| `magenta` or `m` | ðŸŸ£ Magenta         |\n| `off` or `black` | âš« LED Off         |\n\n#### ðŸŽ¨ Custom RGB Triplets\nYou can also send a custom color as a comma-separated RGB value, e.g.:\n\n```\n255,100,0\n```\n\nThis would set the LED to an orange-like color. The values should range from `0` to `255`.\n\n---\n\nThis setup is ideal for remote visual feedback or synchronized color indicators across multiple ESP32 boards on the same MQTT topic.\n\n## LED subscribe\n\n```{=html}\n<button class=\"btn btn-outline-dark  rounded\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#MQTT_led_subscribe_exampleino\" aria-expanded=\"false\" aria-controls=\"MQTT_led_subscribe_exampleino\">\n    <i class=\"bi bi-toggles\"></i> Toggle code\n    </button>\n     <a class=\"btn btn-outline-dark rounded\", href=\"/archive/code/MQTT_led_subscribe_example.ino\" download target=\"_blank\" rel=\"noopener noreferrer\">\n        <i class=\"bi bi-download\"></i> Download code\n    </a>\n```\n```{=html}\n\n            <div class=\"collapse\" id=\"MQTT_led_subscribe_exampleino\">\n            <div class=\"card card-body border-0\">\n        \n```\n```{.c code-line-numbers=\"1\"}\n#include <Arduino.h>\n#include <WiFi.h>\n#include <PubSubClient.h>\n#include <Adafruit_NeoPixel.h>\n\n#define LED_PIN    5  // built-in WS2812 RGB on FireBeetle 2 = GPIO5 (D8)\n#define NUM_LEDS   1\n#define BRIGHTNESS 50\n\nconst char* ssid = \"erez\";         // <-- change this\nconst char* password = \"arduino1\"; // <-- change this\nconst char* mqttServer = \"broker.emqx.io\";  // <== NEW BROKER\nint mqttPort = 1883;\nconst char* mqttTopic = \"agrotech/mqtt_tutorial/LED\";\n\nWiFiClient wifiClient;\nPubSubClient mqttClient(wifiClient);\nAdafruit_NeoPixel strip(NUM_LEDS, LED_PIN, NEO_GRB + NEO_KHZ800);\n\nString msgString;\n\nvoid setColor(uint8_t r, uint8_t g, uint8_t b) {\n  strip.setPixelColor(0, strip.Color(r, g, b));\n  strip.show();\n}\n\nvoid parseColor(String color) {\n  color.trim();\n  color.toLowerCase();\n\n  // named or shorthand colors\n  if (color == \"r\" || color == \"red\") setColor(255, 0, 0);\n  else if (color == \"g\" || color == \"green\") setColor(0, 255, 0);\n  else if (color == \"b\" || color == \"blue\") setColor(0, 0, 255);\n  else if (color == \"w\" || color == \"white\") setColor(255, 255, 255);\n  else if (color == \"y\" || color == \"yellow\") setColor(255, 255, 0);\n  else if (color == \"m\" || color == \"magenta\") setColor(255, 0, 255);\n  else if (color == \"c\" || color == \"cyan\") setColor(0, 255, 255);\n  else if (color == \"off\" || color == \"black\") setColor(0, 0, 0);\n  else if (color.indexOf(',') != -1) {\n    // RGB triplet: \"100,200,30\"\n    int r = color.substring(0, color.indexOf(',')).toInt();\n    int g = color.substring(color.indexOf(',') + 1, color.lastIndexOf(',')).toInt();\n    int b = color.substring(color.lastIndexOf(',') + 1).toInt();\n    setColor(r, g, b);\n  }\n  else {\n    Serial.println(\"Unknown color command\");\n  }\n}\n\nvoid callback(char* topic, byte* message, unsigned int length) {\n  msgString = String((char*)message, length);\n  Serial.print(\"MQTT message received: \");\n  Serial.println(msgString);\n  parseColor(msgString);\n}\n\nvoid setupMQTT() {\n  mqttClient.setServer(mqttServer, mqttPort);\n  mqttClient.setCallback(callback);\n}\n\nvoid reconnect() {\n  Serial.println(\"Connecting to MQTT Broker...\");\n  while (!mqttClient.connected()) {\n    String clientId = \"ESP32Client-\" + String(random(0xffff), HEX);\n    if (mqttClient.connect(clientId.c_str())) {\n      Serial.println(\"Connected to MQTT.\");\n      mqttClient.subscribe(mqttTopic);\n    } else {\n      Serial.print(\".\");\n      delay(1000);\n    }\n  }\n}\n\nvoid setup() {\n  Serial.begin(115200);\n\n  WiFi.begin(ssid, password);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\\nConnected to WiFi.\");\n\n  strip.begin();\n  strip.setBrightness(BRIGHTNESS);\n  strip.show(); // off\n\n  setupMQTT();\n}\n\nvoid loop() {\n  if (!mqttClient.connected()) reconnect();\n  mqttClient.loop();\n}\n\n```\n\n```{=html}\n\n            </div>\n            </div>\n            \n```\n\n\n",
    "supporting": [
      "mqtt_example_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}