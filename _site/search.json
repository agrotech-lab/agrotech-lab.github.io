[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "agrotech lab",
    "section": "",
    "text": "Faculty of Agriculture, Food and Environment\nHebrew University of Jerusalem — Rehovot Campus"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "Since this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "content.html",
    "href": "content.html",
    "title": "Content",
    "section": "",
    "text": "Wednesdays, from 17:00 to 20:00\n In the lab next to the “Ground Water” seminar room, 1st floor\n Map"
  },
  {
    "objectID": "content.html#tutorials",
    "href": "content.html#tutorials",
    "title": "Content",
    "section": " Tutorials",
    "text": "Tutorials\n\nArduino intro & useful links\nIntro to Arduino code\nBasic Electronics Concepts\nElectronics Class\nSensor Modules and Thingspeak\nBasic Data Analysis with Python and Matlab\nWater and Energy Balances\nPsychrometric Chart and Evaporative cooling\nSoldering and Wires"
  },
  {
    "objectID": "content.html#resources",
    "href": "content.html#resources",
    "title": "Content",
    "section": " Resources",
    "text": "Resources\n\n Equipment\nClick for a list of the main components used in this course.\n\n\n Github\nMake an account on Github. Create a repository called “agrotech” or whatever you else want to call it. You can upload to this repository your code, data, diagrams, pictures, markdown, etc. In the end of the semester you will upload your project report as a Jupyter Notebook file.\nFrom now on, your main Github page can be your “geek face” on the internet. Make a clean and simple readme.md, telling the world who you are and what you do.\n\n\n Jupyter Notebook\nThe easiest way to install Python (+ Jupyter Notebook, Spyder, PyCharm, JupyterLab, etc) on any OS is to download Anaconda. Jupyter Notebook is a versatile environment that allows you to write code and documentation in one single file, taking advantage of Markdown. Click for a short and a long markdown cheat sheet.\n\n\n Fritzing\nFritzing is a nice software that lets you easily draw your own circuits and diagrams.\n\n\n\n Very useful links\n\nOregon State’s OPEnS Lab. Github"
  },
  {
    "objectID": "posts/tutorials/index.html",
    "href": "posts/tutorials/index.html",
    "title": "Tutorials",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "posts/tutorials/intro.html",
    "href": "posts/tutorials/intro.html",
    "title": "insert ino code",
    "section": "",
    "text": "Installing the ESP32 Board in Arduino IDE\nGo to this website, follow steps 1–5 in the installation process. (Don’t do “Testing the Installation”)\n\nOnce you’re done with the installation, go to\nTools > Board > ESP32 Arduino, and choose NodeMCU-32S.\nGo to Tools > Port, take a look at what you have there. Now connect your ESP32 to the computer, go to Tools > Port again, and choose the new option that appeared.\n\nThat’s it. Congratulations.\n\n\n\nBlink\nIt’s time to run a first example.\n\nGo to File > Examples > 01.Basics, click on Blink.\nPress the  “right arrow” button on the top left to upload the code onto the ESP32.\nWhen you see “Connecting” on the bottom of the screen, press the right button on the ESP32.\n\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)\n  delay(1000);                       // wait for a second\n  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW\n  delay(1000);                       // wait for a second\n}\n\n            \n            \n            \n\n\n\nPrinting increasing numbers\nUpload the following code to your ESP32, then click on the  on the top right corner. This is called “Serial Monitor”.\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n// This is a one-line comment\n\n/*\nThis\ncomment\nspans\nmany\nrows\n*/\n\nint num = 0;              // number \n\nvoid setup() {\n  // initialize serial communication with computer:\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  // print num and break line\n  Serial.println(num);\n  // print num, don't break line\n  // Serial.print(num);\n  delay(1000);        // 1000 ms delay\n  num = num + 1;      // increase num by 1\n}\n\n            \n            \n            \n\n\n\nPrinting random numbers, then plotting!\n\nUpload the following code to your ESP32.\nOpen the Serial Monitor (). Now close it, and\nGo to Tools > Serial Plotter.\n\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \nint num1 = 0, num2 = 0;\n\nvoid setup() {\n  // initialize serial communication with computer:\n  Serial.begin(9600);\n}\n\nvoid loop() {\n  // random(min, max)\n  num1 = num1 + random(-0, 5);\n  num2 = num2 + random(-10, 10);\n  // print num1, then tab, then num2, then break line\n  Serial.print(num1);\n  Serial.print(\"\\t\");\n  Serial.println(num2);\n  delay(100);        // 1000 ms delay\n}\n\n            \n            \n            \n\n\n\nFloats, functions, conditionals\nWe will now learn how to deal with floats, how to define our own functions, and how to write conditionals (if/else).\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \nfloat t = 0, x1 = 0, x2 = 0, x3 = 0;\n\nvoid setup() {\n  // initialize serial communication with computer:\n  Serial.begin(9600);\n}\n\nfloat my_sine(float time) {\n  return sin(time);\n}\n\nfloat my_cosine(float time) {\n  float double_time;              // you can define internal variables,\n  double_time = 2.0 * time;       // write as many commands as you want\n  return 2.0 * cos(double_time);  // in the end, return float\n}\n\nvoid loop() {\n  x1 = my_sine(t);\n  x2 = my_cosine(t);\n  if (x1 > 0) {\n    x3 = -1.0;\n  } else {\n    x3 = 1.0;\n  }\n  Serial.print(\"sin:\"); Serial.print(x1); Serial.print(\"\\t\");\n  Serial.print(\"cos:\"); Serial.print(x2); Serial.print(\"\\t\");\n  Serial.print(\"square:\"); Serial.print(x3);\n  Serial.println();\n  delay(50);        // 1000 ms delay\n  t += 0.05;\n}\n\n            \n            \n            \n\n\n\nWiFi, read time\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n//-----------------------------------------------------------------------------------\n//  WIFI setup:\n\n#include <WiFi.h>\n\nconst char* ssid = \"HUJI-guest\"; // your wifi SSID name\nconst char* password = \"\" ;// wifi pasword\nString formattedTime;\nfloat r = 0, m = 0;\n\nWiFiClient client;\n\n//-------------------------------------------------------------------------------------\n// Set time\n#include <NTPClient.h>\n#include <WiFiUdp.h>\n\nconst long utcOffsetInSeconds = 3600 * 2; // For UTC +2.00 : 2 * 60 * 60\n\nchar daysOfTheWeek[7][12] = {\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"};\n\n// Define NTP Client to get time\nWiFiUDP ntpUDP;\nNTPClient timeClient(ntpUDP, \"pool.ntp.org\", utcOffsetInSeconds);\n\nint time_s ; // variable for the second\n\n\nvoid setup() {\n  Serial.begin(9600);\n  //---------------------------------------------------------------------------\n  //wifi conection:\n  WiFi.disconnect();\n  delay(10);\n  WiFi.begin(ssid, password);\n\n  Serial.println();\n  Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(ssid);\n\n  WiFi.begin(ssid, password);\n\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println(\"\");\n  Serial.print(\"NodeMcu connected to wifi...\");\n  Serial.println(ssid);\n  Serial.println();\n  //-----------------------------------------------------------------------\n  // stings for time:\n  timeClient.begin();\n\n}\n\nvoid loop() {\n  timeClient.update();\n  time_s = timeClient.getSeconds();\n  if (time_s == 0) {\n    formattedTime = timeClient.getFormattedTime();\n    Serial.print(\"A new minute has started!\\nFull time = \");\n    Serial.println(formattedTime);\n  }\n  \n  Serial.print(\"s = \");\n  Serial.print(time_s);\n  r = random(10, 20);\n  m += r;\n  Serial.print(\"\\trand = \");\n  Serial.print(r);\n  Serial.print(\"\\trunning sum = \");\n  Serial.println(m);\n  if (time_s%10==9) {\n    Serial.print(\"Average  = \");\n    Serial.println(m / 10);\n    m = 0;\n  }\n  \n  delay(1000);\n}"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "The goal of this course is to give a first hands-on experience with experimental design data collection, analysis and reporting. We want students to creatively engage with their projects, finding by themselves solutions to the challenges they encounter. The role of the teaching staff will be to consult and advise, not spoon-feed solutions.\nThe main values we would like to promote: curiosity, independence, creativity, and a can-do attitude."
  },
  {
    "objectID": "about.html#guiding-questions-and-description",
    "href": "about.html#guiding-questions-and-description",
    "title": "About",
    "section": " Guiding Questions and Description",
    "text": "Guiding Questions and Description\nThis course deals with the design of a simple experiment focusing on data collection and analysis. The guiding questions throughout this course are:\n\nWhat is my research question?\nWhat data is needed?\nHow will data be collected?\nHow will data be analyzed?\nHow will data be reported?\n\nThroughout the course, students will critically engage with each of these questions, and as a case study, will build an experiment to monitor the flow of water in the soil-plant-atmosphere continuum.\nThe monitoring and control systems to be build are based on the ESP32, a versatile (and cheap!) microcontroller. The ESP32 is similar to the Arduino, with the advantage that it has inbuilt Wi-Fi and Bluetooth features."
  },
  {
    "objectID": "about.html#contact",
    "href": "about.html#contact",
    "title": "About",
    "section": " Contact",
    "text": "Contact\nErez Feuer: erez.feuer@mail.huji.ac.il\nYair Mau: yair.mau@mail.huji.ac.il"
  },
  {
    "objectID": "software.html",
    "href": "software.html",
    "title": "Software",
    "section": "",
    "text": "Blink\n\n\nSee source code //  Download code\n\n\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)\n  delay(1000);                       // wait for a second\n  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW\n  delay(1000);                       // wait for a second\n}\n\n\n\nstam\n\n\nSee source code  Download\n\n\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)\n  delay(1000);                       // wait for a second\n  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW\n  delay(1000);                       // wait for a second\n}\n\n\n\n\n\nSee source code\n\n\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_BUILTIN as an output.\n  pinMode(LED_BUILTIN, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalWrite(LED_BUILTIN, HIGH);   // turn the LED on (HIGH is the voltage level)\n  delay(1000);                       // wait for a second\n  digitalWrite(LED_BUILTIN, LOW);    // turn the LED off by making the voltage LOW\n  delay(1000);                       // wait for a second\n}\n\n\n\n\n\nCollapsable anything\n\n@article{kramer2022sustainability,\n  doi = {10.1029/2021WR031307},\n  url = {https://doi.org/10.1029/2021WR031307},\n  year = {2022},\n  author = {Isaac Kramer and Yuval Bayer and Yair Mau},\n  title = {The Sustainability of Treated Wastewater Irrigation: The Impact of Hysteresis on Saturated Soil Hydraulic Conductivity},\n  journal = {Water Resources Research},\n}\n\n Isaac Kramer, Yuval Bayer, and Yair Mau. The Sustainability of Treated Wastewater Irrigation: The Impact of Hysteresis on Saturated Soil Hydraulic Conductivity. Water Resources Research, 2022.     doi: 10.1029/2021WR031307     doi: 10.1029/2021WR031307\n\n\nbibtex    doi: 10.1029/2021WR031307\n\n@article{kramer2022sustainability,\n    doi = {10.1029/2021WR031307},\n    url = {https://doi.org/10.1029/2021WR031307},\n    year = {2022},\n    author = {Isaac Kramer and Yuval Bayer and Yair Mau},\n    title = {The Sustainability of Treated Wastewater Irrigation: The Impact of Hysteresis on Saturated Soil Hydraulic Conductivity},\n    journal = {Water Resources Research},\n}\n\n Taiwo Adeyemo, Isaac Kramer, Guy J. Levy, and Yair Mau. Salinity and sodicity can cause hysteresis in soil hydraulic conductivity. Geoderma, 2022.     doi: 10.1016/j.geoderma.2022.115765     doi: 10.1016/j.geoderma.2022.115765\n\n\nbibtex    doi: 10.1016/j.geoderma.2022.115765\n\n@article{adeyemo2022salinity,\n    doi = {10.1016/j.geoderma.2022.115765},\n    url = {https://doi.org/10.1016/j.geoderma.2022.115765},\n    year = {2022},\n    month = may,\n    publisher = {Elsevier {BV}},\n    volume = {413},\n    pages = {115765},\n    author = {Taiwo Adeyemo and Isaac Kramer and Guy J. Levy and Yair Mau},\n    title = {Salinity and sodicity can cause hysteresis in soil hydraulic conductivity},\n    journal = {Geoderma}\n}\n\ntidyhte\ntidyhte provides tidy semantics for estimation of heterogeneous treatment effects through the use of Kennedy’s (n.d.) doubly-robust learner.\nThe goal of tidyhte is to use a sort of “recipe” design. This should (hopefully) make it extremely easy to scale an analysis of HTE from the common single-outcome / single-moderator case to many outcomes and many moderators. The configuration of tidyhte should make it extremely easy to perform the same analysis across many outcomes and for a wide-array of moderators. It’s written to be fairly easy to extend to different models and to add additional diagnostics and ways to output information from a set of HTE estimates.\n\n        \n        Website\n     \n        \n        Github"
  },
  {
    "objectID": "about.html#course-goals",
    "href": "about.html#course-goals",
    "title": "About",
    "section": " Course goals",
    "text": "Course goals\nThe goal of this course is to give a first hands-on experience with experimental design data collection, analysis and reporting. We want students to creatively engage with their projects, finding by themselves solutions to the challenges they encounter. The role of the teaching staff will be to consult and advise, not spoon-feed solutions.\nThe main values we would like to promote: curiosity, independence, creativity, and a can-do attitude."
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Publications",
    "section": "",
    "text": "PDF\n     \n        \n        bibtex\n    \n    \n        \n        Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident.\n        \n    \n    \n\nAnim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident."
  },
  {
    "objectID": "content.html#schedule",
    "href": "content.html#schedule",
    "title": "Content",
    "section": " 2022 Schedule",
    "text": "2022 Schedule\nWednesdays, from 17:00 to 20:00, in the lab next to the “Ground Water” seminar room, 1st floor.  Map."
  },
  {
    "objectID": "projects.html",
    "href": "projects.html",
    "title": "Projects",
    "section": "",
    "text": "Read carefully the instructions. Click here.\n\n\n2022 Final projects\n\n   Ronna Melamed Bat – May Nir\n   Avital Akerman – Elad Greenfeld\n   Nadav Hen – Guy Donagi – David Zingerman\n   Zeev Rozman – Imri Zadak – Alex Evenko-Greenapple\n   Yuval Chemke – Reem Har Levi\n   Peleg Atir – Aviad Mendelovich – Ruth Yitzhaki\n   Amir Sheffer – Yitzchak Kanovsky – Aviv Saadia"
  },
  {
    "objectID": "projects.html#course-goals",
    "href": "projects.html#course-goals",
    "title": "Projects",
    "section": " Course goals",
    "text": "Course goals\nThe goal of this course is to give a first hands-on experience with experimental design data collection, analysis and reporting. We want students to creatively engage with their projects, finding by themselves solutions to the challenges they encounter. The role of the teaching staff will be to consult and advise, not spoon-feed solutions.\nThe main values we would like to promote: curiosity, independence, creativity, and a can-do attitude."
  },
  {
    "objectID": "projects.html#guiding-questions-and-description",
    "href": "projects.html#guiding-questions-and-description",
    "title": "Projects",
    "section": " Guiding Questions and Description",
    "text": "Guiding Questions and Description\nThis course deals with the design of a simple experiment focusing on data collection and analysis. The guiding questions throughout this course are:\n\nWhat is my research question?\nWhat data is needed?\nHow will data be collected?\nHow will data be analyzed?\nHow will data be reported?\n\nThroughout the course, students will critically engage with each of these questions, and as a case study, will build an experiment to monitor the flow of water in the soil-plant-atmosphere continuum.\nThe monitoring and control systems to be build are based on the ESP32, a versatile (and cheap!) microcontroller. The ESP32 is similar to the Arduino, with the advantage that it has inbuilt Wi-Fi and Bluetooth features."
  },
  {
    "objectID": "projects.html#contact",
    "href": "projects.html#contact",
    "title": "Projects",
    "section": " Contact",
    "text": "Contact\nErez Feuer: erez.feuer@mail.huji.ac.il\nYair Mau: yair.mau@mail.huji.ac.il"
  },
  {
    "objectID": "archive/code/basic_python_thingspeak.html",
    "href": "archive/code/basic_python_thingspeak.html",
    "title": "agrotech",
    "section": "",
    "text": "Import packages. If you don’t have a certain package, e.g. ‘newpackage’, just type\npip install newpackage\n\nimport urllib\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\nThis is how you download data from Thingspeak\n\n# define what to download\nchannels = \"1690490\"\nfields = \"1,2,3,4,6,7\"\nminutes = \"30\"\nfilename = \"test.csv\"\n# https://www.mathworks.com/help/thingspeak/readdata.html\n# format YYYY-MM-DD%20HH:NN:SS\nstart = \"2022-05-01%2000:00:00\"\nend = \"2022-05-08%2000:00:00\"\n\n# download using Thingspeak's API\n# url = f\"https://api.thingspeak.com/channels/{channels}/fields/{fields}.csv?minutes={minutes}\"\nurl = f\"https://api.thingspeak.com/channels/{channels}/fields/{fields}.csv?start={start}&end={end}\"\ndata = urllib.request.urlopen(url)\nd = data.read()\n\n# save data to csv\nfile = open(filename, \"w\")\nfile.write(d.decode('UTF-8'))\nfile.close()\n\nYou can load the data using Pandas. Here we create a “dataframe”, which is a fancy name for a table.\n\n# load data\ndf = pd.read_csv(\"test.csv\")\n# rename columns\ndf = df.rename(columns={\"created_at\": \"timestamp\",\n                        \"field1\": \"T1\",\n                        \"field2\": \"RH\",\n                        \"field3\": \"T2\",\n                        \"field4\": \"motion_sensor\",\n                        \"field6\": \"VWC\",\n                        \"field7\": \"VPD\",})\n# set timestamp as index\ndf['timestamp'] = pd.to_datetime(df['timestamp'])\ndf = df.set_index('timestamp')\n\nMake a first graph\n\n%matplotlib widget\n\nfig, ax = plt.subplots(1, figsize=(8,6))\n\nax.plot(df['VPD'])\n# add labels and title\nax.set(xlabel = \"time\",\n       ylabel = \"VPD (kPa)\",\n       title = \"my first graph\")\n# makes slated dates\nplt.gcf().autofmt_xdate()  \n\n\n\n\nShow two columns in the same graph\n\n%matplotlib widget\n\nfig, ax = plt.subplots(1, figsize=(8,6))\n\nax.plot(df['T1'], color=\"tab:blue\", label=\"SHT Temperature\")\nax.plot(df['T2'], color=\"tab:orange\", label=\"DS18B20 Temperature\")\n# add labels and title\nax.set(xlabel = \"Time\",\n       ylabel = \"Temperature (deg C)\",\n       title = \"two sensors\",\n       ylim=[20,35],\n       )\n# makes slated dates\nplt.gcf().autofmt_xdate()\nax.legend(loc=\"upper right\")\n\n<matplotlib.legend.Legend at 0x7fb3c86a52e0>\n\n\n\n\n\nYou can calculate new things and save them as new columns of your dataframe.\n\ndef calculate_es(T):\n    es = np.exp((16.78 * T - 116.9) / (T + 237.3))\n    return es\n\ndef calculate_ed(es, rh):\n    return es * rh / 100.0\n\nes = calculate_es(df['T1'])\ned = calculate_ed(es, df['RH'])\ndf['VPD2'] = es - ed\n\nSee if what you calculated makes sense.\n\n%matplotlib widget\n\nfig, ax = plt.subplots(1, figsize=(8,6))\n\nax.plot(df['VPD'], color=\"tab:red\", label=\"VPD from ESP32\")\nax.plot(df['VPD2'][::100], \"o\", color=\"black\", label=\"VPD from python\")\n# add labels and title\nax.set(xlabel = \"Time\",\n       ylabel = \"VPD (kPa)\",\n       title = \"VPD calculated twice\",\n       ylim=[0,5],\n       )\n# makes slated dates\nplt.gcf().autofmt_xdate()\nax.legend(loc=\"upper right\")\n\n<matplotlib.legend.Legend at 0x7fb3984f8df0>\n\n\n\n\n\nYou might want two y axes.\n\n%matplotlib widget\n\nfig, ax = plt.subplots(1, figsize=(8,6))\n\nax.plot(df['VPD'], color=\"tab:red\", label=\"VPD\")\nplt.gcf().autofmt_xdate()\nax2 = ax.twinx()\nax2.plot(df['T1'], color=\"tab:cyan\", label=\"Temperature\")\nax.set(xlabel = \"Time\",\n       title = \"two y axes\",\n       ylim=[0,5],\n       )\nax.set_ylabel('VPD (kPa)', color='tab:red')\nax.spines['left'].set_color('red')\n\nax2.set_ylabel('Temperature (deg C)', color='tab:cyan')\n\nText(0, 0.5, 'Temperature (deg C)')"
  },
  {
    "objectID": "posts/projects/final-project.html",
    "href": "posts/projects/final-project.html",
    "title": "Final Project",
    "section": "",
    "text": "In the last month of the semester you will pair up with another student to do your Final Project. This project is an opportunity for you to apply all what we learned, to be inovative, and create your own agrotech project. You will have a few weeks to plan, setup and run your projects. At the end of the semester we will have a festive presentation day in which each pair of students will present their projects.\n\n\nPlease consult this Google Spreadsheet to be up-to-date with what’s going on with the various projects. Every team should update this spreadsheet regularly with the relevant information.\n\n\n\nThis year the final projects will all take place in a greenhouse on campus and will share the theme of data logging and control. Each team will focus on a different aspect in the greenhouse, e.g., temperature and RH monitoring, energy balance, irrigation control, plant monitoring, etc. All the data collected will be uploaded to the same Thingspeak account, so everyone will have access to everyone else’s data. The different teams are expected to be in contact and share with each other what they are doing, so that you can exchange ideas and build into each other’s strengths.\n\n\n\nDocumenting your project well is probably one of the most important lessons you will learn. Without documentation your projects will not live on and they will end their life right after the semester is over; you will forget what exactly you did and no one will be able to reproduce what you have done. We don’t want that for our projects…\nThe goal of the Agrotech-Lab course is to create a repository of all the cool projects made over the years. That way the projects will live forever and future students and other people around the world can learn from your work.\nWe require that each team creates a Github page including all the documentation. It should include:\n\nIntroduction: general explanation about the project and its goals\nHardware and assembly: Make the description as detailed as posible. Include many photos, links to order, datasheets etc.\nCode: Provide all code used in this project. Code should be organized with comments throughout explaining it.\nInstructions: How to make and use the project.\nExperinment: Show an example of the project “in action”.\n\nPlese note, the github page is your “final project paper/report”.\n\n\n\nOn the last day, when we meet to show our projects, each team will give a short talk of 5 minutes. During this talk you will touch the following points:\n\nWhat did you do?\nWhy do a project like yours?\nAre there agricultural or other benefits?\nHow did you do it? Hardware and code (no need to go over it, just explain in general).\nWhat did you learn? Show graphs and data analysis.\n\n\n\nPresentation is something you present to others, it does not mean a “Powerpoint presentation”. Your presentation will be solely based on your GitHub repository."
  },
  {
    "objectID": "projects.html#passover-2022-mini-project",
    "href": "projects.html#passover-2022-mini-project",
    "title": "Projects",
    "section": "Passover 2022 mini project",
    "text": "Passover 2022 mini project\nclick here"
  },
  {
    "objectID": "projects.html#borrowing-equipment",
    "href": "projects.html#borrowing-equipment",
    "title": "Projects",
    "section": "Borrowing equipment",
    "text": "Borrowing equipment\nclick here"
  },
  {
    "objectID": "projects.html#arduino-nano",
    "href": "projects.html#arduino-nano",
    "title": "Projects",
    "section": "Arduino Nano",
    "text": "Arduino Nano\nclick here"
  },
  {
    "objectID": "posts/projects/passover-2022-mini-project.html",
    "href": "posts/projects/passover-2022-mini-project.html",
    "title": "Passover 2022 Mini Project",
    "section": "",
    "text": "Some guidelines\nIn this project each one of you will individually create a Thingspeak channel and will upload to it data from an ESP32.\nMinimal requirements: * Measure temperature (using SHT31) * Measure humidity (using SHT31 or BME280) * Calculate VPD * Make use of at least one more “unique” sensor\n\n\n Deadline\nAll Chanels must be live by the 28th of April.\nThe name of the channel MUST be spelled with the prefix “Passover_2022_” and then your first and last name with separated by an underscore.\nFor example: `Passover_2022_Erez_Feuer\nYou MUST provide information regarding your channel in the “description” section which can be found under “channel settings”. This information should include: * location (e.g.: balcony in Rechovot, kitchen in Gan-Yavne, 7th floor bedroom window, etc.), * what the sensors are measuring (including the “unique” sensor/s), and * any other information that you find relevant - the more the better.\nUpload interval should be at least every 3 minutes (not longer). Please don’t upload every second if there is no justification (for example the humidity in the bedroom will change slowly, so no need for rapid measurments).\n\n\n Public view\nWe will be monitoring your Thingspeak channels via the “Public view” section. It is very simple to make your channel public, just check “Share channel view with everyone” under the Sharing tab as you can this in the following image:\n\n\n\n How to power your projects\nOnce the code is uploaded to the ESP32 and every thing works fine, you don’t need your computer anymore, and can use a generic USB charger as a power supply. Don’t worry about the code, it will work as long as the ESP32 has power, because you already uploaded the code to memory.\n\n\nCalculate VPD\n\nThe Vapor Pressure Deficit (VPD, in kPa) is the difference between saturation vapor pressure \\(e_s\\) and actual vapor pressure \\(e_d\\):\n\\[\\text{VPD} = e_s - e_d.\\]\nFor temperatures ranging from 0 to 50 °C, the saturation vapor pressure can be calculated with\n\\[\ne_s = \\exp \\left[ \\frac{16.78\\, T -116.9}{T+237.3} \\right],\n\\]\nand the actual vapor pressure is given by\n\\[\ne_d = e_s \\frac{RH}{100},\n\\]\nwhere \\(RH\\) is the relative humidity (%), and the temperature \\(T\\) in the equations above is in degrees Celcius."
  },
  {
    "objectID": "posts/projects/arduino-nano.html",
    "href": "posts/projects/arduino-nano.html",
    "title": "Arduino Nano",
    "section": "",
    "text": "For those of you that took home an arduino nano to play with, we have a few pointers.\n\n5V vs 3.3V\nWhile ESP32 works on 3.3V, Arduino nano works on 5V. That means that the digitalWrite() function will send 5V to a pin and that the ADC can read voltaged in the 0-5V range (using the function analogRead()).\nIMPORTANT - don’t forget that ESP32 is 3.3V when going back to it from the Arduino. It is important to note that the arduino nano has a 3.3V pin that can be used. Most of the sesnsors we use are compatible with 3.3V so if you use that pin there is less chance of making mistakes later on.\n\n\nADC\nArduino has a 10bit ADC.\n\n\nSettings in the Arduino IDE\nNo need to hold a button on the board when uploading code (Yay!). You will need to change the settings in the Arduino IDE:\nTools -> Board -> \"Arduino Nano\"\nTools -> Processor: \"ATmega328P (Olad Bootloader)\"\nAs you can see in this image:"
  },
  {
    "objectID": "posts/projects/borrowing-equipment.html",
    "href": "posts/projects/borrowing-equipment.html",
    "title": "Borrowing equipment",
    "section": "",
    "text": "About the sheet & some guidelines:\n\nEach unique component has its own column, including its name, brief description and link to a picture of it.\nOne row per student (please add yourself).\nInsert the amount you took of each component in numbers only.\nIn the Graveyard section write in text (example: 2 x ESP32) all the equipment that you burnt, found malfunctioning, lost, etc… Whatever we can’t use anymore… IMPORTANT: there is no shame in having a big list, honesty is what we are looking for. We are just trying to keep track of all the equipment.\nPlease make sure to immediately update the sheet as you take/return the equipment.\nNo need to list super-fundamental equipment like resistors and cables.\n\n\n\nWe need your help:\nThe sheet is not complete and will be expanded during the semester. If there is missing information, please add/fix it. It can be:\n\nMissing component column\n\nNo description\n\nNo image link"
  },
  {
    "objectID": "posts/tutorials/arduino-intro-and-links.html#what-is-a-microcontroller",
    "href": "posts/tutorials/arduino-intro-and-links.html#what-is-a-microcontroller",
    "title": "Arduino intro & useful links",
    "section": "What is a microcontroller?",
    "text": "What is a microcontroller?\nWikipedia “microcontroller”:\nA microcontroller (MCU for microcontroller unit) is a small computer on a single metal-oxide-semiconductor (MOS) integrated circuit (IC) chip. A microcontroller contains one or more CPUs (processor cores) along with memory and programmable input/output peripherals.\nTo make things simple, it’s a small computer capable of receiving an input then performing on it logic, and then giving an output. A simple example for a use of a microcontroller could be: regulating the room temperature by turning on and off the heater according to the temperature in the room. In this situation, there will be a temperature sensor (input device) and an electronic switch (output device) connected to the microcontroller. The controller will be loaded with code that tells it when to turn on or off the heater (via the switch) according to the temperature perceived."
  },
  {
    "objectID": "posts/tutorials/arduino-intro-and-links.html#what-is-arduino",
    "href": "posts/tutorials/arduino-intro-and-links.html#what-is-arduino",
    "title": "Arduino intro & useful links",
    "section": "What is Arduino?",
    "text": "What is Arduino?\nArduino is a name of a company that makes user-friendly versatile microcontrollers. The MCUs they make are called “Arduino Uno”, “Arduino Mega”, “Arduino nano”, etc. They are widely used and have a lot of documentation and information online."
  },
  {
    "objectID": "posts/tutorials/arduino-intro-and-links.html#so-what-arduino-will-we-be-working-with-this-semester",
    "href": "posts/tutorials/arduino-intro-and-links.html#so-what-arduino-will-we-be-working-with-this-semester",
    "title": "Arduino intro & useful links",
    "section": "So what Arduino will we be working with this semester?",
    "text": "So what Arduino will we be working with this semester?\nActually, we won’t work with an Arduino MCU, instead, we will be using an ESP32 MCU that utilizes the same coding environment as Arduino. The reason for that is ESP32 has built-in wifi and Bluetooth which will be a great advantage for us. The ESP32 is cheap (~5$ per board) and has better specs than the Arduino boards: faster processer more RAM etc. Like Arduino, ESP32 has a lot of documentation and information online. As a side note, we do have a few Arduinos in the lab for troubleshooting when things don’t work with the ESP32 boards or for projects that don’t need wifi."
  },
  {
    "objectID": "posts/tutorials/arduino-intro-and-links.html#useful-links",
    "href": "posts/tutorials/arduino-intro-and-links.html#useful-links",
    "title": "Arduino intro & useful links",
    "section": "Useful links",
    "text": "Useful links\nThe world of MCUs has great support online. You actually don’t need this course to learn it… We are only here to guide you and help with the first steps. SO below are some usful links to websites/Youtube channels that provide excellent information:\nArduino syntax and coding:\n\nArduino — Language Reference\n\nTutorials by sensor manufacturers:\n\nSparkfun\n\nAdafruit\n\nProject ideas:\n\nArduino Project Hub\n\nInstructables — Arduino\n\nArduino beginners course:\n\nPaul McWhorter - New Arduino Tutorials\n\nExamples of good Youtube channels:\n\nAndreas Spiess\n\nG6EJD - David\n\nGreatScott!\n\neduc8s.tv"
  },
  {
    "objectID": "posts/tutorials/basic-electronics-concepts.html#very-basic-concepts",
    "href": "posts/tutorials/basic-electronics-concepts.html#very-basic-concepts",
    "title": "Basic Electronics Concepts",
    "section": "Very Basic Concepts",
    "text": "Very Basic Concepts\nYou should be familiar with the very basics of how electricity works. There are a million books and websites to learn from. We suggest the following webpages, written by Sparkfun, a big vendor of electronics.\n\nWhat is Electricity?\nElectric Power\nVoltage, Current, Resistance, and Ohm’s Law\nWhat is a Circuit?\nHow to Use a Multimeter\nVoltage Dividers\nHow to Use a Breadboard\n\nThere is no end to learning about these topics! The good news is that you can accomplish a lot of stuff with the very basic notions of electric circuits. If you want to learn even more, navigate your way on the “Suggested Reading” section in the tutorials above."
  },
  {
    "objectID": "posts/tutorials/basic-electronics-concepts.html#other-links",
    "href": "posts/tutorials/basic-electronics-concepts.html#other-links",
    "title": "Basic Electronics Concepts",
    "section": "Other Links",
    "text": "Other Links\n\nWhat is an LED?\n\nFrom electronics-tutorials.ws\nFrom Sparkfun\n\n\n\nThermistor Tutorial\n\nFrom Adafruit\nModel equations and calculator of constants for thermistors"
  },
  {
    "objectID": "posts/tutorials/electronics-class.html",
    "href": "posts/tutorials/electronics-class.html",
    "title": "Electronics Class",
    "section": "",
    "text": "Presentation\nDownload .pptx \n\n\nPin information for ESP32\n\n\n\nDigital Write\nUse the following code to activate LED pin.\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \nint LED_pin = 13;\n\n// the setup function runs once when you press reset or power the board\nvoid setup() {\n  // initialize digital pin LED_pin as an output.\n  pinMode(LED_pin, OUTPUT);\n}\n\n// the loop function runs over and over again forever\nvoid loop() {\n  digitalWrite(LED_pin, HIGH);   // turn the LED on (HIGH is the voltage level)\n  delay(1000);                       // wait for a second\n  digitalWrite(LED_pin, LOW);    // turn the LED off by making the voltage LOW\n  delay(1000);                       // wait for a second\n}\n\n            \n            \n            \n\n\nPWM with ESP32\nUse the following code to activate LED pin with PWM.\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n// the number of the LED pin\nconst int ledPin = 13;  // 13 corresponds to GPIO13\n\n// setting PWM properties\nconst int freq = 5000;\nconst int ledChannel = 0;\nconst int resolution = 8;\n \nvoid setup(){\n  // configure LED PWM functionalitites\n  ledcSetup(ledChannel, freq, resolution);\n  \n  // attach the channel to the GPIO to be controlled\n  ledcAttachPin(ledPin, ledChannel);\n}\n \nvoid loop(){\n  // increase the LED brightness\n  for(int dutyCycle = 0; dutyCycle <= 255; dutyCycle++){   \n    // changing the LED brightness with PWM\n    ledcWrite(ledChannel, dutyCycle);\n    delay(15);\n  }\n\n  // decrease the LED brightness\n  for(int dutyCycle = 255; dutyCycle >= 0; dutyCycle--){\n    // changing the LED brightness with PWM\n    ledcWrite(ledChannel, dutyCycle);   \n    delay(15);\n  }\n}\n\n            \n            \n            \n\n\nReading an Analog Pin\nUse the following code to read an analog pin.\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \nint analog_pin = 32; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\n\n\nvoid setup() {\n  Serial.begin(9600); //\n}\n\nvoid loop() {\n  val = analogRead(analog_pin);  // read the input pin\n  Serial.println(val);          // print value\n  delay(100);\n}\n\n            \n            \n            \n\n\nADC to voltage\nUse the following code to convert ADC reading to voltage.\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \nint analog_pin = 32; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\nfloat voltage;\n\nvoid setup() {\n  Serial.begin(9600); //\n}\n\nvoid loop() {\n  val = analogRead(analog_pin);  // read the input pin\n  voltage = (3.3/4095)*val;  // convert to voltage according to ADC\n  Serial.print(\"Voltage: \");\n  Serial.print(voltage);          // print value\n  Serial.println(\" V\");\n  delay(100);\n}\n\n            \n            \n            \n\n\nPotentiometer and PWM\nUse the following code to control PWM with potentiometer and dim the LED.\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n// the number of the LED pin\nconst int ledPin = 13;  // 13 corresponds to GPIO13\n\nint analog_pin = 32; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\n\n// setting PWM properties\nconst int freq = 5000;\nconst int ledChannel = 0;\nconst int resolution = 12;\n \nvoid setup(){\n  Serial.begin(9600);\n    \n  // configure LED PWM functionalitites\n  ledcSetup(ledChannel, freq, resolution);\n  \n  // attach the channel to the GPIO to be controlled\n  ledcAttachPin(ledPin, ledChannel);\n}\n \nvoid loop(){\n    val = analogRead(analog_pin);  // read the input pin\n    Serial.println(val);          // print value\n    ledcWrite(ledChannel, val);\n    delay(15);\n  }\n\n            \n            \n            \n\n\nThermistor\nDownload Data Sheet\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n// Thermistor \n// reading the temperature via the ESP32's ADC\n\nint analog_pin = 32; // Pin into which we connect the input voltage\nint val ;  // variable to store the value read\nfloat v2; // variable to store the voltage of v2\nint r1 = 10000; // R1 value (in the voltage divider)\nfloat v1 = 3.3; // V1 value\nint b_val = 4150; // B value of the resistor (from the data sheet)\nfloat r2; // variable to store the resistance of r2 (thermistor resistance)\nfloat t; // variable to store the temperature\nint adc_steps = 4095; // the number of increments our ADC has (ESP32 = 12bit)\nfloat r_25 = 10000; // the thermistor resistance at 25C (from the data sheet)\n\n// function to convert resistance to temperature according to the b value\n// equation in this link:\n// https://www.thinksrs.com/downloads/programs/therm%20calc/ntccalibrator/ntccalculator.html\nfloat resistance_to_temperature(int b, float r, float r_25) {\n  return b/(log(r/r_25)+(b/298.15))-273.15;\n}\n\nvoid setup() {\n  Serial.begin(9600); //\n}\n\nvoid loop() {\n  val = analogRead(analog_pin);  // read the input pin (reading v2)\n  v2 = (v1/adc_steps)*val;  // convert to voltage of v2 according to ADC\n  r2 = (v2*r1)/(v1-v2);\n  t = resistance_to_temperature(b_val, r2, r_25);\n  Serial.print(\"Temperature: \");\n  Serial.print(t);          // print temperature\n  Serial.println(\" C\");\n  delay(100);\n}"
  },
  {
    "objectID": "posts/tutorials/intro-to-sensor-modules-and-thingspeak.html#sensors",
    "href": "posts/tutorials/intro-to-sensor-modules-and-thingspeak.html#sensors",
    "title": "insert ino code",
    "section": "Sensors",
    "text": "Sensors\n\nDS18B20 Temperature Sensor\nPretty accurate temperature sensor. Each sensor has its own unique address, enabling the connection of numerous sensors to only on pin on the Arduino/ESP32.\nIn this tutorial you can find a lot more information.\nCode for finding the sensor’s address:\n\n     Toggle code\n    \n     \n         Download code\n    \n\n            \n            \n        \n/*\n * Rui Santos \n * Complete Project Details https://randomnerdtutorials.com\n */\n\n#include <OneWire.h>\n\n// Based on the OneWire library example\n\nOneWire ds(4);  //data wire connected to GPIO 4\n\nvoid setup(void) {\n  Serial.begin(115200);\n}\n\nvoid loop(void) {\n  byte i;\n  byte addr[8];\n  \n  if (!ds.search(addr)) {\n    Serial.println(\" No more addresses.\");\n    Serial.println();\n    ds.reset_search();\n    delay(250);\n    return;\n  }\n  Serial.print(\" ROM =\");\n  for (i = 0; i < 8; i++) {\n    Serial.write(' ');\n    Serial.print(addr[i], HEX);\n  }\n}\n\n            \n            \n            \nCode for reading temperature from multiple sensors:\n{% assign filename = “Agrotech_2022_read_multiple_DS18B20” %} {% include insert-cpp-code-with-toggle.html %}\n\n\nSHT31 Temperature & Humidity Sensor Using I2C communication\nIn this tutorial you can find a lot more information.\nCode for reading the sensor:\n{% assign filename = “Agrotech_2022_SHT31” %} {% include insert-cpp-code-with-toggle.html %}\n\n\nVL53L0X Time-of-Flight Distance Sensor Using I2C communication\nIn this tutorial you can find a lot more information.\nCode for reading the sensor:\n{% assign filename = “Agrotech_2022_VL53L0X” %} {% include insert-cpp-code-with-toggle.html %}"
  },
  {
    "objectID": "posts/tutorials/intro-to-sensor-modules-and-thingspeak.html#thingspeak",
    "href": "posts/tutorials/intro-to-sensor-modules-and-thingspeak.html#thingspeak",
    "title": "insert ino code",
    "section": "Thingspeak",
    "text": "Thingspeak\nThingspeak webpage.\n\nBasic Code for Uploading Data to Thingspeak\n{% assign filename = “Agrotech_2022_Thingspeak” %} {% include insert-cpp-code-with-toggle.html %}\n\n\nExample: Sending Data from Sensors Above to Thingspeak\n{% assign filename = “Agrotech_2022_sensors_to_Thingspeak” %} {% include insert-cpp-code-with-toggle.html %}"
  },
  {
    "objectID": "posts/tutorials/python-matlab-basics.html",
    "href": "posts/tutorials/python-matlab-basics.html",
    "title": "insert ino code",
    "section": "",
    "text": "Python and Matlab are very similar, but there are many syntax differences between them. This tutorial should help you start making graphs and the most basic data analysis, but it is very far from being a comprehensive guide. Google and Stack Overflow are your best friends :)"
  },
  {
    "objectID": "posts/tutorials/python-matlab-basics.html#matlab",
    "href": "posts/tutorials/python-matlab-basics.html#matlab",
    "title": "insert ino code",
    "section": "Matlab",
    "text": "Matlab\nMatlab is a proprietary (paid) software, but all HUJI students can install it and use it for free as long as they are connected to the university’s internet, either directly or through a VPN. In any case, we will be using Matlab to plot graphs on Thingspeak, which is owned by the same parent company, MathWorks.\nHere are a few very useful tutorials provided by MathWorks:\n\nApps\nAnalyze Your Data\nPrepare and Analyze Data — Examples\nVisualize Data — Examples\nAct on Data — Examples\n\nAs a first example that we will run together, please follow the steps below:\n\nLog into Thingspeak, open your channel, and then go to either Private View or Public View.\nPress on MATLAB Visualization box, on the top right.\nFrom Templates, choose Create a 2-D line plot, then press Create.\nIn case the template doesn’t load, you can create a custom visualization and paste the code below\n\n% Template MATLAB code for visualizing data from a channel as a 2D line\n% plot using PLOT function.\n\n% Prior to running this MATLAB code template, assign the channel variables.\n% Set 'readChannelID' to the channel ID of the channel to read from. \n% Also, assign the read field ID to 'fieldID1'. \n\n% TODO - Replace the [] with channel ID to read data from:\nreadChannelID = [];\n% TODO - Replace the [] with the Field ID to read data from:\nfieldID1 = [];\n\n% Channel Read API Key \n% If your channel is private, then enter the read API\n% Key between the '' below: \nreadAPIKey = '';\n\n%% Read Data %%\n\n[data, time] = thingSpeakRead(readChannelID, 'Field', fieldID1, 'NumPoints', 30, 'ReadKey', readAPIKey);\n\n%% Visualize Data %%\n\nplot(time, data);\nRead here more about arguments that function thingSpeakRead can receive"
  },
  {
    "objectID": "posts/tutorials/python-matlab-basics.html#python",
    "href": "posts/tutorials/python-matlab-basics.html#python",
    "title": "insert ino code",
    "section": "Python",
    "text": "Python\nWe will be using Jupyter Notebook as our python interface. There are many ways of running python, we chose Jupyter because it allows for easy prototyping, and the Markdown cells are great for documentation.\nJupyter Notebook{: .button}"
  },
  {
    "objectID": "posts/tutorials/water-and-energy-balances.html",
    "href": "posts/tutorials/water-and-energy-balances.html",
    "title": "Water and Energy Balances",
    "section": "",
    "text": "Figure from Rodriguez et al. (2010)."
  },
  {
    "objectID": "posts/tutorials/water-and-energy-balances.html#water-balance",
    "href": "posts/tutorials/water-and-energy-balances.html#water-balance",
    "title": "Water and Energy Balances",
    "section": "Water balance",
    "text": "Water balance\nA useful source is Nadia Christina Sabeh’s PhD thesis, 2007.\n\n\\[\nE_V + E_C + E_S + E_T = 0\n\\]"
  },
  {
    "objectID": "posts/tutorials/water-and-energy-balances.html#energy-balance",
    "href": "posts/tutorials/water-and-energy-balances.html#energy-balance",
    "title": "Water and Energy Balances",
    "section": "Energy balance",
    "text": "Energy balance\n\n\\[\nQ_R + Q_G + Q_V + Q_S + Q_P + Q_L + Q_H = 0\n\\]"
  },
  {
    "objectID": "posts/tutorials/water-and-energy-balances.html#evaporative-cooling",
    "href": "posts/tutorials/water-and-energy-balances.html#evaporative-cooling",
    "title": "Water and Energy Balances",
    "section": "Evaporative Cooling",
    "text": "Evaporative Cooling"
  },
  {
    "objectID": "posts/tutorials/water-and-energy-balances.html#potential-evapotranspiration",
    "href": "posts/tutorials/water-and-energy-balances.html#potential-evapotranspiration",
    "title": "Water and Energy Balances",
    "section": "Potential Evapotranspiration",
    "text": "Potential Evapotranspiration\n\nPenman (1948)\nThis equation accounts for two main terms: * the first is the available energy flux density, * the second term is the drying power of the air.\n\\[\nPE = \\frac{\\Delta(R_n-G) + \\gamma\\cdot 2.6 (1+0.536 u_2)\\text{VPD}}{\\lambda(\\Delta+\\gamma)}\n\\]\nMore about this here.\n\n\nPyET\nLuckily, we don’t have to work very hard to estimate the potential evapotranspiration. We will use the Python library pyet: * documentation * github\nUsing PyET is quite straightforward:\npyet.pm_fao56(tmean,               # mean temperature\n              wind,                # wind speed\n              rn=rn,               # net radiation\n              tmax=tmax,           # max temperature\n              tmin=tmin,           # max temperature\n              rh=rh,               # relative humidity\n              elevation=elevation) # elevation above sea level"
  },
  {
    "objectID": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html",
    "href": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html",
    "title": "Psychrometric Chart and Evaporative Cooling",
    "section": "",
    "text": "Here we will learn a bit about the psychrmetric chart - what it is how to read it and how to use it in python. In addition we will learn a bit about evaporative cooling and calculations that can be done."
  },
  {
    "objectID": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html#psychrometric-chart",
    "href": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html#psychrometric-chart",
    "title": "Psychrometric Chart and Evaporative Cooling",
    "section": "Psychrometric Chart",
    "text": "Psychrometric Chart\n\n\n\nChart\n\n\nHi-res pdf of the graph above.\nThe chart allows us to study the relation between:\n\nAir temperature\nRelative humidity\nDew point\nWet bulb temperature\nMoisture content\nEnthalpy\nAir volume\n\nYou can read more about all of these here.\nInformation about how to read the chart can be found here."
  },
  {
    "objectID": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html#evaporative-cooling-wiki",
    "href": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html#evaporative-cooling-wiki",
    "title": "Psychrometric Chart and Evaporative Cooling",
    "section": "Evaporative cooling (wiki)",
    "text": "Evaporative cooling (wiki)\nEvaporative coolers lower the temperature of air using the principle of evaporative cooling. Evaporative cooling is the conversion of liquid water into vapor using the thermal energy in the air, resulting in a lower air temperature. The energy needed to evaporate the water is taken from the air in the form of sensible heat, which affects the temperature of the air, and converted into latent heat, the energy present in the water vapor component of the air, whilst the air remains at a constant enthalpy value. This conversion of sensible heat to latent heat is known as an isenthalpic process because it occurs at a constant enthalpy value. Evaporative cooling therefore causes a drop in the temperature of air proportional to the sensible heat drop and an increase in humidity proportional to the latent heat gain. Evaporative cooling can be visualized using a psychrometric chart by finding the initial air condition and moving along a line of constant enthalpy toward a state of higher humidity\nIn the green house we have an evaporative cooler as shown in this diagram:\n \nWater trickles on a celullose pad, then fans push dry air from outside through the pad in which water evaporates and the air gets colder and humidity rises."
  },
  {
    "objectID": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html#how-much-can-the-cooler-cool",
    "href": "posts/tutorials/psychrometric-chart-and-evaporative-cooling.html#how-much-can-the-cooler-cool",
    "title": "Psychrometric Chart and Evaporative Cooling",
    "section": "How much can the cooler cool?",
    "text": "How much can the cooler cool?\nThe evaporative cooler can cool as low as the “wet bulb trmperature”.\nWe can look at the chart, and we should for the first time… But let’s calculate it using the PschroLib python package.\nAll the library’s functions can be found here.\nimport psychrolib\n\n# Set the unit system, for example to SI (can be either SI or IP) - this needs to be done only once\npsychrolib.SetUnitSystem(psychrolib.SI)\n\naltitude = 0\natm_pressure = psychrolib.GetStandardAtmPressure(0)\n\n# Calculate the wet bulb temperature for a dry bulb temperature of 25 C , a relative humidity of 80% and atmospheric pressure (kPa)\nWBT = psychrolib.GetTWetBulbFromRelHum(25.0, 0.80,atm_pressure )\nprint(f'Wet Bulb Temperature: {WBT:.3f} degree C')\nprint(f'Degrees cooled: {25-WBT:.3f} degree C')\nOutput:\nWet Bulb Temperature: 22.380 degree C\nDegrees cooled: 2.620 degree C\nNow let’s see how many degrees will it cool if we have only 30% relative humidity outside:\nWBT = psychrolib.GetTWetBulbFromRelHum(25.0, 0.30,atm_pressure )\nprint(f'Wet Bulb Temperature: {WBT:.3f} degree C')\nprint(f'Degrees cooled: {25-WBT:.3f} degree C')\nOutput:\nWet Bulb Temperature: 14.422 degree C\nDegrees cooled: 10.578 degree C\nAs you can see it is much more efficient in dry areas like deserts. Therefore it is many times called a “desert cooler”. What will the relative humidity be for the air that leaves the pad?\n\nEfficiency\nTheoretically, an evaporative cooler cools down to the wet bulb temperature, but in reality it is not 100% efficient and the air comes out not as cold. Many factors can influence: water quality, air speed, pad thickness, pad condition (you will se that ours is not great…), etc. We can calculate the efficiency by this equation:\n\\[\n\\eta = \\dfrac{T_i-T_o}{T_i-T_w},\n\\]\nwhere\n\n\\(T_i = \\:\\) temperature coming into the pad.\n\n\\(T_o = \\:\\) temperature coming out of the pad.\n\\(T_w = \\:\\) wet bulb temperature.\n\nWe can calculate it using data from our sensors and learn about the greenhouse we are using.\nFor example:\nIf we measure 30C and 60% humidity outside and the temperature out of the pad is 26C\nT_i = 30\nT_o = 26\nT_w = psychrolib.GetTWetBulbFromRelHum(T_i, 0.60,atm_pressure )\nprint(f'Wet Bulb Temperature: {T_w:.3f} degree C')\n\neffi = (T_i-T_o)/(T_i-T_w)\nprint(f'Efficiency is: {100*effi:.3f} %')\nOutput:\nWet Bulb Temperature: 23.812 degree C\nEfficiency is: 64.646 %\n\n\nWhat else can we calculate?\nKnowing the fan’s capacity (we can measure that too using wind sensors) and the temerature and humidity of the air leaving the greenhouse we can calculate:\n\nAmount of water evaporated from the pad,\nAmount of water evaporated from the greenhouse (being a concreete greenhouse that means total evaporation from plants and pots),\nHeat removed from the greenouse by the flowing air,\n\nThese are just some ideas, you can think of other interesting things to calculate.\nThere are existing models for predicting the temperatures of greenhouses. There are many other factors taking place such as solar radiation, outside wind, amounts of plants in the greenhouse, etc. We won’t be studying those here, but maybe you can come up with some models/conclusions/correlations of your own :)"
  },
  {
    "objectID": "posts/tutorials/soldering-and-wires.html",
    "href": "posts/tutorials/soldering-and-wires.html",
    "title": "Soldering and Wires",
    "section": "",
    "text": "Breadbord is fun and easy but sooner or later everyone working with Arduino will need to know how to solder and work with wires. There are amazing tutorials that allready exist. Even though we will learn many of the topics in class, we strongly recomend to take a look at these tutorials.\n\nSoldering - by Sparkfun\nSoldering - by Adafruit (note that this is a multi page guide)\nWorking with wire - by Sparkfun"
  },
  {
    "objectID": "content/equipment/index.html",
    "href": "content/equipment/index.html",
    "title": "Equipment",
    "section": "",
    "text": "1 piece: ~$4.70 from aliexpress\n\n\n\n\n1 piece: ~$5.50 from aliexpress"
  },
  {
    "objectID": "content/equipment/index.html#microcontrollers",
    "href": "content/equipment/index.html#microcontrollers",
    "title": "Equipment",
    "section": "Microcontrollers",
    "text": "Microcontrollers\n\nESP32\n\n1 piece: ~$4.70 from aliexpress\n\n\nArduino Nano\n\n1 piece: ~$5.50 from aliexpress"
  },
  {
    "objectID": "content/equipment/index.html#sensors-peripherals",
    "href": "content/equipment/index.html#sensors-peripherals",
    "title": "Equipment",
    "section": "Sensors & Peripherals",
    "text": "Sensors & Peripherals\n\nOLED Display\n\n1 piece: ~$1.65 from aliexpress\n\n\nPhotoresistor\n\n50 pieces: ~$1.25 from aliexpress\n\n\nCapacitive Soil Moisture Sensor\n\n1 piece: ~$0.40 from aliexpress\n\n\nTime-of-Flight (ToF) Laser Ranging Sensor\n\n1 piece: ~$1.50 from aliexpress\n\n\nUltrasonic Sensor\n\n1 piece: ~$0.90 from aliexpress\n\n\nRTC (Real Time Clock)\n\n1 piece: ~$2.30 from aliexpress\n\n\nDigital Temperature Sensor\n\n10 pieces: ~$2.70 from aliexpress\n\n\nTemperature / Humidity Sensor\n\n1 piece: ~$2.50 from aliexpress"
  },
  {
    "objectID": "content/equipment/index.html#electronics",
    "href": "content/equipment/index.html#electronics",
    "title": "Equipment",
    "section": "Electronics",
    "text": "Electronics\n\nBreadboard\n\nsmall: ~$1 from aliexpress\nlarge: ~$1 from aliexpress\n\n\nJumper wires\n\n40 pieces: ~$1.60 from aliexpress\n\n\nWires with Alligator-Banana tips\n\n1m cable: ~$0.70 from aliexpress\n\n\nResistors\n\n600 pieces: ~$2.40 from aliexpress\n\n\nPotentiometer (variable resistor)\n\n10 pieces: ~$1.70 from aliexpress\n\n\nJST (pin header connector)\n\n230 pieces: ~$0.70 from aliexpress\n\n\nRelay\n\n3.3V 2 Channel Relay Module: ~$1.30 from aliexpress\n\n\nHelping hands\n\n~$16 from aliexpress\n\n\nOperational amplifier\n\n10 pieces: ~$2.20 from aliexpress\n\n\nToggle switch\n\n40 pieces: ~$1.80 from aliexpress\n\n\nPrototype PCB (Printed Circuit Board)\n\n10 pieces: ~$1.20 from aliexpress\n\n\nHeat Gun\n\n1 piece: ~$9.00 from aliexpress\n\n\nHeat Shrink Set\n\n328 pieces: ~$3.00 from aliexpress"
  },
  {
    "objectID": "content/index.html",
    "href": "content/index.html",
    "title": "Content",
    "section": "",
    "text": "Wednesdays, from 17:00 to 20:00\n In the lab next to the “Ground Water” seminar room, 1st floor\n Map"
  },
  {
    "objectID": "content/index.html#tutorials",
    "href": "content/index.html#tutorials",
    "title": "Content",
    "section": " Tutorials",
    "text": "Tutorials\n\nArduino intro & useful links\nIntro to Arduino code\nBasic Electronics Concepts\nElectronics Class\nSensor Modules and Thingspeak\nBasic Data Analysis with Python and Matlab\nWater and Energy Balances\nPsychrometric Chart and Evaporative cooling\nSoldering and Wires"
  },
  {
    "objectID": "content/index.html#resources",
    "href": "content/index.html#resources",
    "title": "Content",
    "section": " Resources",
    "text": "Resources\n\n Equipment\nClick for a list of the main components used in this course.\n\n\n Github\nMake an account on Github. Create a repository called “agrotech” or whatever you else want to call it. You can upload to this repository your code, data, diagrams, pictures, markdown, etc. In the end of the semester you will upload your project report as a Jupyter Notebook file.\nFrom now on, your main Github page can be your “geek face” on the internet. Make a clean and simple readme.md, telling the world who you are and what you do.\n\n\n Jupyter Notebook\nThe easiest way to install Python (+ Jupyter Notebook, Spyder, PyCharm, JupyterLab, etc) on any OS is to download Anaconda. Jupyter Notebook is a versatile environment that allows you to write code and documentation in one single file, taking advantage of Markdown. Click for a short and a long markdown cheat sheet.\n\n\n Fritzing\nFritzing is a nice software that lets you easily draw your own circuits and diagrams.\n\n\n\n Very useful links\n\nOregon State’s OPEnS Lab. Github"
  },
  {
    "objectID": "index.html#iconify-fa-soliduser-ninja-mission",
    "href": "index.html#iconify-fa-soliduser-ninja-mission",
    "title": "agrotech lab",
    "section": " Mission",
    "text": "Mission\nWe are here to have some fun."
  },
  {
    "objectID": "index.html#fa-solid-user-ninja",
    "href": "index.html#fa-solid-user-ninja",
    "title": "agrotech lab",
    "section": "",
    "text": "Mission \nWe are here to have some fun."
  },
  {
    "objectID": "index.html#mission",
    "href": "index.html#mission",
    "title": "agrotech lab",
    "section": "Mission",
    "text": "Mission\n\nWe are here to have some fun."
  },
  {
    "objectID": "about.html#iconify-charm-rocket-course-goals",
    "href": "about.html#iconify-charm-rocket-course-goals",
    "title": "About",
    "section": " Course goals",
    "text": "Course goals\nThe goal of this course is to give a first hands-on experience with experimental design data collection, analysis and reporting. We want students to creatively engage with their projects, finding by themselves solutions to the challenges they encounter. The role of the teaching staff will be to consult and advise, not spoon-feed solutions.\nThe main values we would like to promote: curiosity, independence, creativity, and a can-do attitude."
  },
  {
    "objectID": "about.html#iconify-mdi-frequently-asked-questions-guiding-questions-and-description",
    "href": "about.html#iconify-mdi-frequently-asked-questions-guiding-questions-and-description",
    "title": "About",
    "section": " Guiding Questions and Description",
    "text": "Guiding Questions and Description\nThis course deals with the design of a simple experiment focusing on data collection and analysis. The guiding questions throughout this course are:\n\nWhat is my research question?\nWhat data is needed?\nHow will data be collected?\nHow will data be analyzed?\nHow will data be reported?\n\nThroughout the course, students will critically engage with each of these questions, and as a case study, will build an experiment to monitor the flow of water in the soil-plant-atmosphere continuum.\nThe monitoring and control systems to be build are based on the ESP32, a versatile (and cheap!) microcontroller. The ESP32 is similar to the Arduino, with the advantage that it has inbuilt Wi-Fi and Bluetooth features."
  },
  {
    "objectID": "about.html#iconify-eva-email-outline-contact",
    "href": "about.html#iconify-eva-email-outline-contact",
    "title": "About",
    "section": " Contact",
    "text": "Contact\nErez Feuer: erez.feuer@mail.huji.ac.il\nYair Mau: yair.mau@mail.huji.ac.il"
  },
  {
    "objectID": "index.html#iconify-fa-solid-user-ninja-mission",
    "href": "index.html#iconify-fa-solid-user-ninja-mission",
    "title": "agrotech lab",
    "section": " Mission",
    "text": "Mission\nWe are here to have some fun."
  },
  {
    "objectID": "content.html#iconify-fluent-brain-circuit-20-regular-resources",
    "href": "content.html#iconify-fluent-brain-circuit-20-regular-resources",
    "title": "Content",
    "section": " Resources",
    "text": "Resources\n\n Equipment\nClick for a list of the main components used in this course.\n\n\n Github\nMake an account on Github. Create a repository called “agrotech” or whatever you else want to call it. You can upload to this repository your code, data, diagrams, pictures, markdown, etc. In the end of the semester you will upload your project report as a Jupyter Notebook file.\nFrom now on, your main Github page can be your “geek face” on the internet. Make a clean and simple readme.md, telling the world who you are and what you do.\n\n\n Jupyter Notebook\nThe easiest way to install Python (+ Jupyter Notebook, Spyder, PyCharm, JupyterLab, etc) on any OS is to download Anaconda. Jupyter Notebook is a versatile environment that allows you to write code and documentation in one single file, taking advantage of Markdown. Click for a short and a long markdown cheat sheet.\n\n\n Fritzing\nFritzing is a nice software that lets you easily draw your own circuits and diagrams.\n\n\n\n Very useful links\n\nOregon State’s OPEnS Lab. Github"
  },
  {
    "objectID": "content.html#iconify-fa6-solid-user-graduate-tutorials",
    "href": "content.html#iconify-fa6-solid-user-graduate-tutorials",
    "title": "Content",
    "section": " Tutorials",
    "text": "Tutorials\n\nArduino intro & useful links\nIntro to Arduino code\nBasic Electronics Concepts\nElectronics Class\nSensor Modules and Thingspeak\nBasic Data Analysis with Python and Matlab\nWater and Energy Balances\nPsychrometric Chart and Evaporative cooling\nSoldering and Wires"
  },
  {
    "objectID": "projects.html#iconify-icon-park-solid-pyramid-one-passover-2022-mini-project",
    "href": "projects.html#iconify-icon-park-solid-pyramid-one-passover-2022-mini-project",
    "title": "Projects",
    "section": " Passover 2022 mini project",
    "text": "Passover 2022 mini project\nclick here"
  },
  {
    "objectID": "projects.html#iconify-mingcute-transfer-3-line-borrowing-equipment",
    "href": "projects.html#iconify-mingcute-transfer-3-line-borrowing-equipment",
    "title": "Projects",
    "section": " Borrowing equipment",
    "text": "Borrowing equipment\nclick here"
  },
  {
    "objectID": "projects.html#iconify-file-icons-arduino-arduino-nano",
    "href": "projects.html#iconify-file-icons-arduino-arduino-nano",
    "title": "Projects",
    "section": " Arduino Nano",
    "text": "Arduino Nano\nclick here"
  }
]