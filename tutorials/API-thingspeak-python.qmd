---
title: "API to download Thingspeak data with Python"
jupyter: python3
execute:
  freeze: auto  # re-render only when source changes
---

An API (Application Programming Interface) is a set of rules and protocols that allow different software applications to communicate with each other. 

In the code below, we will use Thingspeak's API to read data, save it to file, and finally load it to python.

## Import relevant packages

```{python}
#| echo: true

import urllib
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import matplotlib.dates as mdates
```

## Download data from Thingspeak and save them to file

```{python}
#| echo: true

# define what to download
channels = "2076217"
fields = "1,2,3"

# see here all the "Query String Parameters"
# https://www.mathworks.com/help/thingspeak/readdata.html

results = 100
# Download the last N results
# url = f"https://api.thingspeak.com/channels/{channels}/fields/{fields}.csv?results={results}"

minutes = "30"
# Number of minutes before NOW to include in response.
# url = f"https://api.thingspeak.com/channels/{channels}/fields/{fields}.csv?minutes={minutes}"

start = "2023-04-16%2000:00:00"  # format YYYY-MM-DD%20HH:NN:SS
end = "2023-04-19%2000:00:00"    # format YYYY-MM-DD%20HH:NN:SS
url = f"https://api.thingspeak.com/channels/{channels}/fields/{fields}.csv?start={start}&end={end}"

# Open the URL and get the response
data = urllib.request.urlopen(url)
# Read the response data
d = data.read()
# save data to csv
filename1 = "downloaded_data.csv"
file = open(filename1, "w")
file.write(d.decode('UTF-8'))
file.close()
```

## Load data as a pandas dataframe

```{python}
#| echo: true

# load data
df = pd.read_csv(filename1)
# rename columns
df = df.rename(columns={"created_at": "timestamp",
                        "field1": "Temp",
                        "field2": "RH",
                        "field3": "VPD",
                        # "field4": "whatever",
                        })
# set timestamp as index
df['timestamp'] = pd.to_datetime(df['timestamp'])
df = df.set_index('timestamp')
df
```

## Plot data

Now you can manipulate your data however you want! Here we will simply plot one of the fields.

```{python}
#| echo: true

fig, ax = plt.subplots(1)
ax.plot(df['Temp'])
ax.set(ylabel="temperature (Â°C)")
plt.gcf().autofmt_xdate()  # makes slanted dates

```
